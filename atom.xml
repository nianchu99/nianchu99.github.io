<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nianchu-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nianchu.space/"/>
  <updated>2020-03-14T03:36:47.183Z</updated>
  <id>http://www.nianchu.space/</id>
  
  <author>
    <name>nianchu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java/十六进制转十进制的公式</title>
    <link href="http://www.nianchu.space/2020/03/14/Java/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%E7%9A%84%E5%85%AC%E5%BC%8F/"/>
    <id>http://www.nianchu.space/2020/03/14/Java/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%E7%9A%84%E5%85%AC%E5%BC%8F/</id>
    <published>2020-03-14T03:36:01.214Z</published>
    <updated>2020-03-14T03:36:47.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十六进制转十进制的公式"><a href="#十六进制转十进制的公式" class="headerlink" title="十六进制转十进制的公式"></a>十六进制转十进制的公式</h1><p>(我自己从来没记过嘿嘿)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hexToDecimal</span><span class="params">(String hex)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> decimalValue = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hex.length(); i++) &#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">       <span class="keyword">char</span> hexChar  = hex.charAt(i);</span><br><span class="line">       decimalValue = decimalValue * <span class="number">16</span> + hexCharToDecimal(hexChar);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> decimalValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;十六进制转十进制的公式&quot;&gt;&lt;a href=&quot;#十六进制转十进制的公式&quot; class=&quot;headerlink&quot; title=&quot;十六进制转十进制的公式&quot;&gt;&lt;/a&gt;十六进制转十进制的公式&lt;/h1&gt;&lt;p&gt;(我自己从来没记过嘿嘿)&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java常用函数</title>
    <link href="http://www.nianchu.space/2020/03/12/Java/Java%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.nianchu.space/2020/03/12/Java/Java%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-03-12T15:40:00.000Z</published>
    <updated>2020-03-12T15:40:50.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序-Java"><a href="#冒泡排序-Java" class="headerlink" title="冒泡排序(Java)"></a>冒泡排序(Java)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] indexOfSmallElement(<span class="keyword">double</span>[] array)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">  <span class="comment">// loop 1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line">          exchange = array[j];</span><br><span class="line">          array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">          array[j + <span class="number">1</span>] = exchange;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;冒泡排序-Java&quot;&gt;&lt;a href=&quot;#冒泡排序-Java&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序(Java)&quot;&gt;&lt;/a&gt;冒泡排序(Java)&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java/Java常见类型转换</title>
    <link href="http://www.nianchu.space/2020/03/12/Java/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://www.nianchu.space/2020/03/12/Java/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-03-12T06:44:07.620Z</published>
    <updated>2020-03-12T07:03:34.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见类型转换"><a href="#常见类型转换" class="headerlink" title="常见类型转换"></a>常见类型转换</h1><h2 id="long-与-int"><a href="#long-与-int" class="headerlink" title="long 与 int"></a>long 与 int</h2><p>一.将long型转化为int型，这里的long型是基础类型：</p><p>long   a = 10;     int b = (int)a;   </p><p>二.将Long型转换为int 型的，这里的Long型是包装类型：</p><p>Long a = 10; int b=a.intValue();</p><p>三.将int型转化为long型，这里的int型是基础类型：</p><p>int a = 10;long b = (int)a;</p><p>四.将Integer型转化为long型，这里的Integer型是包装类型：</p><p>int a = 10;Long b = a.longValue();</p><h2 id="int-和-String"><a href="#int-和-String" class="headerlink" title="int 和 String"></a>int 和 String</h2><p><a href="https://blog.csdn.net/u012050154/article/details/51320638" target="_blank" rel="noopener">https://blog.csdn.net/u012050154/article/details/51320638</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见类型转换&quot;&gt;&lt;a href=&quot;#常见类型转换&quot; class=&quot;headerlink&quot; title=&quot;常见类型转换&quot;&gt;&lt;/a&gt;常见类型转换&lt;/h1&gt;&lt;h2 id=&quot;long-与-int&quot;&gt;&lt;a href=&quot;#long-与-int&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/方法重载</title>
    <link href="http://www.nianchu.space/2020/03/12/Java/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
    <id>http://www.nianchu.space/2020/03/12/Java/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</id>
    <published>2020-03-12T00:47:09.243Z</published>
    <updated>2020-03-12T03:33:40.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法重载-overload"><a href="#方法重载-overload" class="headerlink" title="方法重载(overload)"></a>方法重载(overload)</h1><h2 id="适用于解决以下问题："><a href="#适用于解决以下问题：" class="headerlink" title="适用于解决以下问题："></a>适用于解决以下问题：</h2><p>调用功能相似方法时传统的做法是编写多个有着不同名字的方法，这样既麻烦且不美观</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>——方法重载(overload)</p><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>各个方法的功能都相似；</p><h2 id="不是所有的语言都有这个机制"><a href="#不是所有的语言都有这个机制" class="headerlink" title="不是所有的语言都有这个机制"></a>不是所有的语言都有这个机制</h2><p>例如javascript没有这个机制</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>使用的方法名字一样，区分的依据是实参的数据类型；<br>程序员调用方法的时候比较方便，虽然调用的不同的方法，但是感觉就像是在使用一个方法一样，不需要记忆更多的方法；<br>同时代码更加美观。</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>功能不相似的时候尽可能让方法的方法名不同。</p><h2 id="思考问题："><a href="#思考问题：" class="headerlink" title="思考问题："></a>思考问题：</h2><p> 1.方法重载又被称为：overload<br>2.什么时候考虑使用方法重载：<br>功能相似的时候，尽可能让方法名相同；<br>【但是：功能不同/不相似的时候，尽可能不使用方法重载】<br>3.满足什么条件才构成方法重载</p><ul><li>在同一个类中</li><li>方法名相同</li><li>参数列表不同：<ul><li>数量不同</li><li>顺序不同</li><li>类型不同 </li></ul></li></ul><p>4.方法重载和什么有关系，和什么没有关系？</p><ul><li>方法重载和方法名 + 参数列表有关系</li><li>方法重载和返回值类型无关</li><li>方法重载和修饰符列表无关(即与是否有public等等无关)<h2 id="方法重载的具体应用"><a href="#方法重载的具体应用" class="headerlink" title="方法重载的具体应用"></a>方法重载的具体应用</h2>使用下面的自定义类，利用其中的各个重载方法就可以实现简单快速地输出各种类型的值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfPrint</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">byte</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">short</span> data)</span></span>&#123;</span><br><span class="line">System.out.println( data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">long</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">float</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">double</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">boolean</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法重载-overload&quot;&gt;&lt;a href=&quot;#方法重载-overload&quot; class=&quot;headerlink&quot; title=&quot;方法重载(overload)&quot;&gt;&lt;/a&gt;方法重载(overload)&lt;/h1&gt;&lt;h2 id=&quot;适用于解决以下问题：&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>起航/经验之谈</title>
    <link href="http://www.nianchu.space/2020/03/12/%E8%B5%B7%E8%88%AA/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    <id>http://www.nianchu.space/2020/03/12/%E8%B5%B7%E8%88%AA/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/</id>
    <published>2020-03-12T00:35:47.296Z</published>
    <updated>2020-03-12T00:38:09.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="邮箱："><a href="#邮箱：" class="headerlink" title="邮箱："></a>邮箱：</h2><p>求职简历中邮箱不要使用@qq.com后缀的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;邮箱：&quot;&gt;&lt;a href=&quot;#邮箱：&quot; class=&quot;headerlink&quot; title=&quot;邮箱：&quot;&gt;&lt;/a&gt;邮箱：&lt;/h2&gt;&lt;p&gt;求职简历中邮箱
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Matlab-课程记录/Matlab常见函数</title>
    <link href="http://www.nianchu.space/2020/03/10/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/Matlab%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    <id>http://www.nianchu.space/2020/03/10/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/Matlab%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-10T10:06:18.796Z</published>
    <updated>2020-03-10T10:09:47.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h2 id="eye-n-生成n-n且对角线为1的矩阵"><a href="#eye-n-生成n-n且对角线为1的矩阵" class="headerlink" title="eye(n) 生成n*n且对角线为1的矩阵"></a>eye(n) 生成n*n且对角线为1的矩阵</h2><h2 id="ones-生成n-n且全部为1的矩阵"><a href="#ones-生成n-n且全部为1的矩阵" class="headerlink" title="ones() 生成n*n且全部为1的矩阵"></a>ones() 生成n*n且全部为1的矩阵</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见函数&quot;&gt;&lt;a href=&quot;#常见函数&quot; class=&quot;headerlink&quot; title=&quot;常见函数&quot;&gt;&lt;/a&gt;常见函数&lt;/h1&gt;&lt;h2 id=&quot;eye-n-生成n-n且对角线为1的矩阵&quot;&gt;&lt;a href=&quot;#eye-n-生成n-n且对角线为1的矩阵&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python正则表达式</title>
    <link href="http://www.nianchu.space/2020/03/09/Python/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.nianchu.space/2020/03/09/Python/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-03-09T15:43:13.334Z</published>
    <updated>2020-03-09T15:45:51.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式入门"><a href="#正则表达式入门" class="headerlink" title="正则表达式入门"></a>正则表达式入门</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>import re </p><h2 id="创建一种格式"><a href="#创建一种格式" class="headerlink" title="创建一种格式"></a>创建一种格式</h2><p>phoneNumber = re.compile(r’\d\d\d-\d\d\d-\d\d\d\d’)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式入门&quot;&gt;&lt;a href=&quot;#正则表达式入门&quot; class=&quot;headerlink&quot; title=&quot;正则表达式入门&quot;&gt;&lt;/a&gt;正则表达式入门&lt;/h1&gt;&lt;h2 id=&quot;导入&quot;&gt;&lt;a href=&quot;#导入&quot; class=&quot;headerlink&quot; title=&quot;导
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python随便写点</title>
    <link href="http://www.nianchu.space/2020/03/09/Python/Python%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/"/>
    <id>http://www.nianchu.space/2020/03/09/Python/Python%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/</id>
    <published>2020-03-09T15:22:44.912Z</published>
    <updated>2020-03-09T15:41:29.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随便写点"><a href="#随便写点" class="headerlink" title="随便写点"></a>随便写点</h1><p> _划线是会指向最后一次表达式的值</p><p>以单个下划线开头命名的方法或者变量,就是说明它是仅提供给内部使用的</p><p>##下划线特殊使用 有关继承和类。看懂了就行，不应该使用这种奇怪的用法。<br>_Person__name = “nianchu”<br>class Person():<br>    def print_name(self):<br>        return __name</p><p>print(Person().print_name())</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;随便写点&quot;&gt;&lt;a href=&quot;#随便写点&quot; class=&quot;headerlink&quot; title=&quot;随便写点&quot;&gt;&lt;/a&gt;随便写点&lt;/h1&gt;&lt;p&gt; _划线是会指向最后一次表达式的值&lt;/p&gt;
&lt;p&gt;以单个下划线开头命名的方法或者变量,就是说明它是仅提供给内部使用的&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java学习记录1</title>
    <link href="http://www.nianchu.space/2020/03/09/Java/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <id>http://www.nianchu.space/2020/03/09/Java/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</id>
    <published>2020-03-09T02:07:14.663Z</published>
    <updated>2020-03-12T04:31:55.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java学习记录"><a href="#Java学习记录" class="headerlink" title="Java学习记录"></a>Java学习记录</h1><p>用于记录那些零星的不成系统的需要注意的问题</p><h2 id="next-和nextLine-的区别"><a href="#next-和nextLine-的区别" class="headerlink" title="next()和nextLine()的区别"></a>next()和nextLine()的区别</h2><p>next()特点：<br>1、一定要读取到有效字符后才可以结束输入，<br>2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉，<br>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符.<br>next()不能得到带有空格的字符串</p><p>nextLine()特点：<br>1、以Enter为结束符,也就是说nextLine()方法返回的是输入回车之前的所有字符。<br>2、可以获得空白.</p><h2 id="Java中字符串可以像整数一样交换顺序"><a href="#Java中字符串可以像整数一样交换顺序" class="headerlink" title="Java中字符串可以像整数一样交换顺序"></a>Java中字符串可以像整数一样交换顺序</h2><h2 id="为什么Math-sin-Math-PI-为什么不等于0"><a href="#为什么Math-sin-Math-PI-为什么不等于0" class="headerlink" title="为什么Math.sin(Math.PI)为什么不等于0?"></a>为什么Math.sin(Math.PI)为什么不等于0?</h2><p>解释：<br>1.常规代数里，是等于0，但是cpu运算的时候，只是近似等于0<br>2.计算机语言数值型数据都是二进制表达的，所以在进行浮点计算时候是很难精确的，Math.sin(Math.PI)是通过微积分计算公式计算出来的，会存在精度上面的误差结果是：1.2246063538223772e-16</p><p>综上，浮点数的运算，往往并不是我们期望的结果，可以通过Math.round() 函数来解决。</p><h2 id="常见计算结果类型"><a href="#常见计算结果类型" class="headerlink" title="常见计算结果类型"></a>常见计算结果类型</h2><p>Math,pow计算结果是小数<br>Math.log计算结果也是小数</p><h2 id="如何利用Math-random生成各个范围的整数"><a href="#如何利用Math-random生成各个范围的整数" class="headerlink" title="如何利用Math.random生成各个范围的整数"></a>如何利用Math.random生成各个范围的整数</h2><p><strong>* 以下这是阿里巴巴编码规范插件的提示 *</strong><br>** 注意 Math.random() 这个方法返回是double类型，注意取值的范围[0,1)（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法. **</p><h2 id="Unicode的问题"><a href="#Unicode的问题" class="headerlink" title="Unicode的问题"></a>Unicode的问题</h2><h2 id="小技巧可以这样输出一个双引号"><a href="#小技巧可以这样输出一个双引号" class="headerlink" title="小技巧可以这样输出一个双引号:"></a>小技巧可以这样输出一个双引号:</h2><p>System.out.println(‘“‘);    // prints “</p><p>字符串操作之:concat.contains??忘记了</p><p>记录怎样实现字符串的强制转换</p><h2 id="Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。"><a href="#Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。" class="headerlink" title="Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。"></a>Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java学习记录&quot;&gt;&lt;a href=&quot;#Java学习记录&quot; class=&quot;headerlink&quot; title=&quot;Java学习记录&quot;&gt;&lt;/a&gt;Java学习记录&lt;/h1&gt;&lt;p&gt;用于记录那些零星的不成系统的需要注意的问题&lt;/p&gt;
&lt;h2 id=&quot;next-和nextLi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java输出数据对齐方法</title>
    <link href="http://www.nianchu.space/2020/03/07/Java/Java%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90%E6%96%B9%E6%B3%95/"/>
    <id>http://www.nianchu.space/2020/03/07/Java/Java%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-07T03:56:42.000Z</published>
    <updated>2020-03-07T03:57:41.719Z</updated>
    
    <content type="html"><![CDATA[<p>System.out.printf(“%-10s”,”abc”);      //输出10列，左对齐(-号表示左对齐)<br>System.out.printf(“%8d”,23);          //输出8列， 右对齐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;System.out.printf(“%-10s”,”abc”);      //输出10列，左对齐(-号表示左对齐)&lt;br&gt;System.out.printf(“%8d”,23);          //输出8列， 右对齐&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Magic value</title>
    <link href="http://www.nianchu.space/2020/03/07/Java/Magic-value/"/>
    <id>http://www.nianchu.space/2020/03/07/Java/Magic-value/</id>
    <published>2020-03-07T01:55:44.000Z</published>
    <updated>2020-03-07T02:00:16.519Z</updated>
    
    <content type="html"><![CDATA[<p>今天记录一个编程领域的名词：魔法数值、魔法数字、魔法值。</p><p><strong>在编程领域，上述三个名词都指的是莫名其妙出现的数字。</strong></p><p>解读：</p><p>采用魔法值的代码。数字的意义必须通过详细阅读才能推断出来。使用魔法数值使代码的可读性大大下降。</p><p><strong><em>在Java语言中，对于有名字的值的定义，可以使用static final 或者enum来声明</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天记录一个编程领域的名词：魔法数值、魔法数字、魔法值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在编程领域，上述三个名词都指的是莫名其妙出现的数字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解读：&lt;/p&gt;
&lt;p&gt;采用魔法值的代码。数字的意义必须通过详细阅读才能推断出来。使用魔法数值使代码的
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java之Math.round</title>
    <link href="http://www.nianchu.space/2020/03/06/Java/Java%E4%B9%8BMath-round/"/>
    <id>http://www.nianchu.space/2020/03/06/Java/Java%E4%B9%8BMath-round/</id>
    <published>2020-03-06T11:07:42.000Z</published>
    <updated>2020-03-06T11:08:48.098Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中 Math.round的用法:</p><p>1、参数的小数点后第一位&lt;5，运算结果为参数整数部分。<br>2、参数的小数点后第一位&gt;5，运算结果为参数整数部分绝对值+1，符号（即正负）不变。<br>3、参数的小数点后第一位=5，正数运算结果为整数部分+1，负数运算结果为整数部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 中 Math.round的用法:&lt;/p&gt;
&lt;p&gt;1、参数的小数点后第一位&amp;lt;5，运算结果为参数整数部分。&lt;br&gt;2、参数的小数点后第一位&amp;gt;5，运算结果为参数整数部分绝对值+1，符号（即正负）不变。&lt;br&gt;3、参数的小数点后第一位=5，正数运算结果为整数部
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java常用函数</title>
    <link href="http://www.nianchu.space/2020/03/06/Java/Java%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://www.nianchu.space/2020/03/06/Java/Java%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-06T11:07:42.000Z</published>
    <updated>2020-03-07T03:55:31.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java常用函数"><a href="#Java常用函数" class="headerlink" title="Java常用函数"></a>Java常用函数</h1><h2 id="toRadians"><a href="#toRadians" class="headerlink" title="toRadians"></a>toRadians</h2><p>作用：将以度数为单位的角度转换为以弧度为单位的角度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java常用函数&quot;&gt;&lt;a href=&quot;#Java常用函数&quot; class=&quot;headerlink&quot; title=&quot;Java常用函数&quot;&gt;&lt;/a&gt;Java常用函数&lt;/h1&gt;&lt;h2 id=&quot;toRadians&quot;&gt;&lt;a href=&quot;#toRadians&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Matlab基本运算</title>
    <link href="http://www.nianchu.space/2020/02/26/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/Matlab%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
    <id>http://www.nianchu.space/2020/02/26/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/Matlab%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</id>
    <published>2020-02-26T14:28:17.000Z</published>
    <updated>2020-02-26T16:03:32.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><p>左除</p><p>右除法</p><p>非奇异性矩阵是什么意思</p><h2 id="点运算"><a href="#点运算" class="headerlink" title="点运算"></a>点运算</h2><h1 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h1><p>注意不等于的关系运算符是~=</p><p>成立返回1，不成立返回0</p><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 总结：Matlab的运算都是在矩阵意义下进行的，单个数据的算术运算只是矩阵运算的一种特例</span></span><br><span class="line"><span class="comment">% 加减运算 ：</span></span><br><span class="line"><span class="comment">% 矩阵之间：</span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>] </span><br><span class="line">B = [<span class="number">7</span>:<span class="number">9</span>;<span class="number">100</span>:<span class="number">102</span>]</span><br><span class="line">B - A </span><br><span class="line"><span class="comment">% 矩阵和标量之间</span></span><br><span class="line">c = <span class="number">100</span>;</span><br><span class="line">B - c</span><br><span class="line"></span><br><span class="line"><span class="comment">% 乘法运算就只能在矩阵之间了，而且要求A的列数与B的行数相等，此时称A、B矩阵是可乘的，或称A和B两矩阵维数和大小相容：</span></span><br><span class="line">C = [<span class="number">1</span>:<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>];</span><br><span class="line">D = [<span class="number">11</span>,<span class="number">20</span>;<span class="number">12</span>,<span class="number">21</span>]</span><br><span class="line">D * C <span class="comment">% 特别注意，两矩阵相乘，A*B不等于就是B*A。要想成功计算，一定保证是A的列数与B的行数相等。是不能交换的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 除法运算??在Matlab中，有两种不同的矩阵除法运算，一个是右除，一个是左除</span></span><br><span class="line"><span class="comment">% 书上说如果A矩阵是非奇异方阵，则B/A等效于B*inv(A),A/B等效于inv(A)*B.而这两种不同的计算方法的计算结果是不一样的。</span></span><br><span class="line"><span class="comment">% 但是对于两个标量来说，左除和右除的效果是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 乘方运算：一个矩阵的乘方运算可以表示成A ^x,要求：A为方阵，x为标量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 点运算</span></span><br><span class="line"><span class="comment">% 两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵同型。</span></span><br><span class="line">E = A;</span><br><span class="line">F = A.* E</span><br><span class="line"></span><br><span class="line"><span class="comment">% 关系运算 </span></span><br><span class="line"><span class="comment">% 当两个比较量是标量时，直接比较两个数字的大小，关系成立，表达式的结果为1，否则为0</span></span><br><span class="line"><span class="comment">% 当两个是同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终结果是一个只有1和0的同型矩阵</span></span><br><span class="line"><span class="comment">% 当一个是标量，另一个是矩阵时，则把标量与矩阵中的每一个元素按标量规则进行比较，同样结果是一个只含有0和1的同型矩阵</span></span><br><span class="line">A1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>];</span><br><span class="line">A2 = [<span class="number">0</span>:<span class="number">2</span>;<span class="number">21</span>:<span class="number">23</span>];</span><br><span class="line">A3 = (A1&lt; A2)<span class="comment">% 结果：[0 0 0;1 1 1]</span></span><br><span class="line">A4 = (A2&gt;<span class="number">0</span>) <span class="comment">% 结果：[0 1 1;1 1 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 逻辑运算</span></span><br><span class="line"><span class="comment">% &amp;｜ ～</span></span><br><span class="line"><span class="comment">% &amp; :两个非零才为1</span></span><br><span class="line"><span class="comment">% ｜：一个非零则为1</span></span><br><span class="line"><span class="comment">% 若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，结果是包含0、1的同型矩阵</span></span><br><span class="line"><span class="comment">% 若参与逻辑运算的是一个标量和一个矩阵，则把标量与矩阵中的每一个元素按标量规则进行比较，同样结果是一个只含有0和1的同型矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 实例： 水仙花数</span></span><br><span class="line"></span><br><span class="line">m = [<span class="number">100</span>:<span class="number">999</span>]; <span class="comment">% 生成所有三位正整数</span></span><br><span class="line">m1 = <span class="built_in">rem</span>(m,<span class="number">10</span>); <span class="comment">% 个</span></span><br><span class="line">m2 = <span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>);<span class="comment">% 十 </span></span><br><span class="line">m3 = <span class="built_in">fix</span>(m/<span class="number">100</span>); <span class="comment">% 百</span></span><br><span class="line"><span class="built_in">j</span> = <span class="built_in">find</span>(m == m1.^<span class="number">3</span>+m2.^<span class="number">3</span>+m3.^<span class="number">3</span>);<span class="comment">% 是水仙花数的序号</span></span><br><span class="line"><span class="built_in">i</span> = <span class="built_in">find</span>(~(m == m1.^<span class="number">3</span>+m2.^<span class="number">3</span>+m3.^<span class="number">3</span>)); <span class="comment">% 不是水仙花数的序号</span></span><br><span class="line"><span class="comment">% 然后分别传递给矩阵m</span></span><br><span class="line">result = m(<span class="built_in">j</span>) </span><br><span class="line">result1 = m(<span class="built_in">i</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算术运算&quot;&gt;&lt;a href=&quot;#算术运算&quot; class=&quot;headerlink&quot; title=&quot;算术运算&quot;&gt;&lt;/a&gt;算术运算&lt;/h1&gt;&lt;h2 id=&quot;加法&quot;&gt;&lt;a href=&quot;#加法&quot; class=&quot;headerlink&quot; title=&quot;加法&quot;&gt;&lt;/a&gt;加法&lt;/h
      
    
    </summary>
    
    
    
      <category term="Matlab" scheme="http://www.nianchu.space/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象基础(重难点)</title>
    <link href="http://www.nianchu.space/2020/02/24/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.nianchu.space/2020/02/24/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-24T15:09:27.000Z</published>
    <updated>2020-02-24T15:18:02.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态方法和实例方法的问题："><a href="#静态方法和实例方法的问题：" class="headerlink" title="静态方法和实例方法的问题："></a>静态方法和实例方法的问题：</h1><p>有static修饰的是静态方法，没有static修饰的方法是实例方法。</p><p>静态方法可以访问静态变量和其他静态方法，不可以访问实例方法，实例变量；实例方法可以访问实例变量、其他实例方法、静态变量、静态方法。(记住这一点是很有必要的。)</p><h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><p>如果初始化静态变量不是简单常量，需要进行计算才能初始化，可以使用静态(static)代码块，静态 代码块在类第一次加载时执行，并只执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态代码块的格式如下：</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"静态代码块被调用..."</span>);</span><br><span class="line">  <span class="comment">//还可以再这里初始化静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态方法和实例方法的问题：&quot;&gt;&lt;a href=&quot;#静态方法和实例方法的问题：&quot; class=&quot;headerlink&quot; title=&quot;静态方法和实例方法的问题：&quot;&gt;&lt;/a&gt;静态方法和实例方法的问题：&lt;/h1&gt;&lt;p&gt;有static修饰的是静态方法，没有static修饰
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>可变字符串的插入删除和替换</title>
    <link href="http://www.nianchu.space/2020/02/22/Java/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%BF%E6%8D%A2/"/>
    <id>http://www.nianchu.space/2020/02/22/Java/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%BF%E6%8D%A2/</id>
    <published>2020-02-22T15:34:43.000Z</published>
    <updated>2020-02-22T15:35:27.297Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.22 字符串插入、删除、替换</span></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">StringBuffer str = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">str.insert(<span class="number">11</span>,<span class="string">" very "</span>);</span><br><span class="line">System.out.println(str);<span class="comment">// Today is a very good day!</span></span><br><span class="line"><span class="comment">//删除和替换</span></span><br><span class="line">StringBuffer str1 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">StringBuffer str2 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">StringBuffer str3 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">System.out.println(str1.delete(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">// is a good day!</span></span><br><span class="line">System.out.println(str2.delete(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">// is a good day!</span></span><br><span class="line">System.out.println(str3.replace(<span class="number">0</span>,<span class="number">5</span>,<span class="string">"Tomorrow "</span>));<span class="comment">//Tomorrow  is a good day!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java_可变字符串</title>
    <link href="http://www.nianchu.space/2020/02/22/Java/java-%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://www.nianchu.space/2020/02/22/Java/java-%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-02-21T17:38:39.000Z</published>
    <updated>2020-02-21T17:39:42.937Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.21</span></span><br><span class="line"><span class="comment">// 可变字符串：可变字符串在追加、删除、修改、插入和拼接等操作时不会产生新的对象</span></span><br><span class="line"><span class="comment">// Java中提供了两个可变字符串类型，StringBuffer and StringBuilder，中文翻译为字符串缓冲区</span></span><br><span class="line"><span class="comment">// 理解：字符串长度和字符串缓冲区</span></span><br><span class="line"><span class="comment">// 字符串长度和字符串缓冲区容量区别。字符串长度是指在字符串缓冲区中目前所包含字符 串长度，</span></span><br><span class="line"><span class="comment">// 通过length()获得;字符串缓冲区容量是缓冲区中所能容纳的最大字符数，通过capacity() 获得。</span></span><br><span class="line"><span class="comment">// 当所容纳的字符超过这个长度时，字符串缓冲区自动扩充容量，但这是以牺牲性能为代价 的扩容。</span></span><br><span class="line"><span class="comment">// 字符串长度和字符串缓冲区容量示例代码：</span></span><br><span class="line">StringBuilder nameString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(nameString.length());</span><br><span class="line">System.out.println(nameString.capacity());<span class="comment">//长度为零，而容量为16</span></span><br><span class="line"></span><br><span class="line">StringBuilder nameString1 = <span class="keyword">new</span> StringBuilder(<span class="string">"xiaolei"</span>);</span><br><span class="line">System.out.println(nameString1.length());</span><br><span class="line">System.out.println(nameString1.capacity());<span class="comment">//长度为7，而容量为16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串缓冲区初始容量是16，超过之后会扩容,现在通过一个for循环来证明这个事情</span></span><br><span class="line">StringBuilder teStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">17</span>;i++) &#123;</span><br><span class="line">teStringBuilder.append(<span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">"包含的字符串长度为："</span> + teStringBuilder.length());</span><br><span class="line">System.out.println(<span class="string">"字符串缓冲区容量为："</span> + teStringBuilder.capacity());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由输出结果我们可以看到，最后当字符串长度为17的时候，字符串缓冲区的容量变成了34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串追加——append</span></span><br><span class="line"><span class="comment">// 添加字符串</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(stringBuilder.append(<span class="string">"Hello"</span>).append(<span class="string">" "</span>).append(<span class="string">"World!"</span>));</span><br><span class="line"><span class="comment">// 添加布尔值，转义符和空对象</span></span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Object object = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(stringBuffer.append(<span class="keyword">false</span>).append(<span class="string">"\t"</span>).append(object));</span><br><span class="line"><span class="comment">// 添加数值</span></span><br><span class="line">StringBuffer numBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">numBuffer.append(i);</span><br><span class="line">i++;</span><br><span class="line">System.out.println(numBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment"> * 0</span></span><br><span class="line"><span class="comment">16</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">23</span></span><br><span class="line"><span class="comment">包含的字符串长度为：1</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：2</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：3</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：4</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：5</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：6</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：7</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：8</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：9</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：10</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：11</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：12</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：13</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：14</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：15</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：16</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：17</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：34</span></span><br><span class="line"><span class="comment">Hello World!</span></span><br><span class="line"><span class="comment">falsenull</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">01</span></span><br><span class="line"><span class="comment">012</span></span><br><span class="line"><span class="comment">0123</span></span><br><span class="line"><span class="comment">01234</span></span><br><span class="line"><span class="comment">012345</span></span><br><span class="line"><span class="comment">0123456</span></span><br><span class="line"><span class="comment">01234567</span></span><br><span class="line"><span class="comment">012345678</span></span><br><span class="line"><span class="comment">0123456789</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java字符串比较和截取</title>
    <link href="http://www.nianchu.space/2020/02/20/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%92%8C%E6%88%AA%E5%8F%96/"/>
    <id>http://www.nianchu.space/2020/02/20/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%92%8C%E6%88%AA%E5%8F%96/</id>
    <published>2020-02-20T09:32:47.000Z</published>
    <updated>2020-02-20T09:35:46.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串比较和截取"><a href="#字符串比较和截取" class="headerlink" title="字符串比较和截取"></a>字符串比较和截取</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line">String s11 = <span class="string">"xiaolei"</span>;</span><br><span class="line">String s12 = <span class="string">"zlei"</span>;</span><br><span class="line">String s13 =<span class="string">"Xiaolei"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 比较相等</span></span><br><span class="line"><span class="comment">//1.1 包括大小写</span></span><br><span class="line">System.out.println(s11.equals(s12));<span class="comment">//flase</span></span><br><span class="line">System.out.println(s11.equals(s13));<span class="comment">//flase</span></span><br><span class="line"><span class="comment">//1.2 忽视大小写</span></span><br><span class="line">System.out.println(s11.equalsIgnoreCase(s13));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 比较大小</span></span><br><span class="line"><span class="comment">//2.1 不忽略大小写</span></span><br><span class="line">System.out.println(s11.compareTo(s12));<span class="comment">//20；依次比较两字符串相应位置的ASCII码的大小。如果相同比较下一位，如果不同就返回此位置字符与参照字符的ASCII码的差值。如果完全相同，就返回0</span></span><br><span class="line"><span class="comment">//2.2 忽略大小写</span></span><br><span class="line"><span class="comment">// 使用compareToIgnoreCase起到忽略大小写的作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 比较前缀和后缀</span></span><br><span class="line"><span class="comment">//3.1 比较前缀boolean startsWith();</span></span><br><span class="line">System.out.println(s11.startsWith(<span class="string">"i"</span>));<span class="comment">//flase</span></span><br><span class="line">System.out.println(s11.startsWith(<span class="string">"x"</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2 比较后缀</span></span><br><span class="line">System.out.println(s11.endsWith(<span class="string">"i"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(s11.endsWith(<span class="string">"x"</span>));<span class="comment">//flase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较前后缀小实例</span></span><br><span class="line"><span class="keyword">int</span> docNumbers = <span class="number">0</span>,javaNumbers=<span class="number">0</span>;</span><br><span class="line">String [] docFloder = &#123;<span class="string">"javaTest.doc"</span>,<span class="string">"PythonTest.docx"</span>,<span class="string">"MatlabTest.m"</span>,<span class="string">"javaFinal.ppt"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(String doc: docFloder) &#123;</span><br><span class="line"><span class="keyword">if</span> (doc.endsWith(<span class="string">".doc"</span>)) &#123;</span><br><span class="line">docNumbers++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String doc: docFloder) &#123;</span><br><span class="line"><span class="keyword">if</span>(doc.startsWith(<span class="string">"java"</span>)) &#123;</span><br><span class="line">javaNumbers++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"doc文档个数为 "</span>+docNumbers);</span><br><span class="line">System.out.println(<span class="string">"java相关文档格个数为 "</span>+javaNumbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 知识补充：trim() tool and toLowerCase() tool</span></span><br><span class="line"><span class="comment">// trim() 去掉字符串前后空白</span></span><br><span class="line"><span class="comment">// toLowerCase() 将字符串全部转化为小写</span></span><br><span class="line">System.out.println(<span class="string">"ABCDEFG"</span>.toLowerCase());</span><br><span class="line">System.out.println(<span class="string">"   abcdefg   "</span>);</span><br><span class="line">System.out.println(<span class="string">"  abcdefg  "</span>.trim().toUpperCase());<span class="comment">//去除字符串空白以后再将字符串全部转化为大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">-2</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">doc文档个数为 1</span></span><br><span class="line"><span class="comment">java相关文档格个数为 2</span></span><br><span class="line"><span class="comment">abcdefg</span></span><br><span class="line"><span class="comment">  abcdefg   </span></span><br><span class="line"><span class="comment">ABCDEFG </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串截取</span></span><br><span class="line"><span class="comment">// 1 String substring(int beginIndex) //唯一参数为指定开始索引，这一方法会截取从开始索引到字符串末尾的子字符串</span></span><br><span class="line"><span class="comment">// 2 String substring(int beginIndex, int endIndex) //包含两个参数，开始索引和结束索引，需要注意的是所截取的字符串包括开始索引处的字符，但是不包括结束索引处的字符</span></span><br><span class="line"><span class="comment">//coding：</span></span><br><span class="line">String s_jiequString = <span class="string">"ABCDEFGHIGKLMNOPQRST"</span>;</span><br><span class="line">System.out.println(s_jiequString.substring(<span class="number">4</span>));</span><br><span class="line">System.out.println(s_jiequString.substring(<span class="number">4</span>, <span class="number">9</span>));</span><br><span class="line"><span class="comment">/*Output: </span></span><br><span class="line"><span class="comment"> * EFGHIGKLMNOPQRST</span></span><br><span class="line"><span class="comment"> * EFGHI</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 知识补充 ：使用split方法分割字符串</span></span><br><span class="line"><span class="comment">//split ：参数是字符串，返回值是String[]</span></span><br><span class="line">String s_fengeString = <span class="string">"abdabcdbafaga"</span>;</span><br><span class="line">String[] s_fenge_results= s_fengeString.split(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s_fenge_result:s_fenge_results) &#123;</span><br><span class="line">System.out.println(s_fenge_result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment">bd</span></span><br><span class="line"><span class="comment">bcdb</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">g</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串比较和截取&quot;&gt;&lt;a href=&quot;#字符串比较和截取&quot; class=&quot;headerlink&quot; title=&quot;字符串比较和截取&quot;&gt;&lt;/a&gt;字符串比较和截取&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Matlab从入门到精通》</title>
    <link href="http://www.nianchu.space/2020/02/19/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E3%80%8AMatlab%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B/"/>
    <id>http://www.nianchu.space/2020/02/19/Matlab-%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/%E3%80%8AMatlab%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B/</id>
    <published>2020-02-19T14:14:54.000Z</published>
    <updated>2020-02-21T15:37:24.712Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 双精度(double)：8字节；单精度(single)：4字节</span></span><br><span class="line"><span class="comment">% 复数还可以使用函数来产生复数??complex;complex接收两个参数，前一个是实部，后一个是虚数;前一个参数可以为零，但是后面的参数不行</span></span><br><span class="line"><span class="comment">% inf和-inf来表示正无穷大和负无穷大；除法运算中除数为0或者运算结果溢出都会导致inf或者-inf的结果。</span></span><br><span class="line">x=<span class="built_in">exp</span>(<span class="number">1000000</span>)</span><br><span class="line">x=<span class="built_in">log</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 上述两行代码的输出结果分别为：Inf,-Inf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% NaN用来表示一个既不是实数也不是复数的数值。NAN是Not A Number的缩写。类似0/0,inf/inf这样的表达式得到的结果均为NAN</span></span><br><span class="line"><span class="built_in">inf</span>/-<span class="built_in">inf</span></span><br><span class="line"><span class="built_in">nan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 逻辑类型</span></span><br><span class="line"><span class="comment">% 逻辑类型用1和0来表示。</span></span><br><span class="line"><span class="comment">% 函数logical()来得到逻辑类型的数值。它可以把任何非零的数值转换为逻辑true(1)，反过来也可以</span></span><br><span class="line">x = logical(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">% x = logical 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 字符和字符串</span></span><br><span class="line"><span class="comment">% Matlab中规定用char数据类型来表示一个字符串。一个char类型的1*n的数组则可以称为字符串String。Matlab中char类型都是以2字节的unicode字符来存储的</span></span><br><span class="line"><span class="comment">% 可以使用一对单引号来表示字符串：</span></span><br><span class="line">str = <span class="string">"I love china!"</span></span><br><span class="line"><span class="comment">% 也可以使用char函数来构造字符串，下面的代码将得到字符串'AB'</span></span><br><span class="line">str=char([<span class="number">65</span> <span class="number">66</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">% 函数句柄</span></span><br><span class="line"><span class="comment">% 是用来提供间接调用函数的数据类型。函数句柄可以转递给其他函数以便该函数所代表的函数就可以被调用。函数句柄还可以储存起来，以便以后利用。</span></span><br><span class="line"><span class="comment">% 函数句柄可以用符号@后面跟着函数名来表示。下面的函数句柄使得自定义变量可以用来代替tan函数的功能</span></span><br><span class="line">f=@<span class="built_in">tan</span></span><br><span class="line">jieguo=f(<span class="built_in">pi</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 结构体类型</span></span><br><span class="line"><span class="comment">% 结构体是根据属性名组织起来的不同类型数据的集合。</span></span><br><span class="line"><span class="comment">% 有一种容易与结构体类型混淆的数据类型是单元数组类型。它们之间既有相同点，也有不同点：“单元数组类型，它是一种特殊类型的MATLAB 7.0数组，</span></span><br><span class="line"><span class="comment">% 它的每一个元素叫做单元，而每一个单元包含MATLAB 7.0数组。结构体和单元数组的共同之处在于它们都提供了一种分级存储机制来存储不同类型的数据，</span></span><br><span class="line"><span class="comment">% 不同之处是组织数据的方式不一样。结构体数组里的数据是通过属性名来引用的，而在单元数组里，数据是通过单元数组下标引用来操作的。”</span></span><br><span class="line"><span class="comment">% 结构体数组是由数据容器组成的数组，这种数组容器称为结构体的属性。结构体的任何一个属性可以包含任何一种类型的数据。</span></span><br><span class="line"><span class="comment">% 和其他数据类型一样，结构体也是一个数组，一个单独的结构体就是一个1*1结构体数组。</span></span><br><span class="line"><span class="comment">% 可以构造任何维数和形状的结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 结构体构造</span></span><br><span class="line"><span class="comment">% 1 利用赋值语句</span></span><br><span class="line">Student(<span class="number">1</span>).Name=<span class="string">'xiaoming'</span>;</span><br><span class="line">Student(<span class="number">1</span>).Score=<span class="number">100</span>;</span><br><span class="line">Student(<span class="number">1</span>).fees=[<span class="number">6500</span>,<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 在上面的基础上把结构体数组扩展成1*2的结构体</span></span><br><span class="line"></span><br><span class="line">Student(<span class="number">2</span>).Name=<span class="string">'xiaolei'</span>;</span><br><span class="line">Student(<span class="number">2</span>).Score=<span class="number">100</span>;</span><br><span class="line">Student(<span class="number">2</span>).fees=[<span class="number">6500</span>,<span class="number">10000</span>];</span><br><span class="line">Student(<span class="number">1</span>) <span class="comment">%多维结构数组输出时要用括号加上标量</span></span><br><span class="line">Student(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2 利用函数struct()来定义</span></span><br><span class="line"><span class="comment">% (1)单独使用struct函数</span></span><br><span class="line">Student(<span class="number">3</span>)=struct(<span class="string">'Name'</span>,<span class="string">'xiaohong'</span>,<span class="string">'Score'</span>,<span class="number">99</span>,<span class="string">'fees'</span>,[]);</span><br><span class="line">Student(<span class="number">3</span>)</span><br><span class="line"><span class="comment">% struct函数和repmat函数配合使用</span></span><br><span class="line"><span class="comment">% struct函数的输入为单元数组(后两种没有搞懂暂时)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 访问结构体数组的数据</span></span><br><span class="line">Personel=struct(<span class="string">'Name'</span>,&#123;<span class="string">'xiaolei'</span>,<span class="string">'dalei'</span>,<span class="string">'zhonglei'</span>&#125;,<span class="string">'Score'</span>,&#123;[<span class="number">100</span>,<span class="number">8</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">60</span>,<span class="number">90</span>],[<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>]&#125;);</span><br><span class="line">New=Personel(<span class="number">1</span>:<span class="number">2</span>)<span class="comment">% 生成新的结构体</span></span><br><span class="line">News=New(<span class="number">1</span>)<span class="comment">% 访问新结构体的第一维数据</span></span><br><span class="line">New(<span class="number">2</span>).Name<span class="comment">% 访问第一维数据的Name值</span></span><br><span class="line">Personel(<span class="number">3</span>).Score(<span class="number">2</span>)<span class="comment">% 访问第三个人的Score中的第三个值</span></span><br><span class="line">Personel.Name <span class="comment">% 用于访问结构体数组中所有元素的某个属性</span></span><br><span class="line"><span class="comment">% 使用矩阵合并符来合并上面输出的结果</span></span><br><span class="line">Personel_hebing=[Personel.Name]<span class="comment">% 'xiaoleidaleizhonglei'</span></span><br><span class="line"><span class="comment">% 也可以把它们合并在一个单元数组中</span></span><br><span class="line">Personel=&#123;Personel.Name&#125; <span class="comment">%     &#123;'xiaolei'&#125;    &#123;'dalei'&#125;    &#123;'zhonglei'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组类型</span></span><br><span class="line"><span class="comment">% 1 单元数组的构造</span></span><br><span class="line"><span class="comment">% (1)左标志法</span></span><br><span class="line">c&#123;<span class="number">1</span>,<span class="number">1</span>&#125;=<span class="string">'nianchu'</span>;</span><br><span class="line">c&#123;<span class="number">1</span>,<span class="number">2</span>&#125;=<span class="built_in">eye</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">c&#123;<span class="number">2</span>,<span class="number">1</span>&#125;=@<span class="built_in">sec</span>;</span><br><span class="line">c&#123;<span class="number">2</span>,<span class="number">2</span>&#125;=<span class="built_in">false</span>;</span><br><span class="line">c&#123;<span class="number">3</span>,<span class="number">1</span>&#125;=<span class="built_in">true</span>;</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2.21</span></span><br><span class="line"><span class="comment">% (2)右标志法</span></span><br><span class="line"><span class="comment">% 右标志法和左标志法类似，只是将左边的标志符&#123;&#125;用括号代替，而在右边添加标志符即可</span></span><br><span class="line"><span class="comment">% 代码实现：</span></span><br><span class="line">a(<span class="number">1</span>,<span class="number">1</span>)=&#123;<span class="string">"xiaochu"</span>&#125;;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=&#123;<span class="built_in">eye</span>(<span class="number">4</span>,<span class="number">4</span>)&#125;;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">1</span>)=&#123;@<span class="built_in">tan</span>&#125;;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">2</span>)=&#123;[]&#125;;</span><br><span class="line"><span class="comment">% 或者下面这样：</span></span><br><span class="line">b=&#123;<span class="string">"chuntian"</span>,[<span class="number">341</span>,<span class="number">434</span>];<span class="string">'dream'</span>,<span class="string">'weiling'</span>&#125;;</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 知识补充：eye（）函数的用法——返回单位矩阵：当eye(m,n)中m和n参数不相等时，单位矩阵会出现全0行或列</span></span><br><span class="line"><span class="comment">% 1 返回N*N的单位矩阵</span></span><br><span class="line"><span class="comment">% 2 返回M*N的单位矩阵</span></span><br><span class="line"><span class="comment">% 3 返回和给定矩阵一样大小的单位矩阵</span></span><br><span class="line"><span class="comment">% 4 无参数时返回标量1</span></span><br><span class="line"><span class="comment">% 代码实现：</span></span><br><span class="line">a1=<span class="built_in">eye</span>(<span class="number">3</span>)</span><br><span class="line">a2=<span class="built_in">eye</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a3=<span class="built_in">eye</span>([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a4=<span class="built_in">eye</span>(<span class="built_in">size</span>(b))</span><br><span class="line">a4=<span class="built_in">eye</span>()</span><br><span class="line"><span class="comment">% 补充：～eye(m,n)为eye(m,n)中1，0完全对换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 显示单元数组的方法：</span></span><br><span class="line"><span class="comment">% 1 直接用数组的名字</span></span><br><span class="line"><span class="comment">% 2 使用函数celldisp()——使用此函数会隔行依次输出数组中的元素</span></span><br><span class="line"><span class="comment">% 法2代码实现</span></span><br><span class="line">celldisp(a)</span><br><span class="line"><span class="comment">% 说明：celldisp函数的显示格式与直接输入单元组名的显示格式是不同的。celldisp函数更适用于具有大量数据的单元数组的显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组的读取</span></span><br><span class="line"><span class="comment">% 1 读取全面c数组中&#123;1,1&#125;处的字符串：</span></span><br><span class="line">Str=c&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">% 2 读取单元数组中若干个单元的数据，例如读取第二行的数据：</span></span><br><span class="line">c(<span class="number">2</span>,:)</span><br><span class="line"><span class="comment">% 读取单元数组的第一列</span></span><br><span class="line">c(:,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组的删除</span></span><br><span class="line"><span class="comment">% 将空矩阵赋给单元数组的某一行或者某一列是可以删除这一行或者这一列</span></span><br><span class="line"><span class="comment">% 删掉c单元数组中第二列的值</span></span><br><span class="line">c(:,<span class="number">2</span>)=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵的基本操作</span></span><br><span class="line"><span class="comment">% Matlab是基于矩阵运算的一个软件，所有数据均以二维矩阵或高维数组的形式存储，Matlab又称为矩阵实验室</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 名词介绍：</span></span><br><span class="line"><span class="comment">% 标量：1*1的矩阵</span></span><br><span class="line"><span class="comment">% 向量： 1*n的矩阵</span></span><br><span class="line"><span class="comment">% 空矩阵： 至少有一堆的长度为0的矩阵称为空矩阵，用[]表示</span></span><br><span class="line">Number=<span class="number">1.5</span>;</span><br><span class="line">whos Number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵的构造</span></span><br><span class="line"><span class="comment">% 1 简单矩阵构造(略)</span></span><br><span class="line"><span class="comment">% 2 特殊矩阵构造：</span></span><br><span class="line"><span class="comment">% 举例：</span></span><br><span class="line"><span class="comment">% ones——产生矩阵元素全为1的矩阵</span></span><br><span class="line"><span class="comment">% zeros——产生矩阵元素全为0的矩阵</span></span><br><span class="line"><span class="comment">% eye——上面已经介绍过了</span></span><br><span class="line"><span class="built_in">ones</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">ones</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">zeros</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">% diag 把向量转化为对角矩阵或者得到矩阵的对角元素</span></span><br><span class="line"><span class="comment">% magic 产生魔方矩阵，即每行、每列之和相等的矩阵</span></span><br><span class="line"><span class="comment">% rand 产生0-1均匀分布的随机数（此函数是以机器时间作为随机种子的，因而每次运行得到的结果都是不同的 ）</span></span><br><span class="line"><span class="comment">% randn 产生均值为0，方差为1高斯分布的随机数</span></span><br><span class="line"><span class="comment">% randperm 产生整数1-n的随机排列</span></span><br><span class="line"><span class="comment">% compan 长生多项式的伴随矩阵</span></span><br><span class="line"><span class="comment">% Diga之对角矩阵和对角元素</span></span><br><span class="line"><span class="comment">% 形成对角矩阵</span></span><br><span class="line">Strs=<span class="string">'I will be a successful man'</span></span><br><span class="line">Value=[<span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">2</span>]</span><br><span class="line">X=<span class="built_in">diag</span>(Strs,<span class="number">-1</span>)</span><br><span class="line">X=<span class="built_in">diag</span>(Value,<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 获得对角元素</span></span><br><span class="line">Values=<span class="built_in">diag</span>(X,<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 注意：当k=0时，v为X的主对角线；当k&gt;0时，v为上方第k条对角线；当k&lt;0时，v为下方第k条对角线。</span></span><br><span class="line"><span class="comment">% 如果k的值缺失，则默认为主对角</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
      <category term="Matlab" scheme="http://www.nianchu.space/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>字符串查找</title>
    <link href="http://www.nianchu.space/2020/02/19/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/"/>
    <id>http://www.nianchu.space/2020/02/19/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</id>
    <published>2020-02-18T16:58:05.000Z</published>
    <updated>2020-02-18T17:19:33.402Z</updated>
    
    <content type="html"><![CDATA[<p>在String类中提供了indexOf和lastIndexOf方法用于查找字符或字符串，返回值是查找的字符串所在的位置，-1表示没有找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String的Char At(int index)方法可以返回索引index所在位置的字符</span><br></pre></td></tr></table></figure><p><strong><em>实例代码</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String sourceString = <span class="string">"There is a string accessing exemple"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得字符串长度</span></span><br><span class="line"><span class="keyword">int</span> len = sourceString.length();</span><br><span class="line"><span class="comment">//获得索引位置16的字符串</span></span><br><span class="line"><span class="keyword">char</span> ch = sourceString.charAt(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符和子字符串</span></span><br><span class="line"><span class="keyword">int</span> firstChar1 = sourceString.indexOf(<span class="string">'r'</span>);<span class="comment">//从前往后搜索字符</span></span><br><span class="line"><span class="keyword">int</span> lastChar1 = sourceString.lastIndexOf(<span class="string">'r'</span>);<span class="comment">//从后往前搜索字符</span></span><br><span class="line"><span class="keyword">int</span> firststr1 = sourceString.indexOf(<span class="string">"ing"</span>);<span class="comment">//从前往后搜索字符串</span></span><br><span class="line"><span class="keyword">int</span> laststr1 = sourceString.lastIndexOf(<span class="string">"ing"</span>);<span class="comment">//从后往前搜索字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> firstchar2 = sourceString.indexOf(<span class="string">'e'</span>, <span class="number">15</span>);<span class="comment">//从索引为15的位置开始</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 也就是说：indexOf和lastIndexOf都还可以接收一个开始的索引</span></span><br><span class="line"><span class="comment"> * 需要注意的是：如果没有找到，是不能够从头直接跳到尾巴去接着找，</span></span><br><span class="line"><span class="comment"> * 也不能从尾巴跳到头部去继续找，这种情况下，就只能算作找不到，</span></span><br><span class="line"><span class="comment"> * 返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在String类中提供了indexOf和lastIndexOf方法用于查找字符或字符串，返回值是查找的字符串所在的位置，-1表示没有找到。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
</feed>
