<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nianchu-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nianchu.space/"/>
  <updated>2020-08-24T12:41:10.545Z</updated>
  <id>http://www.nianchu.space/</id>
  
  <author>
    <name>nianchu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>introduce</title>
    <link href="http://www.nianchu.space/2020/08/24/introduce/"/>
    <id>http://www.nianchu.space/2020/08/24/introduce/</id>
    <published>2020-08-24T12:39:15.106Z</published>
    <updated>2020-08-24T12:41:10.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bowenkei"><a href="#Bowenkei" class="headerlink" title="Bowenkei"></a>Bowenkei</h1><blockquote><p>很高兴认识大家，我是Bowenkei</p></blockquote><ul><li><a href="https://nianchu.space/" target="_blank" rel="noopener"><strong>个人网站</strong></a></li><li><a href="https://github.com/nianchu99/" target="_blank" rel="noopener"><strong>GitHub</strong></a></li><li><a href="https://www.zhihu.com/people/nian-chu-37-92" target="_blank" rel="noopener"><strong>知乎</strong></a></li></ul><hr><p>欢迎关注我的公众号“<strong>奇奇怪怪小技巧</strong>”</p><center>    <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi10hetb7uj306e06gdgp.jpg" style="width: 100px;"></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bowenkei&quot;&gt;&lt;a href=&quot;#Bowenkei&quot; class=&quot;headerlink&quot; title=&quot;Bowenkei&quot;&gt;&lt;/a&gt;Bowenkei&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;很高兴认识大家，我是Bowenkei&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>XPath/xpath</title>
    <link href="http://www.nianchu.space/2020/08/14/XPath/xpath/"/>
    <id>http://www.nianchu.space/2020/08/14/XPath/xpath/</id>
    <published>2020-08-14T15:03:26.293Z</published>
    <updated>2020-08-14T15:34:33.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h1><p>节点</p><p>基本值：无父或无子的节点</p><p>项目： 基本值或者节点</p><p>节点关系：</p><ul><li>父</li><li>子</li><li>同胞： 拥有相同父节点的节点</li><li>先辈： 某节点的父、父的父</li><li>后代： </li></ul><h1 id="Xpath语法"><a href="#Xpath语法" class="headerlink" title="Xpath语法"></a>Xpath语法</h1><p>路径表达式： </p><ul><li>Nodename: 选取此节点的所有子节点</li><li>/：从根节点选取</li><li>//： 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</li><li>.：选取当前节点</li><li>..： 选取当前节点的父节点</li><li>@： 选取属性</li></ul><p><strong>谓语</strong>：</p><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点</p><p>谓语被嵌在方括号中</p><p><strong>选取未知节点：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*: 匹配任何元素节点</span><br><span class="line">@*：匹配任何属性节点</span><br><span class="line">node():匹配任何类型的节点</span><br></pre></td></tr></table></figure><p><strong>选取若干路径</strong>：</p><p>使用｜分割若干路径</p><h1 id="Xpath轴-Axes"><a href="#Xpath轴-Axes" class="headerlink" title="Xpath轴(Axes)"></a>Xpath轴(Axes)</h1><p>轴可定义相对于当前节点的节点集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ancestor: </span><br><span class="line">ancestor-or-self:</span><br><span class="line">attribute:</span><br><span class="line">child:</span><br><span class="line">descendant: 选取当前节点的所有后代节点</span><br><span class="line">descendant-or-self:</span><br><span class="line">following: 选取问文档中当前节点的结束标签之后的所有节点</span><br><span class="line">following-sibling: 选取当前节点之后的所有兄弟节点</span><br><span class="line">namespace: 选取当前节点的所有命名空间节点</span><br><span class="line">parent:</span><br><span class="line">preceding: 选取文档中当前节点的开始标签之前的所有节点</span><br><span class="line">preceding-sibling: 选取当前节点之前的所有同级节点</span><br><span class="line">self:</span><br></pre></td></tr></table></figure><h1 id="Xpath运算符"><a href="#Xpath运算符" class="headerlink" title="Xpath运算符"></a>Xpath运算符</h1><p>xpath表达式可返回节点集、字符串、逻辑值以及数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div: 除法</span><br><span class="line">mod: 计算除法的余数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XPath节点&quot;&gt;&lt;a href=&quot;#XPath节点&quot; class=&quot;headerlink&quot; title=&quot;XPath节点&quot;&gt;&lt;/a&gt;XPath节点&lt;/h1&gt;&lt;p&gt;节点&lt;/p&gt;
&lt;p&gt;基本值：无父或无子的节点&lt;/p&gt;
&lt;p&gt;项目： 基本值或者节点&lt;/p&gt;
&lt;p&gt;节
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库/MySQL必知必会</title>
    <link href="http://www.nianchu.space/2020/08/11/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>http://www.nianchu.space/2020/08/11/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</id>
    <published>2020-08-11T02:29:39.110Z</published>
    <updated>2020-08-12T03:56:56.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-1-什么是数据库-database"><a href="#1-1-1-什么是数据库-database" class="headerlink" title="1.1.1 什么是数据库(database)"></a>1.1.1 什么是数据库(database)</h3><p>数据库(database)是一个以某种有组织的方式存储的数据集合</p><h3 id="1-1-2-表-table"><a href="#1-1-2-表-table" class="headerlink" title="1.1.2 表(table)"></a>1.1.2 表(table)</h3><p>将资料放入文件柜，不是随意地扔进某个抽屉就完事，而是在文件柜中创建文件，然后将相关的资料放入特定的文件中。</p><p>这个文件就是表。</p><p>表是一种结构化的文件，可用来存储某种特定类型的数据。</p><p>存储在表中的数据是一种类型的数据或一个清单。绝不应该将顾客的清单与订单的清单存储在同一个数据库表中。</p><p>相同数据库中每一个表都有自己独一无二的名字。</p><p>表有自己的模式(这个模式是一组信息，定义了数据在表中如何存储，如可以存储什么样的数据，数据如何分解，各部分信息如何命名等等)</p><p>模式可以用来描述数据库中特定的表以及整个数据库(和其中表的关系)</p><h3 id="1-1-3-列-column-和数据类型-datatype"><a href="#1-1-3-列-column-和数据类型-datatype" class="headerlink" title="1.1.3 列(column)和数据类型(datatype)"></a>1.1.3 列(column)和数据类型(datatype)</h3><p>表由列组成</p><p>列(column): 表中的字段。所有的表都是由一个或多个列组成的。</p><p>将数据库理解为一个网格，网格中的每一列存储同类型的信息。</p><p>正确分解数据是找到某个特定信息的前提。</p><p>数据库中每个列都有相应的数据类型。数据类型定义列可以存储的数据种类。</p><h3 id="1-1-4-行-row-——-表中的一个记录"><a href="#1-1-4-行-row-——-表中的一个记录" class="headerlink" title="1.1.4 行(row)—— 表中的一个记录"></a>1.1.4 行(row)—— 表中的一个记录</h3><p>表中的数据都是按行存储的。</p><p>行(row)和数据记录(record)在很大程度上，是可以相互替代的，但从技术上来说，行才是正确的术语</p><h3 id="1-1-5-主键-primary-key-一列-或一组列-，其值能够唯一区分表中的每个行"><a href="#1-1-5-主键-primary-key-一列-或一组列-，其值能够唯一区分表中的每个行" class="headerlink" title="1.1.5 主键(primary key) - 一列(或一组列)，其值能够唯一区分表中的每个行"></a>1.1.5 主键(primary key) - 一列(或一组列)，其值能够唯一区分表中的每个行</h3><p>唯一标识表中每行的这个列(或这组列)称为主键。逐渐用来表示一个特定的行。</p><p><strong>应该总是定义主键</strong></p><p>表中的任何列都可以作为主键，只要它满足以下条件：</p><ul><li>任意两行都不具有相同的主键值</li><li>每个行都必须具有一个主键值(主键列不允许NULL值)</li></ul><p>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。使用多个列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的(但单个列的值可以不唯一)</p><p><strong>主键的最好习惯</strong>：</p><ul><li>不更新主键列中的值</li><li>不重用主键列的值</li><li>不在主键列中使用可能会更改的值</li></ul><h2 id="1-2-什么是SQL"><a href="#1-2-什么是SQL" class="headerlink" title="1.2 什么是SQL"></a>1.2 什么是SQL</h2><p>是一种专为用来与数据库通信的语言</p><p>设计SQL的目的是很好地完成一项任务，即提供一种从数据库中读写数据的简单有效的方法</p><p>SQL的优点：</p><ul><li>SQL不是某个特定数据库供应商专有的语言。</li><li>简单易学。</li><li>SQL看上去很简单，但是它其实是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul><h1 id="第2章"><a href="#第2章" class="headerlink" title="第2章"></a>第2章</h1><h2 id="2-1-什么是MySQL"><a href="#2-1-什么是MySQL" class="headerlink" title="2.1 什么是MySQL"></a>2.1 什么是MySQL</h2><h3 id="2-1-1-客户机-服务器软件"><a href="#2-1-1-客户机-服务器软件" class="headerlink" title="2.1.1 客户机-服务器软件"></a>2.1.1 客户机-服务器软件</h3><p>与数据文件打交道的只有服务器软件。关于数据、数据添加、删除和数据更新的所有请求都由服务器软件完成。这些请求或更改来自运行客户机软件的计算机。</p><p>为进行所有数据库交互，客户机软件都要与服务器软件进行通信。</p><h3 id="2-2-1-mysql命令行实用程序"><a href="#2-2-1-mysql命令行实用程序" class="headerlink" title="2.2.1 mysql命令行实用程序"></a>2.2.1 mysql命令行实用程序</h3><ul><li>命令输入在mysql&gt;之后</li><li>命令；或\g结束。近按Enter不执行命令</li><li>输入help或\h获得帮助</li><li>输入quit或者exit退出命令行实用程序</li></ul><h2 id="3-2-选择数据库"><a href="#3-2-选择数据库" class="headerlink" title="3.2 选择数据库"></a>3.2 选择数据库</h2><p>执行任意数据库操作前，需要选择一个数据库。为此，可以使用USE关键字(key word)</p><h1 id="第4章：-检索数据"><a href="#第4章：-检索数据" class="headerlink" title="第4章： 检索数据"></a>第4章： 检索数据</h1><p>使用SELECT语句从表中检索一个或多个数据列</p><h2 id="4-1-SELECT语句"><a href="#4-1-SELECT语句" class="headerlink" title="4.1 SELECT语句"></a>4.1 SELECT语句</h2><p>最经常使用的关键字就是SELECT语句了。它的用途是从一个或多个表中检索信息</p><p>使用SELECT检索表数据，必须至少给出两条信息——想选择什么，以及从什么地方选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COLUMNNAME</span><br><span class="line">FROM TABLENAME;</span><br></pre></td></tr></table></figure><p>*<em>未排序数据： *</em></p><p>没有明确排序查询结果，则返回的数据的顺序没有特殊意义。</p><p><strong>不区分大小写</strong>：</p><p>SQL语句不区分大小写。许多SQL开发人员喜欢对所有的SQL关键字使用大写，而对所有列和表名使用小写。</p><p><strong>忽略空格</strong>：在处理SQL语句时，其中的所有空格都被忽略。</p><h2 id="4-3-检索多个列"><a href="#4-3-检索多个列" class="headerlink" title="4.3 检索多个列"></a>4.3 检索多个列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_id, prod_name,  prod_price </span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure><p><strong>数据表示：</strong></p><p>SQL语句一般返回原始的、无格式的数据。数据的格式化是一个显示问题，而不是一个检索问题。</p><h2 id="4-4-检索所有列"><a href="#4-4-检索所有列" class="headerlink" title="4.4 检索所有列"></a>4.4 检索所有列</h2><p>使用通配符实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure><p><strong>使用通配符警示：</strong></p><p>除非确实需要表中的每个列，否则最好别使用*通配符。因为检索不需要的列通常或降低检索和应用程序的性能。</p><p>*<em>通配符优点： *</em></p><p>可以检索出未知列</p><h2 id="4-5-检索不同的行"><a href="#4-5-检索不同的行" class="headerlink" title="4.5 检索不同的行"></a>4.5 检索不同的行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT vend_id</span><br><span class="line">FROM products;</span><br></pre></td></tr></table></figure><p>其中DISTINCT是不同的意思，注意它必须放在列名的前面</p><p><strong>不能部分使用DISTINCT:</strong></p><p>DISTINCT关键字应用于所有列而不仅是前置它的列</p><p>(也就是说，如果检索的不仅仅是一个列，而是两个列，那么对于两个行来说，属于两个列中任何一列的数据不同，那么这两个行就算是不同的。)</p><h2 id="4-6-限制结果"><a href="#4-6-限制结果" class="headerlink" title="4.6 限制结果"></a>4.6 限制结果</h2><p>SELECT 语句返回所有匹配的行。为了返回第一行或前几行，可以使用LIMIT。</p><p>返回第一个5行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">LIMIT 5;</span><br></pre></td></tr></table></figure><p>返回下一个5行：(前一个是开始的位置，后一个是要检索的行数):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name</span><br><span class="line">FROM products</span><br><span class="line">LIMIT 5, 5;</span><br></pre></td></tr></table></figure><p><strong>行0:</strong></p><p>检索出来额第一行为0而不是1</p><p><strong>在行数不够时：</strong></p><p>LIMIT中指定要检索的行数为检索的最大行数。如果没有足够的行(例如，给出LIMIT 10,5 但只有 13行)，MySQL将只返回它能返回的那么多行</p><p><strong>LIMIT  4 OFFSET 3<em>==</em></strong>LIMIT 3 ,4**</p><h2 id="4-7-使用完全限定的表名"><a href="#4-7-使用完全限定的表名" class="headerlink" title="4.7 使用完全限定的表名"></a>4.7 使用完全限定的表名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT tablename.columnname</span><br><span class="line">FROM databasename.tablename;</span><br></pre></td></tr></table></figure><p>第5章 —— 排序检索数据</p><p>使用SELECT语句的ORDER BY子句，根据需要排序检索出的数据。</p><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><ul><li>SHOW DATABASES; - 返回可用数据库的一个列表。</li><li>SHOW TABlES； - 返回当前选择的数据库内的可用表的列表。</li><li>SHOW COLUMN FROM 表名： 要求给出一个表名，它对每个字段返回一行，行中包含字段名、数据类型、是否允许NULL、键类型、默认值以及其他信息</li><li>DISsCRIBE 表名——是SHOW COLUMNS FROM 表名的快捷键</li><li>SHOW STATUS:用于显示广泛的服务器状态信息</li><li>SHOW CREATE DATABASE和SHOW CREATE TABLE:分别用来显示创建特定数据库或表的MySQL语句。</li><li>SHOW GRANTS：用来显示授权用户(所有用户或特定用户)的安全权限；</li><li>SHOW ERRORS 和SHOW WARNINGS：用来显示服务器错误或警告信息。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-1-什么是数据库-database&quot;&gt;&lt;a href=&quot;#1-1-1-什么是数据库-database&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 什么是数据库(database)&quot;&gt;&lt;/a&gt;1.1.1 什么是数据库(database)
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Matlab/数学建模与Matlab</title>
    <link href="http://www.nianchu.space/2020/08/07/Matlab/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8EMatlab/"/>
    <id>http://www.nianchu.space/2020/08/07/Matlab/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E4%B8%8EMatlab/</id>
    <published>2020-08-07T00:50:46.206Z</published>
    <updated>2020-08-07T08:02:18.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学建模与Matlab"><a href="#数学建模与Matlab" class="headerlink" title="数学建模与Matlab"></a>数学建模与Matlab</h1><p>数学建模是一个跨学科的竞赛，关乎生产生活中的实践问题</p><h2 id="多项式拟合"><a href="#多项式拟合" class="headerlink" title="多项式拟合"></a>多项式拟合</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line"><span class="comment">%准备数据</span></span><br><span class="line">x=<span class="number">0</span>:<span class="number">0.2</span>:<span class="number">10</span>;</span><br><span class="line">y=<span class="number">0.25</span>*x+<span class="number">20</span>*<span class="built_in">sin</span>(x);</span><br><span class="line"><span class="comment">% 5阶多项式拟合</span></span><br><span class="line">p5=polyfit(x,y,<span class="number">5</span>);</span><br><span class="line">y5=polyval(p5,x);</span><br><span class="line"><span class="comment">% 8阶多项式拟合</span></span><br><span class="line">p8=polyfit(x,y,<span class="number">8</span>);</span><br><span class="line">y8=polyval(p8,x);</span><br><span class="line"><span class="comment">% 60阶多项式拟合</span></span><br><span class="line">p60=polyfit(x,y,<span class="number">60</span>);</span><br><span class="line">y60=polyval(p60,x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'ro'</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x,y5,<span class="string">'b--'</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y8,<span class="string">'b:'</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y60,<span class="string">'r-.'</span>);</span><br><span class="line">xlabel(<span class="string">'x'</span>);</span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'原始数据'</span>,<span class="string">'5阶多项式'</span>,<span class="string">'8阶多项式'</span>,<span class="string">'60阶多项式'</span>);</span><br><span class="line"><span class="comment">% 小结： </span></span><br><span class="line"><span class="comment">% 使用pn=polyfit(x,y,n)获取拟合系数，其中x是原始x值，y是由原始x值计算出来的元素函数y值，其中n是你想进行的多项式拟合阶数</span></span><br><span class="line"><span class="comment">% 使用yn=polyval(p,x)可以获得拟合后的函数值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数学建模与Matlab&quot;&gt;&lt;a href=&quot;#数学建模与Matlab&quot; class=&quot;headerlink&quot; title=&quot;数学建模与Matlab&quot;&gt;&lt;/a&gt;数学建模与Matlab&lt;/h1&gt;&lt;p&gt;数学建模是一个跨学科的竞赛，关乎生产生活中的实践问题&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python-logging模块</title>
    <link href="http://www.nianchu.space/2020/08/06/Python/Python-logging%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.nianchu.space/2020/08/06/Python/Python-logging%E6%A8%A1%E5%9D%97/</id>
    <published>2020-08-06T15:34:23.059Z</published>
    <updated>2020-08-06T15:44:11.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-logging模块"><a href="#Python-logging模块" class="headerlink" title="Python-logging模块"></a>Python-logging模块</h1><p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等等。</p><p>logging的优点： </p><ul><li>可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息；</li><li>print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出</li></ul><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-logging模块&quot;&gt;&lt;a href=&quot;#Python-logging模块&quot; class=&quot;headerlink&quot; title=&quot;Python-logging模块&quot;&gt;&lt;/a&gt;Python-logging模块&lt;/h1&gt;&lt;p&gt;logging模块是Pyth
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python中的pass语句</title>
    <link href="http://www.nianchu.space/2020/07/31/Python/Python%E4%B8%AD%E7%9A%84pass%E8%AF%AD%E5%8F%A5/"/>
    <id>http://www.nianchu.space/2020/07/31/Python/Python%E4%B8%AD%E7%9A%84pass%E8%AF%AD%E5%8F%A5/</id>
    <published>2020-07-31T03:56:16.276Z</published>
    <updated>2020-07-31T03:58:26.207Z</updated>
    
    <content type="html"><![CDATA[<p>#Python中的pass语句</p><p>Python中的pass语句是空语句，是为了保持程序结构的完整性。</p><p>pass不做任何事情，一般用做占位语句。以为像定义一个空函数和空的if判断会把报错，所以pass语句还是很有用的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Python中的pass语句&lt;/p&gt;
&lt;p&gt;Python中的pass语句是空语句，是为了保持程序结构的完整性。&lt;/p&gt;
&lt;p&gt;pass不做任何事情，一般用做占位语句。以为像定义一个空函数和空的if判断会把报错，所以pass语句还是很有用的。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python中的*args和**kwarge</title>
    <link href="http://www.nianchu.space/2020/07/30/Python/Python%E4%B8%AD%E7%9A%84*args%E5%92%8C**kwarge/"/>
    <id>http://www.nianchu.space/2020/07/30/Python/Python%E4%B8%AD%E7%9A%84*args%E5%92%8C**kwarge/</id>
    <published>2020-07-30T02:26:37.926Z</published>
    <updated>2020-07-30T02:33:38.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python中的args和-kwargs"><a href="#Python中的args和-kwargs" class="headerlink" title="Python中的args和*kwargs"></a>Python中的<em>args<code>和</code>*</em>kwargs</h1><p>args<code>和</code>kwargs是Python中的可变参数：args表示任意多个无名参数，返回一个tuple；kwargs表示关键字参数，返回一个dict</p><p><strong>同时使用args和kwargs时，args参数必须在kwargs之前</strong></p><p><strong>参考：</strong></p><p><a href="https://blog.csdn.net/yjk13703623757/article/details/76521420" target="_blank" rel="noopener">https://blog.csdn.net/yjk13703623757/article/details/76521420</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python中的args和-kwargs&quot;&gt;&lt;a href=&quot;#Python中的args和-kwargs&quot; class=&quot;headerlink&quot; title=&quot;Python中的args和*kwargs&quot;&gt;&lt;/a&gt;Python中的&lt;em&gt;args&lt;code&gt;和&lt;/c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/Python函数装饰器</title>
    <link href="http://www.nianchu.space/2020/07/29/Python/Python%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://www.nianchu.space/2020/07/29/Python/Python%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-07-29T14:02:27.892Z</published>
    <updated>2020-07-29T14:24:42.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python函数装饰器"><a href="#Python函数装饰器" class="headerlink" title="Python函数装饰器"></a>Python函数装饰器</h1><h2 id="在函数中定义函数"><a href="#在函数中定义函数" class="headerlink" title="在函数中定义函数"></a>在函数中定义函数</h2><p>Python中可以在函数中定义函数，需要注意的是：无论什么时候调用最外面的函数的时候，里面的函数都会被调用，但是里面的函数在外面函数之外是不能访问的</p><h2 id="从函数中返回函数"><a href="#从函数中返回函数" class="headerlink" title="从函数中返回函数"></a>从函数中返回函数</h2><p>返回一个函数时并没有函数名后面的小括号，这是为什么？</p><p>因为如果在函数名后面加上一对小括号，这个函数就会执行</p><h2 id="将函数作为参数传递给另外一个函数"><a href="#将函数作为参数传递给另外一个函数" class="headerlink" title="将函数作为参数传递给另外一个函数"></a>将函数作为参数传递给另外一个函数</h2><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器让你在一个函数前后去执行代码</p><h3 id="你的第一个装饰器"><a href="#你的第一个装饰器" class="headerlink" title="你的第一个装饰器"></a>你的第一个装饰器</h3><h3 id="装饰器蓝本规范"><a href="#装饰器蓝本规范" class="headerlink" title="装饰器蓝本规范"></a>装饰器蓝本规范</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh87ilq24ij31b80ta79r.jpg" alt="image-20200729222240810"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python函数装饰器&quot;&gt;&lt;a href=&quot;#Python函数装饰器&quot; class=&quot;headerlink&quot; title=&quot;Python函数装饰器&quot;&gt;&lt;/a&gt;Python函数装饰器&lt;/h1&gt;&lt;h2 id=&quot;在函数中定义函数&quot;&gt;&lt;a href=&quot;#在函数中定义函数&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python/廖雪峰Pyhton3教程/Pyhton3</title>
    <link href="http://www.nianchu.space/2020/07/22/Python/%E5%BB%96%E9%9B%AA%E5%B3%B0Pyhton3%E6%95%99%E7%A8%8B/Pyhton3/"/>
    <id>http://www.nianchu.space/2020/07/22/Python/%E5%BB%96%E9%9B%AA%E5%B3%B0Pyhton3%E6%95%99%E7%A8%8B/Pyhton3/</id>
    <published>2020-07-22T15:07:14.605Z</published>
    <updated>2020-08-24T10:06:14.707Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>8个bit(比特)作为一个byte(字节)，一个字节能表示的最大整数就是255(二进制11111111=255)</p><p>可变长编码的UTF-8</p><p>总结： 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器</p><p>ord()函数： 用于获取字符的整数表示，chr()把编码转换为对应的字符</p><p>Python中的字符类型是str，在内存中以Unicode表示，一个字符对应若干个字节。在网络上传输或者保存到磁盘上，就需要将str变为以字节为单位的bytes。</p><p>Python对bytes类型的数据用带b前缀的单引号或双引号表示。</p><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes。</p><p>纯英文的str可以用ascii编码为bytes；含有中文的str可以用utf-8编码为bytes；含有中文的str无法用ascii编码。</p><p>要把bytes变为str，可以用到decode()方法。</p><p>len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节流书。</p><p>1个中文3个字节，一个英文字符只占用1个字节</p><p>当Python解释器读取源代码时，为了让它按UTF-8编码读取，通常在文件开头写上这两行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>%x： 十六进制整数</p><p>使用%%来表示一个%</p><h2 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>插入： insert(index, content)</p><p>删除：</p><ul><li>pop —- 删除末尾的元素</li><li>pop(i)删除指定元素</li></ul><p>元素替换： 直接用索引表示</p><p>list里面的元素的数据类型也可以不同</p><p>list元素也可以是另一个list</p><h3 id="tuple：-元组"><a href="#tuple：-元组" class="headerlink" title="tuple： 元组"></a>tuple： 元组</h3><p>元组中除开appened()，insert()这样的方法，其他获取元素的方法和list是一样的。</p><p>元组不可变所以更安全，如果可能，尽量使用tuple代替list</p><p>特别注意： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 像下面这样定义的不是元组而是一个整数</span></span><br><span class="line">t = (<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 所以tuple中只有一个元素时，必须加上一个逗号， 用来消除歧义</span></span><br></pre></td></tr></table></figure><p><strong>特殊的tuple</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh071sk8juj30u011makm.jpg" alt="image-20200723000207152"></p><h2 id="使用dict和set"><a href="#使用dict和set" class="headerlink" title="使用dict和set"></a>使用dict和set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>要避免key不存在的错误，有两种方法，一种是通过in判断key是否存在，一种是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value。</p><p><strong>注意：</strong>返回None的时候Python的交互命令行不显示结果</p><p>删除一个key，使用pop(key)</p><p>dicet的缺点：需要占用大量的内存，内存浪费多</p><p>dict是用空间来换取时间的方法。</p><p>关于dict，需要牢记的一条就是dict的key必须是不可变对象</p><p>通过key计算位置的算法称为哈希算法</p><p>Python中：整数、字符串都是不可变的。而list是可变的</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set也是一组key的集合，但是不存储value。set中，由于key不能重复，所以没有重复的key</p><p>创建一个set，需要提供一个list作为输入集合： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>想set中添加元素使用add(key)，可以重复添加，但是不会有效果。</p><p>使用remove(key)方法可以删除元素</p><p>注意： set也需要放入不可变的对象</p><p><strong>再议不可变对象</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh07pw1ntwj30u01iyk6y.jpg" alt="image-20200723002519612"></p><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>L[start: end] : 索引包括start但是不包括end</p><p>倒数的第一个元素是-1</p><p>高级玩法： </p><p>L[start：end ：space ]</p><p>L[:]用于复制一个原样list</p><p>tuple仍然可以使用切片，但是因为tuple是不可变的，所以使用切片后得到的还是tuple</p><p>字符串也可以使用切片，使用之后得到的仍然是字符串</p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>给定一个list或者tuple，使用for循环来遍历这个list或tuple，这种遍历我们称之为遍历(lteration)</p><p>Python中，迭代是通过for … in 来完成的，相比java，python的for循环抽象程度要更高，因为Python中的for循环不仅可以在list或tuple上，还可以作用在其他可迭代对象上。</p><p>只要是可迭代对象，不管它有没有下标，都可以使用迭代:</p><p>例如dict就可以迭代，但是dict的存储不是按照list的方式顺序排列，所以，迭代出的结果的顺序很可能不一样。默认情况下，dict迭代的是key，如果要迭代value，可以用for value in d.values()，如果同时迭代key和value，可以使用for k, v in d.items():</p><p>如何判断一个对象是可迭代对象呢？ 可通过collections模块的lterable类型判断： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collection.abc <span class="keyword">import</span> Iterable </span><br><span class="line">isinstance(<span class="string">"123"</span>, Iterable)</span><br></pre></td></tr></table></figure><p>如何让list实现类似java那样的下标循环？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">"A"</span>, <span class="string">'B'</span>,<span class="string">'C'</span> ]):</span><br><span class="line">print(i, value)</span><br></pre></td></tr></table></figure><p><strong>小结： 任何可迭代对象都可以作用于for循环，包括我们自定义的数据类型</strong></p><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>在Python中，这种一边循环一边计算大的机制，称为生成器：generator</p><p>创建一个generator有很多种方法，第一种方法就是把一个列表生成式的[]改成()。</p><p>使用next()可以获得geneartor的下一个返回值，当没有更多元素时，抛出StopIteration的错误。</p><p>Generator 也是可迭代对象</p><h3 id="定义generator的另一种方法："><a href="#定义generator的另一种方法：" class="headerlink" title="定义generator的另一种方法："></a>定义generator的另一种方法：</h3><p>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generator生成的另一种方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib1</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"done"</span></span><br></pre></td></tr></table></figure><p>较难理解的就是generator和函数的执行流程不一样。generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p><p>使用for循环调用generator时，发现拿不到generator的return语句中的返回值。如果想要拿到返回值，必须捕获到StopIteration错误，返回值包含在StopIteration的value中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Exercise 写出一个关于杨辉三角形的generator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yH</span><span class="params">(max)</span>:</span></span><br><span class="line">    list9 = []</span><br><span class="line">    list8 = []</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; max:</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">1</span>:</span><br><span class="line">            list8 = [<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">yield</span> list8</span><br><span class="line">            index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> index == <span class="number">2</span>:</span><br><span class="line">            list8 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">yield</span> list8</span><br><span class="line">            index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list9 = [<span class="literal">None</span>] * index</span><br><span class="line">            <span class="keyword">for</span> I <span class="keyword">in</span> range(<span class="number">1</span>, index - <span class="number">1</span>):</span><br><span class="line">                list9[I] = list8[I - <span class="number">1</span>] + list8[I]</span><br><span class="line">            list9[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            list9[index - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">yield</span> list9</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            list8 = list9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = yH(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g1:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>可以直接作用于for循环的对象统称为可迭代对象： Iterable</p><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器： Iterator</p><p>可以使用isinstance()判断一个对象是不是Iterator对象</p><p>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。</p><p>Python的Iterator对象是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。</p><p>可以把数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，在需要返回下一个数据时它才会计算。</p><p>Iterator甚至可以表示一个无限大的数据流，例如全体自然数。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh216p4o3lj31do0og0wb.jpg" alt="image-20200724141020012"></p><h1 id="函数式编程-Functional-Programming"><a href="#函数式编程-Functional-Programming" class="headerlink" title="函数式编程 - Functional Programming"></a>函数式编程 - Functional Programming</h1><p>通过把大段代码拆成函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元</p><p>理解计算机和计算的概念</p><p>在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最接近计算机的语言。</p><p>而计算则指的是数学意义上的计算，越是抽象的计算，离计算机硬件越远</p><p>对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如C语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如Lisp语言。</p><p>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p><p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p><p>Python不是纯函数式编程语言。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数英文名： High-order function</p><p>abs(-10)是函数调用，abs是函数本身</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">print(f(<span class="number">-10</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>函数本身也可以赋值给变量，即：变量可以指向函数</p><h3 id="传入函数"><a href="#传入函数" class="headerlink" title="传入函数"></a>传入函数</h3><p>一个函数可以接受另一个函数作为参数，这种函数就称之为高阶函数</p><p>一个最简单的高阶函数： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line"><span class="keyword">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure><p>高阶函数中作为参数的函数只需要函数名，不需要后面的括号</p><h2 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map()函数接收两个参数，一个是函数，一个是Iterable，map函数将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><p>map()作为高阶函数，事实上它把运算规则抽象了。</p><p>下面将一个list中的所有数字转为字符串:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，ruduce把结果继续和序列的下一个元素做累积计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于reduce的用法</span></span><br><span class="line"><span class="comment"># 实现累加</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">redce_detail = reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">print(redce_detail)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现将一个序列中的所有数字变成一个整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeToInteger</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">list_for_str = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">integer = reduce(changeToInteger, list_for_str)</span><br><span class="line">print(integer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用reduce和map()函数，写出将str转换为int的函数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</span><br><span class="line"><span class="comment"># 上一行末尾的[s]是什么意思？(大概意思我是了解了)</span></span><br><span class="line">str2int = reduce(fn, map(char2num, <span class="string">"13579"</span>))</span><br><span class="line">print(str2int)</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>Python内建的filter()函数用于过滤序列</p><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的时，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><p>filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用到list()函数获得所有结果并返回一个list</p><p>用filter求素数：<strong>但是没有怎么看懂</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用filter求素数 -- 没有怎么看懂</span></span><br><span class="line"><span class="comment"># 首先定义一个从3开始的奇数序列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后定义一个筛选函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br><span class="line"><span class="comment"># 定义一个生成器，不断返回下一个素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = next(it)</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = filter(_not_divisible(n),it) <span class="comment"># 构造新序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">print(<span class="string">"1000以内的所有素数： "</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n&lt; <span class="number">1000</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Python中对匿名函数提供了有限支持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x : x * x</span><br><span class="line"><span class="comment"># 上述匿名函数中，第一个x表示函数参数</span></span><br></pre></td></tr></table></figure><p>匿名函数有一个限制，就是只能有一个表达式，不用谢retrun，返回值就是该表达式的结果</p><p>匿名函数没有名字，所以不用担心函数名冲突。匿名函数也是一个对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数；</p><p>也可以把匿名函数作为一个返回值返回。</p><h2 id="sorted-–-排序算法"><a href="#sorted-–-排序算法" class="headerlink" title="sorted – 排序算法"></a>sorted – 排序算法</h2><p>排序的核心是比较两个元素的大小</p><p>对于字符串或者两个dict如何比较呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</p><h3 id="list排序"><a href="#list排序" class="headerlink" title="list排序"></a>list排序</h3><p>Python内置的sorted()函数就可以对list进行排序</p><p>sorted()是一个高阶函数，它可以接受一个key函数来实现自定义的排序：</p><p>key函数使用方法： key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p><h3 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h3><p>默认情况下，对字符串进行排序，是按照ASCII的大小进行比较的。</p><p>如何实现排序时忽略大小写，按照字母序排序？实现这个算法，只需要将所有字符串都改成大写或者小写</p><p>如果要进行反向排序，不必改动key函数，只需要传入第三个参数： reverse=True</p><p><strong>下面的练习题虽然我做出来了，但是我还是很蒙，有时间记得复习复习：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请用sorted()对上述列表分别按名字排序</span></span><br><span class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_name</span><span class="params">(t)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">L2 = sorted(L, key=by_name)</span><br><span class="line">print(L2)</span><br><span class="line"><span class="comment"># 请用sorted()对上述列表分别按成绩高低排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_score</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">L3 = sorted(L, key=by_score)</span><br><span class="line">print(L3)</span><br></pre></td></tr></table></figure><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><p>对于一个求和函数，如果不需要立刻求和，而是在后面的代码中，根据需要再计算。这时就可以不返回求和的结果，而是返回求和的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">对于一个求和函数，如果不需要立刻求和，而是在后面的代码中，根据需要再计算。这时就可以不返回求和的结果，而是返回求和的函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们调用lazy_sum()时，返回的并不是求和结果而是求和函数</span></span><br><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">print(type(f))</span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure><p><strong>注意 ：</strong>返回一个函数时，不需要加上函数名后面的括号</p><h4 id="何为闭包？"><a href="#何为闭包？" class="headerlink" title="何为闭包？"></a>何为闭包？</h4><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使用入相同的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">print(f1 == f2)</span><br><span class="line"><span class="string">'''输出结果</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h3 id="闭包–Closure"><a href="#闭包–Closure" class="headerlink" title="闭包–Closure"></a>闭包–Closure</h3><p>需要注意的是：返回的函数并没有立刻执行，而是直到它被调用之后才执行</p><p>返回闭包时牢记的一点就是： 返回函数不要引用任何循环变量，或者后续会发生变化的变量</p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论循环变量后续如何更改，已绑定到函数参数的值不变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在闭包中使用循环变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> j * j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line">print(f1(), <span class="string">''</span>, f2(), <span class="string">''</span>,  f3()</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>函数对象有一个name属性，可以拿到函数的名字： </p><h3 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h3><p>在代码运行期间动态增加功能的方式，称之为”装饰器”(Decorator)</p><p>本质上，decoator就是一个返回函数的高阶函数。</p><p><strong>总感觉装饰器decorator有点难</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在OPP的设计模式中，decorator被称为装饰模式。OPP的装饰模式需要通过继承和组合来实现，而Python除了能支持OPP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。</p><p>*<em>这一小节的练习题答案参见大神做法： *</em></p><p><a href="https://blog.csdn.net/GBA_Eagle/article/details/80764749" target="_blank" rel="noopener">https://blog.csdn.net/GBA_Eagle/article/details/80764749</a></p><h2 id="偏函数–-Partial-function"><a href="#偏函数–-Partial-function" class="headerlink" title="偏函数– Partial function"></a>偏函数– Partial function</h2><p><strong>对于函数，通过设定参数的默认值，可以降低函数调用的难度。偏函数也可以做到这点</strong></p><h3 id="int-函数"><a href="#int-函数" class="headerlink" title="int()函数"></a>int()函数</h3><p>int()函数可以把字符串转换为整数，默认为十进制转换</p><p>int()函数中有个base参数，默认为10，修改base可以让int()函数按照你希望的进制进行转换</p><p>转换大量二进制字符串的时候，每次都传入int(x, base=2)非常麻烦，这时候，可以自定义一个int2()函数，默认把base=2传进去，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> int(x, base)</span><br></pre></td></tr></table></figure><p>functools.partial就是帮助我们创建一个偏函数的，不需要自定义int2()，可以直接使用下面的代码创建一个新的函数int2():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line">int2(<span class="string">'1000000'</span>)</span><br></pre></td></tr></table></figure><p>functools.partial的作用就是，把一个函数的某些参数固定住，返回一个新的函数</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><p>任何模块的第一个字符串，都被视为模块的文档注释</p><p>使用author变量可以添加作者姓名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">"YourName"</span></span><br></pre></td></tr></table></figure><p>sys模块有一个argv变量，用list存储了命令行的所有参数。argv至少有一个元素，第一个元素永远是该.py文件的文件名</p><p>在一个模块中，我们可能会定义很多函数和变量。对于其中一些函数和变量，我们是想用来给别人使用的，对于另外一些函数和变量，我们只想在模块内部使用。实现上述目标是通过_前缀来实现的。</p><p>正常的函数和变量名是公开的(public)，可以直接被使用</p><p>下面的一段话没有读太懂：<br>类似<code>**xxx**</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>**author**</code>，<code>**name**</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>**doc**</code>访问，我们自己的变量一般不要用这种变量名；</p><p>类似_abc这样的函数或变量就是非公开的(private)，不应该被直接使用。</p><p>需要注意的是： private函数和变量是<strong>不应该被直接引用</strong>，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数和变量，但是，从编程习惯上不应该引用private函数或变量</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>外部不需要引用的函数全部定义为private，只有外部需要引用的函数才定义为public</p><h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><p>安装使用pip或者pip3</p><h3 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h3><p>加载一个模块的时候，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。</p><p>默认情况下，搜索路径会存放在sys模块的path变量中</p><p>如何添加自己的搜索路径，有两种方法：</p><ol><li><p>直接修改sys.path，在其中添加要搜索的目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">''</span>) <span class="comment"># 在引号中添加要搜索的目录</span></span><br></pre></td></tr></table></figure><p>这种方法是在运行时修改，运行结束后失效</p></li><li><p>第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响</p></li></ol><h1 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h1><p>面向对象最重要的概念就是类(Class)和实例(Instance),必须牢记类是抽象的模版，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同</p><p>可以自由地给一个实例变量绑定属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给实例bart绑定一个name属性：</span></span><br><span class="line">bart.name = <span class="string">'Bart Simpson'</span></span><br><span class="line">print(bart.name)</span><br></pre></td></tr></table></figure><p>由于类可以起到模版的作用，因此可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去，通过定义一个特殊的init方法，可以在创建实例的时候，就把name，score等属性绑定上去</p><p><strong>下面的需要重点理解一下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的init方法，可以在创建实例的时候，</span></span><br><span class="line"><span class="comment"># 就把name，score等属性绑上去</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'bowenkei'</span></span><br><span class="line">        self.score = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">no1 = Student(<span class="string">"chenqiaochu"</span>, <span class="number">100</span>)</span><br><span class="line">no2 = Student1()</span><br><span class="line">print(<span class="string">"--------------------------"</span>)</span><br><span class="line">print(str(no1.score) + <span class="string">" "</span> + no1.name )</span><br><span class="line">print(str(no2.score) + <span class="string">" "</span> + no2.name )</span><br><span class="line"><span class="comment"># 注意到init方法的第一个参数永远是self，表示创建的实例本身，因此，在init方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身</span></span><br></pre></td></tr></table></figure><p>self不需要传，Python解释器自己会把实例变量传进去：</p><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>我们可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”封装起来了。这些封装数据的函数是和Student类本身关联起来的，我们称之为类的方法</p><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>外部代码还是可以自由地修改一个实例的属性。</p><p>如果想让内部属性不被外部访问，可以把属性的名字前加上两个下划线，在Python中，实例的变量名如果以双下划线开头，就变成了一个私有变量(private)，只有内部可以访问，外部不能访问</p><p>以双下划线开头且以双下划线结尾的是特殊变量，特殊变量可以直接访问，不是private变量。</p><p>对于前面只有一个下划线的变量，是可以在外部访问到的。但是，按照约定俗成的规定，当你看到这样的变量时，意思是说，“虽然我可以被访问，但是请把我当作私有变量，不要随意访问我”</p><p>双下划线开头的实例变量其实也是可以访问到的，因为Python其实并没有严格的private变量。之所以不能访问以双下划线开头的私有变量，是应为Python解释器把</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __name变量变成了_Student__name</span></span><br></pre></td></tr></table></figure><p><strong>总的来说就是： Python本身并没有任何机制阻止你干坏事，全凭自觉</strong></p><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>当子类和父类有相同的方法的时候，子类的方法会覆盖父类的方法。当运行子类的实例的时候，总是会调用子类的方法</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>创建一个class的时候实际上是创建了一种数据类型。</p><p>判断某个变量是否是某种类型，可以使用isinstance()判断</p><p>在继承关系中，如果一个实例的数据类型是某个子类，那么它的数据类型也可以被看做是父类。但是反过来就不行</p><p>多态的真正威力： 调用方法只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><ul><li>对扩展开放： 允许新增Animal子类；</li><li>对修改封闭：不需要修改依赖Animal类型的run_twice()等函数</li></ul><h2 id="静态语言-VS-动态语言"><a href="#静态语言-VS-动态语言" class="headerlink" title="静态语言 VS 动态语言"></a>静态语言 VS 动态语言</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghacct7lc6j31ee0p8wjj.jpg" alt="image-20200731184112361"></p><p><strong>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</strong></p><h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><h3 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用type()</h3><h3 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance"></a>使用isinstance</h3><p>对于class的继承关系，使用isinstance()函数</p><p>isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上</p><p>能用type()判断的基本类型也可以用isinstance()判断</p><p>还可以用isinstance判断一个变量是否是某些类型中的一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用isinstance()判断一个变量是否是某些类型中的一个</span></span><br><span class="line"><span class="comment"># 判断某个变量是否是list或者tuple:</span></span><br><span class="line">print(isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], (list, tuple)))</span><br><span class="line">print(isinstance((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (list, tuple)))</span><br><span class="line">print(isinstance(<span class="string">'hello'</span>, (list, tuple)))</span><br></pre></td></tr></table></figure><h2 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用dir()</h2><p>dir()用于获取一个对象的所有属性和方法。它返回一个包含字符串的list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得一个str对象的所有属性和方法</span></span><br><span class="line">print(dir(<span class="string">'str'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __len__和len()是等价的，使用后者，它会自动去调用该对象的__len__()</span></span><br><span class="line">print(len(<span class="string">'abc'</span>))</span><br><span class="line">print(<span class="string">'abc'</span>.__len__())</span><br></pre></td></tr></table></figure><h2 id="使用getattr-setattr-hasattr"><a href="#使用getattr-setattr-hasattr" class="headerlink" title="使用getattr(), setattr(),hasattr()"></a>使用getattr(), setattr(),hasattr()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用getattr(),setattr(),hasattr()，我们可以直接操作一个对象的状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.x * self.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = MyObject()</span><br><span class="line"><span class="comment"># 测试上面新创建的对象的属性</span></span><br><span class="line">print(hasattr(obj, <span class="string">'x'</span>))</span><br><span class="line">print(obj.x)</span><br><span class="line">print(hasattr(obj, <span class="string">'y'</span>))</span><br><span class="line">setattr(obj, <span class="string">'y'</span>, <span class="number">19</span>)</span><br><span class="line">print(hasattr(obj, <span class="string">'y'</span>))</span><br><span class="line">print(getattr(obj, <span class="string">'y'</span>))</span><br><span class="line">print(obj.y)</span><br></pre></td></tr></table></figure><p>如果获取不存在的属性，会抛出AttributeError(属性)的错误：</p><p>使用getattr()时，可以传入一个default参数，如果属性不存在，就返回默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用getattr()时，可以传入一个default参数，如果属性不存在，就返回默认值</span></span><br><span class="line">print(getattr(obj, <span class="string">'z'</span>, <span class="string">'404: No such a attribute'</span>))</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>如果知道一个对象的属性和方法，就直接使用，不要使用getattr(),setattr()等等</p><h2 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h2><p><strong>由于Python是动态语言，根据类创建的实例可以任意绑定属性</strong></p><p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量</p><p>类属性：类本身需要绑定的属性，可以直接在class中定义，这种属性是类属性，归该class所有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例属性和类属性</span></span><br><span class="line"><span class="comment"># 给实例绑定属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>)</span><br><span class="line">s.score = <span class="number">19</span></span><br><span class="line"><span class="comment"># 给类添加类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Student'</span></span><br><span class="line"><span class="comment"># 上面的name就是类属性。类属性虽然归类所有，但是该类的所有实例都可以访问到</span></span><br><span class="line">s = Student1()</span><br><span class="line">print(s.name)</span><br><span class="line">print(Student1.name)</span><br><span class="line">s.name = <span class="string">"Michael"</span></span><br><span class="line"><span class="comment"># 因为实例属性的优先级比类属性高，所以他会屏蔽掉类的name属性</span></span><br><span class="line">print(s.name)</span><br><span class="line"><span class="comment"># s有了实例属性之后，Student的name类属性还在且不会消失</span></span><br><span class="line"><span class="comment"># 在删除掉s的实例属性之后，name类属性就会显示出来</span></span><br><span class="line"><span class="keyword">del</span> s.name</span><br><span class="line">print(s.name)</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p> 在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><h1 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h1><h2 id="使用slots"><a href="#使用slots" class="headerlink" title="使用slots"></a>使用slots</h2><p><strong>给实例绑定一个方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">    self.age = age</span><br><span class="line"><span class="comment"># 给实例绑定一个方法</span></span><br><span class="line">s.set_age = types.MethodType(set_age, s)</span><br><span class="line">s.set_age(<span class="number">20</span>)</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>但是给一个实例绑定的方法，对于另一个实例是不起作用的</p><p>想要给所有实例都绑定方法，可以给class绑定方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">    self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student1.set_score = types.MethodType(set_score, Student1)</span><br><span class="line">s.set_score(<span class="number">100</span>)</span><br><span class="line">print(s.score)</span><br><span class="line">s2 = Student1()</span><br><span class="line">s2.set_score(<span class="number">10000</span>)</span><br><span class="line">print(s2.score)</span><br></pre></td></tr></table></figure><h3 id="使用slots-1"><a href="#使用slots-1" class="headerlink" title="使用slots"></a>使用slots</h3><p>如何才能限制实例的属性，比如，只允许对Student实例添加name和age属性。</p><p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的slots变量，用来限制该class实例能添加的属性</p><p>*<em>使用slots时要注意： *</em></p><p>slots定义的属性仅对当前类实例起作用，对继承的子类是不起作用的；除非，在子类中也定义一个slots，这样，子类实例允许定义的属性就是自身的slots加上父类的slots。</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>类似下面这样就实现了多重继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal, Flyable)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># Bat类继承了Mammal和Flyable类</span></span><br></pre></td></tr></table></figure><h3 id="Mixln"><a href="#Mixln" class="headerlink" title="Mixln"></a>Mixln</h3><p>为了让一个类实现更多的类，从而让它再多继承一个类，这种设计通常被称为Mixln</p><p>Mixln的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个Mixln的功能，而不是设计多层次的复杂的继承关系</p><p>只允许单一继承的语言(如Java)不能使用Mixln的设计</p><h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><p>Python中有很多特殊的变量或函数都有着特殊的用途，可以帮助我们定制类</p><h3 id="str-和repr"><a href="#str-和repr" class="headerlink" title="str()和repr()"></a>str()和repr()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __str__()和__repr__()用于返回有关类和实例的字符串，其中前者返回用户看到的字符串，后者返回程序开发者看到的字符串，后者是为调试服务的</span></span><br><span class="line"><span class="comment"># 使用下面的方法可以让str()和repr()统一</span></span><br><span class="line">__str__() = __repr__()</span><br><span class="line"><span class="comment"># 直接使用变量时调用的是__repr__()，使用print调用的是__str__</span></span><br><span class="line"><span class="comment"># 如何才能调用__str__方法？使用:</span></span><br><span class="line">print(Class(<span class="string">"Attribute"</span>))</span><br></pre></td></tr></table></figure><h3 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h3><p>如果一个类想被用于for…in循环，类似list或tuple那样，就必须实现个iter()方法,该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，知道遇到StopIteration错误时间退出循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a， b</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 推出循环</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="getitem"></a>getitem</h3><p>想要FIb实例可以实现按索引取值必须实现getitem方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># getitem</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">Fib.__getitem__ = types.MethodType(__getitem__, Fib)</span><br><span class="line"><span class="comment"># 现在可以按下标访问数列的任意一项了</span></span><br><span class="line">f = Fib()</span><br><span class="line">print(f[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="让Fib实现切片操作"><a href="#让Fib实现切片操作" class="headerlink" title="让Fib实现切片操作"></a>让Fib实现切片操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让Fib实现切片</span></span><br><span class="line"><span class="comment"># 删除原来的__getitem__方法</span></span><br><span class="line"><span class="keyword">del</span> Fib.__getitem__</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(n, int):</span><br><span class="line">        a,  b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> n:</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span> isinstance(n, slice):</span><br><span class="line">        start = n.start</span><br><span class="line">        stop = n.stop</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">        a, b  = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        L = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</span><br><span class="line">            <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                L.append(a)</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line"><span class="comment"># 把新的__getitem__添加到Fib class中去</span></span><br><span class="line">Fib.__getitem__ = types.MethodType(__getitem__, Fib)</span><br><span class="line"><span class="comment"># 现在可以尝试Fib的切片了</span></span><br><span class="line">f = Fib()</span><br><span class="line">print(f[<span class="number">0</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>经过上面的操作之后，Fib还没有实现list的所有功能，例如对step参数还没有处理，也没有对含有负数的slice进行处理。要正确实现一个getitem()还是有很多工作要做的</p><p>如果想把对象看成一个dict，getitem()的参数也可能是一个可以作key的object，例如str。</p><p>与getitem类似的还有setitem以及delitem()方法</p><h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h3><p>使用getattr()方法可以动态返回一个属性: 即当调用一个不存在的属性时，比如score,Python解释器会试图调用getattr(self, ‘score’)来尝试获得属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __getattr__()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_getattr</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">'score'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line">one_getattr = my_getattr(<span class="string">'Bowenkei'</span>)</span><br><span class="line">print(one_getattr.name)</span><br><span class="line">print(one_getattr.score)</span><br><span class="line"><span class="comment"># 使用__getattr__()返回函数也是可以的</span></span><br><span class="line"><span class="keyword">del</span> my_getattr.__getattr__</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> attr == <span class="string">'money'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="string">'这是我的存款：∞'</span></span><br><span class="line">my_getattr.__getattr__ = types.MethodType(__getattr__, my_getattr)</span><br><span class="line"></span><br><span class="line">two_getattr = my_getattr(<span class="string">"bowenkei"</span>)</span><br><span class="line">print(two_getattr.money)</span><br><span class="line">print(two_getattr.money())</span><br><span class="line"><span class="comment"># 注意，只有在没有找到属性的情况下，才调用__getattr__(),对于已经存在的属性，不会在__getattr__中查找</span></span><br><span class="line">print(two_getattr.today) <span class="comment"># None</span></span><br><span class="line"><span class="comment"># 如上述任意调用都会返回None，因为__getattr__()的默认返回值就是None,但是如果类中没有__getattr__()</span></span><br><span class="line"><span class="comment"># 方法的时候，调用class中没有的熟悉则都会抛出AttributeError。要让class只响应特定的几个属性，我们就要按照约定，</span></span><br><span class="line"><span class="comment"># 抛出AttributeError的错误</span></span><br><span class="line"><span class="keyword">del</span> my_getattr.__getattr__</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> attr == <span class="string">'age'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> :<span class="number">20</span></span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">"\'my_getattr\'object has no attribute \'%s\'"</span> % attr)</span><br><span class="line"></span><br><span class="line">my_getattr.__getattr__ = types.MethodType(__getattr__, my_getattr)</span><br><span class="line">three_my_getattr = my_getattr(<span class="string">"bowenkei"</span>)</span><br><span class="line">print(three_my_getattr.age())</span><br><span class="line"><span class="comment"># 由此可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</span></span><br><span class="line"><span class="comment"># 这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况做调用</span></span><br><span class="line"><span class="comment"># 如果要写SDK，给每个URL对应的API都写一个方法，那太麻烦，而且API一旦改动，SDK也要改</span></span><br><span class="line"><span class="comment"># 利用完全动态的__getattr__(),可以写出一个链式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self._path = path</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">'%s/%s'</span> % (self._path, path))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line"></span><br><span class="line">    __repr__ =  __str__</span><br><span class="line"></span><br><span class="line"><span class="comment"># Demo</span></span><br><span class="line">print(Chain(<span class="string">'bowenkei'</span>).status.user.timeline.list)</span><br><span class="line">print(Chain(<span class="string">'bowenkei'</span>).status)</span><br><span class="line">print(Chain(<span class="string">'bowenkei'</span>).status.user)</span><br><span class="line">print(Chain(<span class="string">'bowenkei'</span>).status.user.timeline)</span><br><span class="line">print(Chain(<span class="string">'bowenkei'</span>).status.user.timeline.list)</span><br><span class="line"><span class="string">"""output:</span></span><br><span class="line"><span class="string">bowenkei/status/user/timeline/list</span></span><br><span class="line"><span class="string">bowenkei/status</span></span><br><span class="line"><span class="string">bowenkei/status/user</span></span><br><span class="line"><span class="string">bowenkei/status/user/timeline</span></span><br><span class="line"><span class="string">bowenkei/status/user/timeline/list</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>###call</p><p>一个对象实例有自己的属性和实例方法，调用实例方法时，用instance.method()来调用。</p><p><em>在Python中，可以直接在实例本身上调用实例方法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># call</span></span><br><span class="line"><span class="comment"># 在Python中可以直接在实例本身上调用实例方法</span></span><br><span class="line"><span class="comment"># 任何类，只要实现一个call()方法就可以直接对实例进行调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call_student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</span><br><span class="line"></span><br><span class="line">call_s = Call_student(<span class="string">'bowenkei'</span>)</span><br><span class="line">call_s()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">call()还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 如何判断一个变量是对象还是函数？</span></span><br><span class="line"><span class="comment"># 能被调用的对象就是一个Callable对象</span></span><br><span class="line"><span class="comment"># 函数和带有call()的类实例都是Callable对象</span></span><br><span class="line"><span class="comment"># 使用callable()</span></span><br><span class="line">print(callable(Call_student))</span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>Python的class允许定义许多定制方法，可以让我们非常方便地生成特定的类。</p><p>Python官方文档地址：<a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="noopener">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p><h2 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h2><h3 id="使用枚举类-1"><a href="#使用枚举类-1" class="headerlink" title="使用枚举类"></a>使用枚举类</h3><p>定义常量时，更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了Enum类来实现这个功能:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用枚举类</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line">Month = Enum(<span class="string">'Month'</span>, (<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出枚举成员</span></span><br><span class="line">print(Month.Jan.value)</span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    print(name, <span class="string">'=&gt;'</span>, member, <span class="string">','</span>, member.value)</span><br><span class="line"><span class="comment"># value属性是自动赋给成员的int常量，默认从1开始计数</span></span><br><span class="line"><span class="comment"># 从Enum中派生出自定义类</span></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment">#Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @unique是一个装饰器，可以帮助我们检查有没有重复值</span></span><br><span class="line"><span class="comment"># 访问枚举类型可以有若干种方法</span></span><br><span class="line">print(Weekday.Mon)</span><br><span class="line">print(Weekday[<span class="string">'Sat'</span>])</span><br><span class="line">print(Weekday(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 即既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量</span></span><br></pre></td></tr></table></figure><h1 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h1><h2 id="错误、调试和测试-1"><a href="#错误、调试和测试-1" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h2><p>运行一个程序总会遇到各种各样的错误：</p><p>程序编写造成的问题叫做bug，bug是必须修复的</p><p>用户输入造成的错误可以通过检查用户的输入来做相应的处理</p><p>另一类错误是完全无法在程序运行过程中预测的。这种错误也称为异常，例如：写入文件的时候，磁盘满了，写不进去了。</p><p>Python内置有一套异常处理机制。</p><p>我们也需要跟踪程序的执行，查看变量的值是否正确，这个过程称为调试。Python的pdb可以让我们以单步方式执行代码。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，就知道是否有错。</p><p>但是用错误码来表示是否出错十分不便，更好的方法是使用try-except-finally的错误处理机制</p><p>当我们认为某些代码可能会出错时，就可以用<code>try</code>来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即<code>except</code>语句块，执行完<code>except</code>后，如果有<code>finally</code>语句块，则执行<code>finally</code>语句块，至此，执行完毕。</p><p><strong>注意：</strong>如果有finally语句，则finally语句则一定会被执行，但是可以没有finally语句</p><p>还可以在except语句后面加一个else，当没有错误发生时，会自动执行else语句</p><p>Python的错误也是class，所有的错误都继承自BaseExceptioon</p><p>常见的错误类型和继承关系：</p><p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p><p>Try-except-finally可以跨越多层调用，所以在使用时，只需要在合适的层次去捕获错误就可以了。</p><p>###调用堆栈</p><p>如果错误没有被捕获，它就会一直往上抛，直到最后被Python解释器捕获，打印一个错误信息，然后程序退出。</p><p>###记录错误</p><p>Python内置的logging模块可以非常容易地记录错误信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  do something</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.exception(e)</span><br><span class="line">    </span><br><span class="line">  do someting</span><br></pre></td></tr></table></figure><h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><p>错误是class，捕获一个错误就是捕获到该class的一个实例。</p><p>错误并不是凭空产生的，而是有意创建并抛出的。Python内置的函数或抛出很多类型的错误，我们自己编写的函数也可以抛出错误。</p><p>抛出错误，首先根据需要，可以定义你一个错误的class，选择好继承关系，然后用raise语句抛出一个错误的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FootError</span><span class="params">(ValueError)</span>:</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    n = int(s)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> FootError(<span class="string">"invalid value: %s "</span> %s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line">foo(<span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><p>只有在有需要的时候才定义我们自己的错误类型。如果可以选择Python已有的内置的错误类型，尽量使用Python内置的错误类型。</p><p>raise语句如果不带参数，就会把当前错误原样抛出，在except中raise一个Error，还可以把一种类型的错误转化为另一种类型</p><p><strong>程序也可以主动抛出错误，让调用者来处理相应的错误。但是，应该在文档中写清楚可能会抛出哪些错误，以及错误产生的原因。</strong></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p><strong>程序能一次写完并且正常运行的概率很小，基本不超过1%</strong></p><p>我们需要知道，出措时，哪些变量的值是正确的，哪些变量的值是错误的。</p><h4 id="第一种方法：-使用print-把可能有问题的变量打印出来"><a href="#第一种方法：-使用print-把可能有问题的变量打印出来" class="headerlink" title="第一种方法： 使用print()把可能有问题的变量打印出来"></a>第一种方法： 使用print()把可能有问题的变量打印出来</h4><h4 id="第二种方法：-断言"><a href="#第二种方法：-断言" class="headerlink" title="第二种方法： 断言"></a>第二种方法： 断言</h4><p>凡是用print()来辅助查看的的地方，都可以用断言(assert)来替代:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 断言(assert)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></span><br><span class="line">    n = int(s)</span><br><span class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'0 is zero!'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    foo(<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># assert的意思是，表达式n!=0应该是True，否则，根据程序运行的逻辑，后面的代码肯定会出错。如果断言失败，</span></span><br><span class="line"><span class="comment"># assert语句本身就会抛出AssertionError</span></span><br><span class="line"><span class="comment"># 启动python解释器时可以用 -0 参数(python3 -0 python_file_name)来关闭assert，关闭后，所有的assert语句可以当成pass</span></span><br></pre></td></tr></table></figure><h4 id="第三种方法：-logging"><a href="#第三种方法：-logging" class="headerlink" title="第三种方法： logging"></a>第三种方法： logging</h4><p>把print()换成logging是第三种方法，和assert相比，logging不会抛出任何错误，而且可以输出到文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># logging</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line">s = <span class="string">'0'</span></span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(<span class="string">"n = %d"</span> % n)</span><br><span class="line">print(<span class="number">10</span> / n)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># info是通告，信息的意思</span></span><br><span class="line"><span class="string"># logging的好处就是，它允许你使用不同的参数来区分记录信息的级别，可选的参数有debug, info, waring, error。</span></span><br><span class="line"><span class="string"># 当我们选定其中info的时候哦，logging.debug就不起作用了，这样就可以输出不同级别的信息，也不用删除。</span></span><br><span class="line"><span class="string"># 使用logging的另外一个好处是，通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件</span></span><br></pre></td></tr></table></figure><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="*注意： *"></a>*<em>注意： *</em></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。(备注： 使用Debug的时候，logging.info以及logging.debug都是会运行的)</span><br></pre></td></tr></table></figure><h4 id="第四种方法：-pdb"><a href="#第四种方法：-pdb" class="headerlink" title="第四种方法： pdb"></a>第四种方法： pdb</h4><p>pdb是Python的调试器，它可以让程序以单步方式运行。</p><p>使用方法： </p><ol><li>以参数 -m pdb启动后，pdb自动定位到下一步将要执行的代码</li><li>使用命令参数 l来查看代码</li><li>使用命令参数 n 可以单步执行代码</li><li>在任何时候都可以输入命令参数 p 变量名来查看变量</li><li>输入命令参数 q结束调试</li></ol><h4 id="第五种方法：pdb-set-trace"><a href="#第五种方法：pdb-set-trace" class="headerlink" title="第五种方法：pdb.set_trace()"></a>第五种方法：pdb.set_trace()</h4><p>这个方法也是使用pdb，但是不需要单步执行，我们只需要import pdb，然后在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点。</p><p>运行代码时，程序会自动在pdb,set_trace()暂停并进入pdb调试环境，可以使用命令p查看变量，或者用命令c继续运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    pdb.set_trace() <span class="comment"># 设置断点</span></span><br><span class="line">    print(i)</span><br><span class="line">    pdb.set_trace() <span class="comment"># 设置断点</span></span><br></pre></td></tr></table></figure><h4 id="最后一种方法：-使用IDE"><a href="#最后一种方法：-使用IDE" class="headerlink" title="最后一种方法： 使用IDE"></a>最后一种方法： 使用IDE</h4><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，详见：</p><p><a href="https://www.nli.cn/read/liaoxuefeng-python30/7cfd1dfdf10276d3.md" target="_blank" rel="noopener">https://www.nli.cn/read/liaoxuefeng-python30/7cfd1dfdf10276d3.md</a></p><h3 id="setUp与setDown"><a href="#setUp与setDown" class="headerlink" title="setUp与setDown"></a>setUp与setDown</h3><p>可以在单元测试中编写两个特殊的setUp()和setDown()方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p><h2 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h2><p>Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p><p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>…</code>表示中间一大段烦人的输出。</p><p>什么输出也没有。这说明我们编写的doctest运行都是正确的。如果程序有问题，比如把<code>**getattr**()</code>方法注释掉，再运行就会报错</p><p>当模块正常导入时，doctest不会被执行。只有在命令行直接运行时，才执行doctest。所以，不必担心doctest会在非测试环境下执行。</p><p>doctest非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含doctest的注释提取出来。用户看文档的时候，同时也看到了doctest</p><h2 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h2><h3 id="异步IO和同步IO"><a href="#异步IO和同步IO" class="headerlink" title="异步IO和同步IO"></a>异步IO和同步IO</h3><p>在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p><p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p><p>使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。想想看，你得知道什么时候通知你“汉堡做好了”，而通知你的方法也各不相同。如果是服务员跑过来找到你，这是<strong>回调模式</strong>，如果服务员发短信通知你，你就得不停地检查手机，这是<strong>轮询模式</strong>。总之，异步IO的复杂度远远高于同步IO</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。</p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>文件对象： 通常被称为文件描述</p><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>使用Python内置的open()函数，传入文件名和标识符:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/User/Test/test.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><p>如果文件不存在，open()函数就会抛出一个IOErro，并且给出错误码和详细的信息告诉你文件不存在。</p><p>如果文件打开成功，调用read()方法可以一次读取文件的全部内容，Python把内容读取到内容中，用一个str对象表示</p><p>最后一步是调用close()方法关闭文件。<strong>文件使用完毕后必须关闭</strong>，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的</p><p>由于文件读写都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以为了保证无论是否出错都能够正确地关闭文件，我们可以使用try…finally来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    file_object = open(<span class="string">'/Users/bowenkei/Desktop/Test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(file_object.read())</span><br><span class="line">    </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> file_object:</span><br><span class="line">        file_object.close()</span><br></pre></td></tr></table></figure><p>上述操作更好的方法是使用Python的with语句来自动帮助我们调用close()方法： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/bowenkei/Desktop/Test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    print(file_object.read())</span><br></pre></td></tr></table></figure><p>read()：会一次性读取文件的所有内容</p><p>read(size)：每次最多读取size个字节的内容，可以反复调用</p><p>readline()：每次读取一行内容</p><p> readlines()：一次读取所有内容并按行返回list。</p><p>如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便</p><p>####file_like object</p><p>像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like object。除了file外，还可以是内存中的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</p><p>StringIO就是在内存中创建的file-like object，常用作临时缓冲。</p><h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>要读取二进制文件，比如图片、视频，用’rb’模式打开即可</p><h4 id="字符编码-1"><a href="#字符编码-1" class="headerlink" title="字符编码"></a>字符编码</h4><p>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如GBK编码的文件如下读取： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/bowenkei/Desktop/GBK.txt'</span>, encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    print(file_object.read())</span><br></pre></td></tr></table></figure><p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/bowenkei/Desktop/GBK.txt'</span>, encoding=<span class="string">'gbk'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    print(file_object.read())</span><br></pre></td></tr></table></figure><h4 id="写入文件时，只需要使用相应的’w’和’wb’即可"><a href="#写入文件时，只需要使用相应的’w’和’wb’即可" class="headerlink" title="写入文件时，只需要使用相应的’w’和’wb’即可"></a>写入文件时，只需要使用相应的’w’和’wb’即可</h4><p><strong>‘a’模式可以实现往一个文件中添加内容而不清空原有内容</strong></p><p>下面是各种模式： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghkxpm1o4vj30u00zx4do.jpg" alt="image-20200809223545474"></p><h3 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h3><h4 id="StringIO：-在内存中读写str"><a href="#StringIO：-在内存中读写str" class="headerlink" title="StringIO： 在内存中读写str"></a>StringIO： 在内存中读写str</h4><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">''</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue()) <span class="comment"># 用于获得写入后的str</span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h4 id="BytesIO-实现了在内存中读写bytes："><a href="#BytesIO-实现了在内存中读写bytes：" class="headerlink" title="BytesIO: 实现了在内存中读写bytes："></a>BytesIO: 实现了在内存中读写bytes：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>Python内置的os可以直接调用操作系统提供的借口函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入os模块之后，使用os.name可以获得操作系统类型</span></span><br><span class="line"><span class="comment"># 如果是posix，说明系统是Linux、Unix或Mac OS X，如果是nt，就是Windows系统。</span></span><br><span class="line"><span class="comment"># 要获取详细的系统信息，可以调用uname()函数：</span></span><br><span class="line"><span class="comment"># 注意uname()函数在Windows上不提供，也就是说，os模块的某些函数是跟操作系统相关的。</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">print(os.name)</span><br><span class="line">print(os.uname())</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在操作系统中定义的环境变量，全部在os.environ这个变量中，可以直接查看： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看变量</span></span><br><span class="line">os.environ</span><br><span class="line"><span class="comment"># 获取某个环境变量的值</span></span><br><span class="line">os.emviron.get(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><h3 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><p>操作文件和目录的函数一部分放在os模块中，一部分放在o s.path模块中。</p><p>查看、创建和删除目录 ：</p><ul><li><p>把新目录的完整路径表示出来： os.path.join(‘’, ‘’)</p></li><li><p>创建一个目录： os.mkdir(‘’)</p></li><li><p>删除一个目录: os.rmdir(‘’)</p></li><li><p>拆分路径： os.path.split()</p></li><li><p>拆分路径之分离文件名和后缀： os.path.splittext()</p></li><li><p>重命名： os.rename(‘’)</p></li><li><p>删掉文件： os.remove(‘’)</p></li><li><p>列出当前目录下的所有文件： os.listdir()</p></li><li><p>判断是否是目录： os.path.isdir()</p></li></ul><p><strong>把两个路径合为一个时，通过os.path.join()可以正确处理不同操作系统的路径分隔符</strong></p><p><strong>拆分路径时，不要直接去拆字符串，要通过os.path.split()，这样就可以baggie路径分成两部分，后一部分总是最后级别的目录或文件名</strong></p><p><strong>合并、拆分路径的函数并不是要求目录和文件要真实存在，它们只对字符串尽心操作。</strong></p><p>复制文件的函数在os中不存在，因为复制文件并非由操作系统提供的系统调用</p><p>shutil模块是os的补充，其中提供了包括copy file()在内的多个函数</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>我们把变量从内存中变成可存储或可传输的过程称之为序列化，在Python中称为pickling，在Java中称为serialization。</p><p>序列化之后，我们就可以把序列化后的内容写入磁盘或者通过网络传输到别的机器上</p><p>把变量内容从序列化的对象重新读取到内存里称之为反序列化，即unpickling.</p><p>Python提供了pickle模块来实现序列化。</p><p><code>pickle.dumps()</code>方法把任意对象序列化成一个<code>bytes</code>，然后，就可以把这个<code>bytes</code>写入文件。或者用另一个方法<code>pickle.dump()</code>直接把对象序列化后写入一个file-like Object</p><p>由反序列化得到的变量和原来的变量是完全不相干的对象，它们只是内容相同而已</p><p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据</p><p>*<em>小总结： *</em></p><p><strong>pickle.dumps() and pickle.loads()都是将一个byte写入文件</strong></p><p>pickle.dump() and pickle.load()都是将一个file-like-Object写入文件</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，例如XML，但是JOSN更好。因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。</p><p>JSON和Python内置的数据类型对应如下： </p><table><thead><tr><th align="right">JSON</th><th>Python</th></tr></thead><tbody><tr><td align="right">{}</td><td>dict</td></tr><tr><td align="right">[]</td><td>list</td></tr><tr><td align="right">“string”</td><td>str</td></tr><tr><td align="right">1234.56</td><td>int或float</td></tr><tr><td align="right">true/false</td><td>True/False</td></tr><tr><td align="right">null</td><td>None</td></tr><tr><td align="right"></td><td></td></tr></tbody></table><p>Python内置了json模块提供了非常完善的Python对象到JSON格式的转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h3><p>将class对象序列化为JSON的{} + 将JSON反序列化为class对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 将class对象序列为JSON的&#123;&#125; 和 反序列化class对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">'bowenkei'</span>, age=<span class="number">20</span>, sex=<span class="string">'man'</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = SuperMan()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">superman2dict</span><span class="params">(super)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'name'</span>: super.name,</span><br><span class="line">        <span class="string">'age'</span>: super.age,</span><br><span class="line">        <span class="string">'sex'</span>: super.sex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2super</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> SuperMan(dict[<span class="string">'name'</span>], dict[<span class="string">'age'</span>], dict[<span class="string">'sex'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(json.dumps(s, default=superman2dict))</span><br><span class="line">print(json.dumps(s, default=<span class="keyword">lambda</span> obj: obj.__dict__))</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">'&#123;"name": "lei bo wen", "age": 20, "sex": "man"&#125;'</span></span><br><span class="line">print(json.loads(json_str, object_hook=dict2super))</span><br><span class="line">new_superman = json.loads(json_str, object_hook=dict2super)</span><br><span class="line">print(new_superman.name)</span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix/linux操作系统提供了一个fork()系统调用。普通的函数调用，返回一次，fork()调用一次，返回两次，因为操作系统自动把当前进程(称为父进程)复制了一份(称为子进程)，然后分别在父进程和子进程内返回。子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><p>Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">"Process (%s)  start ... "</span> % os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"I am child process (%s) and my parent is %s."</span> % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"I (%s) just created a child process (%s)."</span> % (os.getpid(), pid))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    os.getpid(): 获取当前进程id</span></span><br><span class="line"><span class="string">    os.getppid()： 获取父进程id</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>####multiprocessing</p><p>multiprocessing模块提供了一个Process类来代表一个进程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Run child process %s (%s) ..."</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"Parent process %s ."</span> % os.getpid())</span><br><span class="line">    p  = Process(target=run_proc, args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">"Child process will start."</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">"Child process end."</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">创建子进程时，使用Process传入一个执行函数和函数的参数以创建一个实例。用start()方法启动；join()方法可以等待子进程结束后再继续往下运行。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>####Pool</p><p>用进程池的方式批量创建大量子进程： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Run task %s (%s)"</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"Task %s runs %0.2f"</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"Parent process %s."</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">"All subprocesses done."</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，这是因为Pool的默认大小在我的电脑上是4，</span></span><br><span class="line"><span class="string">因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：p = Pool(5)就可以同时跑5个进程。</span></span><br><span class="line"><span class="string">Pool的默认大小是CPU的核心数。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>####子进程</p><p>很多时候，子进程并不是自身，而是一个外部进程。创建子进程后，还需要控制子进程的输入和输出</p><p><strong>subprocess</strong>模块用于启动一个子进程，然后控制其输入和输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">print(<span class="string">'$ nslookup www.python.org'</span>)</span><br><span class="line">r = subprocess.call([<span class="string">'nslookup'</span>, <span class="string">'www.python.org'</span>])</span><br><span class="line">print(<span class="string">'Exit code:'</span>, r)</span><br></pre></td></tr></table></figure><p>子进程需要输入，可以使用communicate()方法输入(下面代码没有看懂，希望有大神指点指点)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">print(<span class="string">'$ nslookup'</span>)</span><br><span class="line">p = subprocess.Popen([<span class="string">'nslookup'</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(<span class="string">b'set q=mx\npython.org\nexit\n'</span>)</span><br><span class="line">print(output.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">'Exit code:'</span>, p.returncode)</span><br></pre></td></tr></table></figure><p>####进程间通信</p><p>Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据，以实现Process之间的通信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"><span class="comment"># 以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据</span></span><br><span class="line"><span class="comment"># 写数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"Process to write: %s"</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"Process to read:%s "</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">         value = q.get(<span class="literal">True</span>)</span><br><span class="line">         print(<span class="string">"Get %s from queue"</span> % value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动子进程pw，写入：</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取：</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程是死循环，只能强行终止：</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多任务可以由多进程完成，也可以由一个进程内的多进程完成。</p><p>进程是由若干个线程组成的，一个进程至少有一个线程</p><p>线程是操作系统直接支持的执行单元。</p><p>Python的线程是真正的Posix Thread，而不是模拟出来的线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python中 _thread和threading用于多线程。其中_thread是低级模块，threading是高级模块，它对_thread进行了封装。</span></span><br><span class="line"><span class="comment"># 启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行</span></span><br><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"thread %s is running ... "</span> % threading.current_thread().name)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n =  n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">"thread %s &gt;&gt;&gt; %s "</span> % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"thread %s ended"</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'thread %s is running... '</span> % threading.current_thread().name)</span><br><span class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>) <span class="comment"># 这里指定了子线程的名字</span></span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">"thread %s ended."</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure><p>任何进程默认会启动一个线程，这个线程称为主线程(MainThread)，Python的threading模块下面的current_thread()函数用于返回当前线程的实例。子线程的名字在创建时指定。名字仅仅在打印时用来显示，完全没有其他任何意义。默认情况下，Python自动给线程命名为Thread-1, Thread-2……</p><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p><strong>线程的调度是由操作系统决定的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有使用Lock之前：</span></span><br><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance -  n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>, ))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>, ))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure><p>两个线程同时一存一取，就可能导致余额不对，你肯定不希望你的银行存款莫名其妙地变成了负数，所以，我们必须确保一个线程在修改<code>balance</code>的时候，别的线程一定不能改。</p><p>如果我们要确保<code>balance</code>计算正确，就要给<code>change_it()</code>上一把锁，当某个线程开始执行<code>change_it()</code>时，我们说，该线程因为获得了锁，因此其他线程不能同时执行<code>change_it()</code>，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过<code>threading.Lock()</code>来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance -  n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        <span class="comment"># 获取锁</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 释放锁</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>, ))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>, ))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure><p>使用Lock的优缺点： </p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p><p>Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><h3 id="Threadlocal"><a href="#Threadlocal" class="headerlink" title="Threadlocal"></a>Threadlocal</h3><p>用一个全局<code>dict</code>存放所有的<code>Student</code>对象，然后以<code>thread</code>自身作为<code>key</code>获得线程对应的<code>Student</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现</span></span><br><span class="line"><span class="keyword">from</span> ReviewPython3 <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">global_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">std_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    std = Student(name)</span><br><span class="line">    <span class="comment"># 把std放到全局变量global_dict中：</span></span><br><span class="line">    global_dict[threading.current_thread()] = std</span><br><span class="line">    do_task1()</span><br><span class="line">    do_task2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 不传入std，而是根据当前的线程查找</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task2</span><span class="params">()</span>:</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br></pre></td></tr></table></figure><p>用Threadlocal替代上面自己创建的dict</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前线程关联的student</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(<span class="string">"Hello, %s (in %s)"</span> % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 绑定ThreadLocal的student：</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=process_thread, args=(<span class="string">'Alice'</span>, ), name=<span class="string">'Thread-A'</span>)</span><br><span class="line">t2 = threading.Thread(target=process_thread, args=(<span class="string">'Bob'</span>, ), name=<span class="string">'Thread-B'</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><p>全局变量<code>local_school</code>就是一个<code>ThreadLocal</code>对象，每个<code>Thread</code>对它都可以读写<code>student</code>属性，但互不影响。你可以把<code>local_school</code>看成全局变量，但每个属性如<code>local_school.student</code>都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，<code>ThreadLocal</code>内部会处理。</p><p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，不但可以用<code>local_school.student</code>，还可以绑定其他变量，如<code>local_school.teacher</code>等等。</p><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p><p>###进程 VS 线程</p><h4 id="Master-Worker模式"><a href="#Master-Worker模式" class="headerlink" title="Master-Worker模式"></a>Master-Worker模式</h4><p>Master负责分配任务，Worker负责执行任务，因此，多任务环境下，通常是一个Master，多个Worker。</p><p>如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p><p>如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。</p><h4 id="多线程和多进程的优劣"><a href="#多线程和多进程的优劣" class="headerlink" title="多线程和多进程的优劣"></a>多线程和多进程的优劣</h4><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是一种用来匹配字符串的有力的武器</p><p>在正则表达式中，直接给出字符，就是精确匹配。</p><ul><li>\d:one number</li><li>\w: one letter or one number</li><li>.: everything</li><li>*:任意个字符(包括0个)</li><li>+： 至少一个字符</li><li>？： 0个或1个字符</li><li>{n}:n个字符</li><li>{n， m}: n-m个字符</li><li>\s: 可以匹配一个空格(也包括Tab等空白符)</li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>更精确地匹配，使用[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- [0-9a-zA-Z_]: 匹配一个数字，字母，或者下划线</span><br><span class="line"></span><br><span class="line">- [0-9a-zA-Z_]+:匹配至少由一个数字、字母或者下划线组成的字符串</span><br><span class="line"></span><br><span class="line">- [a-zA-Z_][0-9a-zA-Z_]&#123;0, 19&#125;: 更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</span><br><span class="line">- A|B: 可以匹配A或B</span><br><span class="line">- ^: 表示行的开头(^\d：以数字开头)</span><br><span class="line">_ $: 表示行的结束(\d$：以数字结束)</span><br></pre></td></tr></table></figure><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 使用match方法判断正则表达式是否匹配</span></span><br><span class="line">is_true = re.match(<span class="string">r'bowen[a-zA-Z]&#123;3&#125;'</span>, <span class="string">'bowenkei'</span>)</span><br><span class="line">print(is_true)</span><br><span class="line"><span class="comment"># 如果匹配，会返回一个Match对象，否则返回None。</span></span><br></pre></td></tr></table></figure><p>常见的判断方法： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">yourname = input(<span class="string">"Enter your name: "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">r'bowen[a-zA-Z]&#123;3&#125;$'</span>, yourname):</span><br><span class="line">    print(<span class="string">"Your name is true."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Sorry, your name is not right."</span>)</span><br></pre></td></tr></table></figure><h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><p>用正则表达式切分字符串比用固定的字符更灵活。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通的切分代码：</span></span><br><span class="line">print(<span class="string">'a  b     c'</span>.split(<span class="string">' '</span>)) <span class="comment"># ['a', '', 'b', '', '', '', '', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式</span></span><br><span class="line">print(<span class="string">'a  b     c'</span>.split(<span class="string">' '</span>))  <span class="comment"># ['a', '', 'b', '', '', '', '', 'c']</span></span><br><span class="line">print(re.split(<span class="string">r'\s+'</span>, <span class="string">'a  b     c'</span>))  <span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">print(re.split(<span class="string">r'[\s,]+'</span>, <span class="string">'a,b,c, d'</span>))  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br><span class="line">print(re.split(<span class="string">r'[\s,;]+'</span>, <span class="string">'a,b;c, d'</span>))  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组(Group)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组</span></span><br><span class="line">m = re.match(<span class="string">r'^([0-9]&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>, <span class="string">'012-456789'</span>)</span><br><span class="line">print(m)</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br><span class="line">print(m.group(<span class="number">1</span>))</span><br><span class="line">print(m.group(<span class="number">2</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">012-456789</span></span><br><span class="line"><span class="string">012</span></span><br><span class="line"><span class="string">456789</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 注意到group(0)始终是原始字符串。</span></span><br><span class="line"><span class="comment"># 匹配时间： 19:05:30</span></span><br><span class="line">time = <span class="string">'19:05:30'</span></span><br><span class="line"></span><br><span class="line">m = re.match(<span class="string">r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$'</span>, time)</span><br><span class="line"></span><br><span class="line">print(m.groups())</span><br></pre></td></tr></table></figure><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>使用正则表达式时，re模块内部会做下面两件事： </p><ul><li>编译正则表达式</li><li>用编译后的正则表达式去匹配字符串</li></ul><p>如果一个正则表达式要重复使用上千次，出于效率的考虑，可以预编译该正则表达式并保存下来，接下来重复使用的时候就可以跳过编译这个步骤，直接匹配了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">re_name = re.compile(<span class="string">r'bowen[a-zA-Z]&#123;3&#125;'</span>)</span><br><span class="line"></span><br><span class="line">yourname =  <span class="string">'bowenkei'</span></span><br><span class="line">yourname1 =  <span class="string">'bowenlei'</span></span><br><span class="line"></span><br><span class="line">print(re_name.match(yourname))</span><br><span class="line">print(re_name.match(yourname1))</span><br></pre></td></tr></table></figure><h3 id="小节练习："><a href="#小节练习：" class="headerlink" title="小节练习："></a>小节练习：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1.1 请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email</span></span><br><span class="line"><span class="string">1.2 版本二可以提取出带名字的Email地址</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># Version 1</span></span><br><span class="line"><span class="comment"># someone@gmail.com</span></span><br><span class="line"><span class="comment"># bill.gates@microsoft.com</span></span><br><span class="line">email_1 = re.compile(<span class="string">r'^[\w\.]+@[\w]+\.com$'</span>)</span><br><span class="line">print(email_1.match(<span class="string">'someone@gmail.com'</span>))</span><br><span class="line">print(email_1.match(<span class="string">'bill.gates@microsoft.com'</span>))</span><br><span class="line">print(email_1.match(<span class="string">'nianchucqc@gmail.com'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Version 2</span></span><br><span class="line"><span class="comment"># &lt;Tom Paris&gt; tom@voyager.org</span></span><br><span class="line"></span><br><span class="line">email_2 = re.compile(<span class="string">r'^(&lt;)([\w\.\s]+)(&gt;)(\s[\w\.\s]+@[\w\.\s]+)$'</span>)</span><br><span class="line">print(email_2.match(<span class="string">'&lt;Tom Paris&gt; tom@voyager.org'</span>).group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h1 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h1><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">n = datetime.now()</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">print(type(n)) <span class="comment"># 获得datetime类型</span></span><br><span class="line"><span class="comment"># 注意，使用的是datetime包下的datetime类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定日期和时间</span></span><br><span class="line">dt = datetime(<span class="number">2008</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">print(dt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime转换为timestamp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在计算机中，时间实际上使用数字表示的。我们把1970年1月1日 00:00:00 UTC+00:00时区的时刻称为epoch time,记为0。</span></span><br><span class="line"><span class="string">1970年以前的时间timestamp为负数。</span></span><br><span class="line"><span class="string">当前时间就是相对于epoch time的秒数，称为timestamp</span></span><br><span class="line"><span class="string">可以认为： </span></span><br><span class="line"><span class="string">timestamp = 0 = 1970-1-1 00:00:00 UTC+0:00</span></span><br><span class="line"><span class="string">对应的北京时间就是： </span></span><br><span class="line"><span class="string">timestamp = 0 = 1970-1-1 08:00:00 UTC+8:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可见timestamp的值与时区毫无关系，因为timestamp一旦确定，其UTC时间就确定了，转换到任意时区的时间也是完全确定的，</span></span><br><span class="line"><span class="string">这就是为什么计算机存储的当前时间是以timestamp表示的，因为全球各地的计算机在任意时刻的timestamp都是完全相同的（假定时间已校准）。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">tt = dt.timestamp()</span><br><span class="line">print(tt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp是一个浮点数，后面的小数表示毫秒</span></span><br><span class="line"><span class="comment"># Java和JavaScript的timestamp使用整数表示毫秒数，只需要将其timestamp除以1000就得到Python的浮点数表示方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timestamp转换为datetime</span></span><br><span class="line">dt_1 = datetime.fromtimestamp(tt)</span><br><span class="line">print(dt_1)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">timestamp没有时区，但是datetime有时区。</span></span><br><span class="line"><span class="string">fromtimestamp默认转换为本地时间，也就是操作系统设置的时间。</span></span><br><span class="line"><span class="string">要想转换为UTC标准时间可以将其替换为utcformtimestamp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">## 获得08年奥运会举办时标准UTC时间</span></span><br><span class="line">dt_2 = datetime.utcfromtimestamp(tt)</span><br><span class="line">print(dt_2)</span><br><span class="line"><span class="comment"># 可见北京时间时间比UTC标准时间多了8个小时</span></span><br><span class="line">print(<span class="string">"-------------------------------"</span>)</span><br><span class="line"><span class="comment"># str转换为datetime(转换后的时间没有时区信息) —— 使用strptime()</span></span><br><span class="line">copy = datetime.strptime(<span class="string">'200888200808'</span>, <span class="string">'%Y%m%d%H%M%S'</span>)</span><br><span class="line">print(copy)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注意： </span></span><br><span class="line"><span class="string">year: Y</span></span><br><span class="line"><span class="string">month: m</span></span><br><span class="line"><span class="string">day: d</span></span><br><span class="line"><span class="string">hour: H</span></span><br><span class="line"><span class="string">minute: M</span></span><br><span class="line"><span class="string">second: S</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">"-------------------------------"</span>)</span><br><span class="line"><span class="comment"># datetime转换为str —— 使用strftime()</span></span><br><span class="line">print(n.strftime(<span class="string">'%A, %B, %d %H:%M:%S'</span>))</span><br><span class="line">print(<span class="string">"-------------------------------"</span>)</span><br><span class="line"><span class="comment"># datetime加减</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对时间和日期进行加减实际上就是把datetime往后或者往前计算，得到新的datetime。在导入timedelta这个类之后，加减可以直接使用+,-运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">print(now)</span><br><span class="line"><span class="comment"># 时间加</span></span><br><span class="line">print(now + timedelta(hours=<span class="number">8</span>))</span><br><span class="line"><span class="comment"># 时期减</span></span><br><span class="line">print(now - timedelta(days=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 时间加减</span></span><br><span class="line">print(now + timedelta(days=<span class="number">3</span>, hours=<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------------------------"</span>)</span><br><span class="line"><span class="comment"># 本地时间转换为UTC时间</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一个datetime类型有一个时区属性tzinfo，但是默认为None，所以无法区分这个datetime到底是哪个时区，除非强行给datetime设置一个时区</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">now = datetime.now()</span><br><span class="line">print(now)</span><br><span class="line"><span class="comment"># 创建时区UTC+8</span></span><br><span class="line">timezone_utc_8 = timezone(timedelta(hours=<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">datetime = now.replace(tzinfo=timezone_utc_8)</span><br><span class="line">print(datetime)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------------------------"</span>)</span><br><span class="line"><span class="comment"># 时区转换</span></span><br><span class="line"><span class="comment"># 拿到utc时间，并设置时区为utc+0.00</span></span><br><span class="line">utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line">print(<span class="string">'UTC时间：'</span>,utc_dt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  astimezone()将时区转换为北京时间</span></span><br><span class="line">beijing_date = datetime.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line">print(<span class="string">'北京时间：'</span>,beijing_date)</span><br><span class="line"><span class="comment"># astimezone()转换为东京时间</span></span><br><span class="line">dongjing_date = datetime.astimezone(timezone(timedelta(hours=<span class="number">9</span>)))</span><br><span class="line">print(<span class="string">'东京时间：'</span>, dongjing_date)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">时区转换的关键在于，拿到一个datetime时，要获知其正确的时区，然后强制设置时区，作为基准时间。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用带时区的datetime，通过astimezone()方法，可以转换到任意时区。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注：不是必须从UTC+0:00时区转换到其他时区，任何带时区的datetime都可以正确转换，例如上述bj_dt到tokyo_dt的转换。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>下面截图是Python官方关于时间、日期转换的介绍：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghq7s10uwjj30u01ck1er.jpg" alt="image-20200814121200406"></p><h2 id="小节练习"><a href="#小节练习" class="headerlink" title="小节练习"></a>小节练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">假设你获取了用户输入的日期和时间如2015-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是str，请编写一个函数将其转换为timestamp：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># answer</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone, datetime, timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(dt_str, tz_str)</span>:</span></span><br><span class="line">    dt_com = re.compile(<span class="string">r'UTC([+|-][\d]&#123;1,2&#125;):00'</span>)</span><br><span class="line">    tz = dt_com.match(tz_str).group(<span class="number">1</span>)</span><br><span class="line">    int_tz = int(tz)</span><br><span class="line">    set_timezone = timezone(timedelta(hours=int_tz))</span><br><span class="line">    str2dt = datetime.strptime(dt_str, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    str2dt_new = str2dt.replace(tzinfo=set_timezone) <span class="comment"># 使用replace之后必须复制给另外一个变量，否则tzinfo无法修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str2dt_new.timestamp()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">t1 = to_timestamp(<span class="string">'2015-6-1 08:10:30'</span>, <span class="string">'UTC+7:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</span><br><span class="line">t2 = to_timestamp(<span class="string">'2015-5-31 16:10:30'</span>, <span class="string">'UTC-09:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t2 == <span class="number">1433121030.0</span>, t2</span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><p>Collections 是Python内建的一个集合模块，提供了很多有用的集合类</p><h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># namedtuple</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(p.x)</span><br><span class="line">print(p.y)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">namedtuple是一个函数，用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素</span></span><br><span class="line"><span class="string">下面验证Point的类型：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(isinstance(p, Point))</span><br><span class="line">print(isinstance(Point, tuple))</span><br><span class="line">print(isinstance(p, tuple))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面使用namedtuple定义一个圆</span></span><br><span class="line">Circle = namedtuple(<span class="string">'Circle'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'radius'</span>])</span><br><span class="line"><span class="comment"># 创建一个圆形</span></span><br><span class="line">circle = Circle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"The center of the circle is (%d, %d), and its radius is %s "</span> % (circle.x, circle.y, circle.radius))</span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># namedtuple</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(p.x)</span><br><span class="line">print(p.y)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">namedtuple是一个函数，用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素</span></span><br><span class="line"><span class="string">下面验证Point的类型：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(isinstance(p, Point))</span><br><span class="line">print(isinstance(Point, tuple))</span><br><span class="line">print(isinstance(p, tuple))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面使用namedtuple定义一个圆</span></span><br><span class="line">Circle = namedtuple(<span class="string">'Circle'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'radius'</span>])</span><br><span class="line"><span class="comment"># 创建一个圆形</span></span><br><span class="line">circle = Circle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"The center of the circle is (%d, %d), and its radius is %s "</span> % (circle.x, circle.y, circle.radius))</span><br></pre></td></tr></table></figure><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># defaultdict</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict</span></span><br><span class="line"><span class="string">默认值是调用函数返回的，函数在创建defaultdict对象时传入</span></span><br><span class="line"><span class="string">除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">'The default value'</span>)</span><br><span class="line">dd[<span class="string">'key1'</span>] = <span class="string">' The value of key1'</span></span><br><span class="line">print(dd[<span class="string">'key1'</span>])  <span class="comment"># The value of key1</span></span><br><span class="line">print(dd[<span class="string">'key2'</span>])  <span class="comment"># The default value</span></span><br></pre></td></tr></table></figure><h3 id="orderedDict"><a href="#orderedDict" class="headerlink" title="orderedDict"></a>orderedDict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OrderedDict</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dict是无序的，如果要保持Key的顺序，可以使用OrderedDict;</span></span><br><span class="line"><span class="string">OrderedDict的Key会按照插入的顺序排列，不是Key本身排序；</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">d = dict(a=<span class="number">1</span>, c = <span class="number">3</span>, b = <span class="number">2</span>)  <span class="comment"># &#123;'a': 1, 'b': 2, 'c': 3&#125; ——--- Python3.6以后dict也是有序的了。</span></span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 实现Orderedict</span></span><br><span class="line">d1 = OrderedDict(d)</span><br><span class="line">print(d1)</span><br><span class="line"><span class="comment"># OrderedDict可以实现一个FIFO(先进先出)的dict，当容量超出限制时，先删除最早添加的Key：</span></span><br><span class="line"><span class="comment"># 下面这个实现没有怎么看懂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastUpdatedOrderedDict</span><span class="params">(OrderedDict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        super(LastUpdatedOrderedDict, self).__init__()</span><br><span class="line">        self.__capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        containsKey = <span class="number">1</span> <span class="keyword">if</span> key <span class="keyword">in</span> self <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(self) - containsKey &gt;= self.__capacity:</span><br><span class="line">            last = self.popitem(last=<span class="literal">False</span>)</span><br><span class="line">            print(<span class="string">'remove'</span>, last)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> containsKey:</span><br><span class="line">            <span class="keyword">del</span> self[key]</span><br><span class="line">            print(<span class="string">'set'</span>, (key, value))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'add'</span>, (key, value))</span><br><span class="line">        OrderedDict.__setitem__(self, key, value)</span><br></pre></td></tr></table></figure><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Counter： 一个简单的计数器</span></span><br><span class="line"><span class="comment"># 使用Counter统一字符串中字符出现的次数</span></span><br><span class="line"><span class="comment"># Counter就是一个dict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter()</span><br><span class="line">s = <span class="string">'today is a good day, it\'s a good time to learn something'</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">    c[ch] = c[ch] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>Base是一种用64个字符来表示任意二进制数据的方法。</p><p>要让记事本这样的文本处理软件能处理二进制数据，就需要一个二进制到字符串的转换方法。</p><p>Base64 是一种最常见的二进制编码方法</p><p>Python内置的base64可以直接进行base64的解编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base64</span></span><br><span class="line"><span class="comment"># 解编码</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">bs1 = base64.b64encode(<span class="string">b'binary string'</span>)</span><br><span class="line">print(bs1)</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">bs2 = base64.b64decode(bs1)</span><br><span class="line">print(bs2)</span><br></pre></td></tr></table></figure><p>由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数。</p><p>一种叫做“Url safe”的base64编码，其实就是把字符+和/分别编程-和_:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用url-safe的base64编码</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种"url safe"的base64编码，其实就是把字符+和/分别变成-和_</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">bs3 = base64.b64encode(<span class="string">b'i\xb7\x1d\xfb\xef\xff'</span>)</span><br><span class="line">print(bs3)  <span class="comment"># b'abcd++//' ---- 字符+和/没有改变</span></span><br><span class="line">bs4 = base64.urlsafe_b64encode(<span class="string">b'i\xb7\x1d\xfb\xef\xff'</span>)</span><br><span class="line">print(bs4)  <span class="comment"># 字符+和/分别变成了-和_</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">base64是一种通过查表的编码方法，不能用于加密，即使使用自定义的编码表也不行</span><br><span class="line">Base适用于小段内容的编码，比如数字证书签名、Cookie的内容等。</span><br><span class="line">由于=字符也可能出现在Base64编码中，但=用在URL、Cookie里面会造成歧义，所以，很多Base64编码后会把=去掉：</span><br><span class="line"># 标准Base64:</span><br><span class="line">&apos;abcd&apos; -&gt; &apos;YWJjZA==&apos;</span><br><span class="line"># 自动去掉=:</span><br><span class="line">&apos;abcd&apos; -&gt; &apos;YWJjZA&apos;</span><br><span class="line">去掉=后怎么解码呢？因为Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数，因此，需要加上=把Base64字符串的长度变为4的倍数，就可以正常解码了。</span><br></pre></td></tr></table></figure><h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h2 id="join"><a href="#join" class="headerlink" title=".join()"></a>.join()</h2><p>用于将序列中的元素以指定的字符连接生成一个新的字符</p><p>用法： </p><p>Str.join(sequence)</p><ul><li>Sequence –  要连接的元素序列</li></ul><h2 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize ()"></a>capitalize ()</h2><p>-capitalize()方法返回字符串的一个副本，只有它的第一个字母大写。对于8位的字符串，这个方法与语言环境相关。</p><p>用法如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.capitalize()</span><br><span class="line"><span class="comment"># 上述方法并不会改变str中的内容，只是会返回一个首字母大写的副本</span></span><br></pre></td></tr></table></figure><h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><p>index(content)：用于判断给定字符的下标</p><h2 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h2><p>用于移除字符串头尾指定的字符(默认为空格或换行符)或字符序列</p><p>*<em>注意： *</em>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符</p><h2 id="bytes"><a href="#bytes" class="headerlink" title="bytes()"></a>bytes()</h2><p><strong>描述：</strong></p><p>bytes函数返回一个新的bytes对象，该对象是一个0&lt;=x&lt;256区间内的整数不可变序列。它是bytearray的不可变版本。</p><p>语法如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class bytes([source[, encoding[, errors]]])</span><br></pre></td></tr></table></figure><p>参数解释： </p><ul><li>如果source为整数，则返回一个长度为source的初始化数组；</li><li>如果source为字符串，则按照指定的encoding将字符串转换为字节序列；</li><li>如果source为可迭代类型，则元素必须为[0.256]中的整数</li><li>如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray;</li><li>如果没有输入任何参数，默认就是初始化数组为0个元素</li></ul><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>Python提供了一个struct模块来解决bytes和其他二进制数据的转换</p><p>struct的pack函数把任意数据类型编程bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># struct</span></span><br><span class="line"><span class="comment"># struct的pack函数把任意数据类型变成bytes</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">s = struct.pack(<span class="string">'&gt;I'</span>, <span class="number">10240099</span>)</span><br><span class="line">print(s)  <span class="comment"># b'\x00\x9c@c'</span></span><br><span class="line"><span class="comment"># 上面&gt;表示： 字节顺序是big-endian，也就是网络序；I表示4字节无符号整数</span></span><br><span class="line"><span class="comment"># 后面的参数个数要和处理指令一致</span></span><br><span class="line"><span class="comment"># unpack把bytes变成相应的数据类型</span></span><br><span class="line">four_bytes_int, two_bytes_int = struct.unpack(<span class="string">'&gt;IH'</span>, <span class="string">b'\xf0\xf0\xf0\xf0\x80\x80'</span>)</span><br><span class="line">print(four_bytes_int)  <span class="comment"># 4042322160</span></span><br><span class="line">print(two_bytes_int)  <span class="comment"># 32896</span></span><br><span class="line"><span class="comment"># H表示2字节无符号整数</span></span><br></pre></td></tr></table></figure><h3 id="小节练习-1"><a href="#小节练习-1" class="headerlink" title="小节练习"></a>小节练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># 请编写一个bmpinfo.py，可以检查任意文件是否是位图文件，如果是，打印出图片大小和颜色数。</span></span><br><span class="line">s = <span class="string">b'\x42\x4d\x38\x8c\x0a\x00\x00\x00\x00\x00\x36\x00\x00\x00\x28\x00\x00\x00\x80\x02\x00\x00\x68\x01\x00\x00\x01\x00\x18\x00'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bmpinfo</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(s, bytes):</span><br><span class="line">        s = bytes(s, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>:<span class="number">2</span>] == (<span class="string">b'BM'</span> <span class="keyword">or</span> <span class="string">b'BA'</span>):</span><br><span class="line">        result = struct.unpack(<span class="string">'&lt;ccIIIIIIHH'</span>, s)</span><br><span class="line">        photo_size = result[<span class="number">-4</span>:<span class="number">-2</span>]</span><br><span class="line">        print(<span class="string">"此位图的大小是：%d x %d"</span> % (photo_size[<span class="number">0</span>], photo_size[<span class="number">1</span>]))</span><br><span class="line">        print(<span class="string">"此位图的颜色数是：%d"</span> % result[len(result) - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"抱歉， 这不是一个位图。"</span>)</span><br><span class="line"></span><br><span class="line">bmpinfo(s)</span><br><span class="line">s1 = <span class="string">'fdsfsdfsdfdsf'</span></span><br><span class="line">bmpinfo(s1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">b'BM'</span></span><br><span class="line"><span class="string">此位图的大小是：640 x 360</span></span><br><span class="line"><span class="string">此位图的颜色数是：24</span></span><br><span class="line"><span class="string">b'fd'</span></span><br><span class="line"><span class="string">抱歉， 这不是一个位图。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h2><p>Python的hashlib提供了常见的摘要算法： 如MD5, SHA1等等</p><p>摘要算法： 即哈希算法、散列算法。把任意长度的数据转换为一个长度固定的数据串(通常用16进制的字符串表示)。</p><p>摘要算法就是通过摘要函数对任意长度的数据data计算出固定长度的digest，目的是为了发现原始数据是否被篡改过。</p><p>以MD5为例，计算出一个字符串的MD5值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hashlib</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">MD5是常见的摘要算法，速度很快，生成结果是固定的128bit字节，通常用一个32位的16进制字符串表示。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">sh1 = hashlib.sha1()</span><br><span class="line">sh1.update(<span class="string">'how to use sha1 in '</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">sh1.update(<span class="string">'python hashlib?'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(sh1.hexdigest())</span><br><span class="line"><span class="string">""""</span></span><br><span class="line"><span class="string">SHA1的结果是160bit字节，通常用一个40位的16进制字符串表示</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="摘要算法应用"><a href="#摘要算法应用" class="headerlink" title="摘要算法应用"></a>摘要算法应用</h3><p>任何允许用户登录的网站都会存储用户登录的用户名和口令。</p><p>正确的保存口令的方式是不存储用户的明文口令，而是存储用户口令的摘要</p><p>当用户登录时，首先计算用户输入的明文口令的MD5，然后和数据库存储的MD5对比，如果一致，说明口令输入正确，如果不一致，口令肯定错误。</p><h3 id="小节练习-2"><a href="#小节练习-2" class="headerlink" title="小节练习"></a>小节练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 - 根据用户输入的口令，计算出存储在数据库中的MD5口令：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_md5</span><span class="params">(password)</span>:</span></span><br><span class="line">    s = str(password)</span><br><span class="line">    one_md5 = hashlib.md5()</span><br><span class="line">    one_md5.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> one_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(calc_md5(<span class="string">"todayisaniceday."</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 - 设计一个验证用户登录的函数，根据用户输入的口令是否正确，返回True或False：</span></span><br><span class="line">db = &#123;</span><br><span class="line">    <span class="string">'michael'</span>: <span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,</span><br><span class="line">    <span class="string">'bob'</span>: <span class="string">'878ef96e86145580c38c87f0410ad153'</span>,</span><br><span class="line">    <span class="string">'alice'</span>: <span class="string">'99b1c2188db85afee403b1536010c2c9'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(user, password)</span>:</span></span><br><span class="line">    s = str(password)</span><br><span class="line">    one_md5 = hashlib.md5()</span><br><span class="line">    one_md5.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> one_md5.hexdigest() == db[str(user)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(login(<span class="string">'michael'</span>, <span class="number">123456</span>))</span><br><span class="line">print(login(<span class="string">'bob'</span>, <span class="string">'888888'</span>))</span><br><span class="line">print(login(<span class="string">'alice'</span>, password=<span class="number">123456</span>))</span><br></pre></td></tr></table></figure><p>常用口令的MD5很容易被计算出来，所以，要确保存储的用户口令不是那些已经被计算出来的常用口令的MD5，这一方法通过对原始口令加一个复杂字符串来实现，俗称“加盐”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_mad</span><span class="params">(password)</span>:</span></span><br><span class="line"><span class="keyword">return</span> get_md5(password + <span class="string">'the-Salt'</span>)</span><br></pre></td></tr></table></figure><p>这样只要salt不被黑客知道，即使用户输入简单口令，也很难通过MD5反推口令。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5：</span></span><br><span class="line">salt_value = <span class="string">'the-Salt'</span></span><br><span class="line">db = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    db[username] = get_md5(password + username + salt_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(password)</span>:</span></span><br><span class="line">    s = str(password)</span><br><span class="line">    one_md5 = hashlib.md5()</span><br><span class="line">    one_md5.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> one_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">register(<span class="string">'bob'</span>, <span class="string">'hello world'</span>)</span><br><span class="line">print(db)  <span class="comment"># &#123;'bob': '7fa0c1935fed7e7730be403321f3b04c'&#125;</span></span><br><span class="line">register(<span class="string">'bowenkei'</span>, <span class="string">'today is a good day'</span>)</span><br><span class="line">print(db)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据修改后的MD5算法实现用户登录的验证：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(user, password)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> db[str(user)] == get_md5(str(password) + str(user) + salt_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">print(login(<span class="string">'bob'</span>, <span class="string">'hello world'</span>))</span><br><span class="line">print(login(<span class="string">'bowenkei'</span>, <span class="string">'today is a good day'</span>))</span><br><span class="line">print(login(<span class="string">'bowenkei'</span>, <span class="number">123456</span>))</span><br></pre></td></tr></table></figure><p>*<em>注意： *</em></p><p>摘要算法不是加密算法，不能用于加密，只能用于防篡改，但是它的单向计算性决定了可以在不存储明文口令的情况下验证用户口令</p><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><p>Python的内建模块itertools提供了非常有用的用于操作迭代对象的函数</p><p>“无限”迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count()会创建一个无限迭代器。</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">naturals = itertools.count(<span class="number">100</span>) <span class="comment"># count()括号里面的数字指定了从哪一个数字开始数</span></span><br><span class="line">print(naturals.__next__())</span><br><span class="line">print(naturals.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cycle() —— 会把传入的一个序列无限重复下去</span></span><br><span class="line">abc = itertools.cycle([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span> * <span class="number">2</span>):  <span class="comment"># 这里指定了次数，避免出现死循环</span></span><br><span class="line">    print(abc.__next__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># repeat()负责将一个元素无限重复下去，不过如果提供第二个参数就可以限定重复次数：</span></span><br><span class="line">ns = itertools.repeat(<span class="string">'A'</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> ns:</span><br><span class="line">    print(n)  <span class="comment"># 迭代了三次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限序列虽然可以无限迭代下去，但是通常会通过takenwhile()等函数根据条件判断来截取一个有限的序列：</span></span><br><span class="line">naturals = itertools.count(<span class="number">1</span>)</span><br><span class="line">ns = itertools.takewhile(<span class="keyword">lambda</span> x:x &lt;= <span class="number">10</span>, naturals)</span><br><span class="line">print(ns)</span><br><span class="line">print(list(ns))</span><br></pre></td></tr></table></figure><p>itertools提供的几个迭代器操作函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chain()</span></span><br><span class="line"><span class="comment"># chain()可以把一组迭代对象串联起来，形成一个更大的迭代器</span></span><br><span class="line">new_iter = itertools.chain(<span class="string">'ABC'</span>, <span class="string">'XYZ'</span>)</span><br><span class="line">print(list(new_iter))  <span class="comment"># ['A', 'B', 'C', 'X', 'Y', 'Z']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proupby()</span></span><br><span class="line"><span class="comment"># groupby把迭代器中相邻的重复元素挑出来放在一起：</span></span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">'AAABBBBBBDDDDCCCCAAA'</span>):</span><br><span class="line">    print(key, list(group))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向groupby中传入一个函数可以实现忽略大小写：</span></span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">'AAABBBBbcdaabccBBDDDDCCCCAAA'</span>, <span class="keyword">lambda</span> c: c.upper()):</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure><h2 id="XML-解析"><a href="#XML-解析" class="headerlink" title="XML(解析)"></a>XML(解析)</h2><p>操作XML有两种方法：DOM和SAX。正常情况下，优先考虑SAX，因为DOM实在太占内存</p><p>解析XML时，我们关心三件事情： start_element, end_element和char_data。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="Python-变量前加或者"><a href="#Python-变量前加或者" class="headerlink" title="Python- 变量前加或者*"></a>Python- 变量前加<em>或者*</em></h2><h3 id="➕"><a href="#➕" class="headerlink" title="➕*"></a>➕*</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh7owdqgm9j314m062js2.jpg" alt="image-20200729113837756"></p><h3 id="➕-1"><a href="#➕-1" class="headerlink" title="➕ **"></a>➕ **</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh7owtaj9cj311y05ajs2.jpg" alt="image-20200729113908275"></p><h2 id="Python标准注释"><a href="#Python标准注释" class="headerlink" title="Python标准注释"></a>Python标准注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><h2 id="关于切片"><a href="#关于切片" class="headerlink" title="关于切片"></a>关于切片</h2><p>对于切片，[:]中：前后两个数字必须满足从小到大的顺序，同时，包括前者，但并不包括后者</p><h2 id="关于Dict"><a href="#关于Dict" class="headerlink" title="关于Dict"></a>关于Dict</h2><p>Python中，可以使用if判断key是否在dict中，但是不能直接使用value判断其是否在dict中</p><h2 id="关于JSON"><a href="#关于JSON" class="headerlink" title="关于JSON"></a>关于JSON</h2><p>标准JSON中不能有多余的——逗号(，)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># python to json</span></span><br><span class="line">python_str = &#123;<span class="string">"age"</span>:<span class="number">20</span>, <span class="string">"score"</span>:<span class="number">88</span>, <span class="string">"name"</span>:<span class="string">"Bob"</span>&#125;</span><br><span class="line">json_str = json.dumps(python_str)</span><br><span class="line">print(json_str)</span><br><span class="line">print(type(json_str))</span><br><span class="line"><span class="comment"># json to python</span></span><br><span class="line">json_str = <span class="string">'&#123;"age":20, "score":88, "name":"Bob"&#125;'</span></span><br><span class="line">python_str = json.loads(json_str)</span><br><span class="line">print(python_str)</span><br><span class="line">print(type(python_str))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;"age": 20, "score": 88, "name": "Bob"&#125;</span></span><br><span class="line"><span class="string">&lt;class 'str'&gt;</span></span><br><span class="line"><span class="string">&#123;'age': 20, 'score': 88, 'name': 'Bob'&#125;</span></span><br><span class="line"><span class="string">&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="关于全局变量"><a href="#关于全局变量" class="headerlink" title="关于全局变量"></a>关于全局变量</h2><p>参见：</p><p><a href="https://blog.csdn.net/songyunli1111/article/details/76095971" target="_blank" rel="noopener">https://blog.csdn.net/songyunli1111/article/details/76095971</a></p><h2 id="关于join"><a href="#关于join" class="headerlink" title="关于join()"></a>关于join()</h2><p>Join()函数并不会改变原有的序列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;字符串和编码&quot;&gt;&lt;a href=&quot;#字符串和编码&quot; class=&quot;headerlink&quot; title=&quot;字符串
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>算法与数据结构/算法(第四版)</title>
    <link href="http://www.nianchu.space/2020/07/11/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95(%E7%AC%AC%E5%9B%9B%E7%89%88)/"/>
    <id>http://www.nianchu.space/2020/07/11/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95(%E7%AC%AC%E5%9B%9B%E7%89%88)/</id>
    <published>2020-07-11T09:13:51.653Z</published>
    <updated>2020-08-08T04:04:50.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-8-字符串"><a href="#1-1-8-字符串" class="headerlink" title="1.1.8 字符串"></a>1.1.8 字符串</h3><p>String类型是Java的一个数据类型，但并不是原始数据类型</p><h4 id="1-1-8-1-字符串拼接"><a href="#1-1-8-1-字符串拼接" class="headerlink" title="1.1.8.1 字符串拼接"></a>1.1.8.1 字符串拼接</h4><h4 id="1-1-8-2-类型转换"><a href="#1-1-8-2-类型转换" class="headerlink" title="1.1.8.2 类型转换"></a>1.1.8.2 类型转换</h4><h4 id="1-1-8-3-自动转换"><a href="#1-1-8-3-自动转换" class="headerlink" title="1.1.8.3 自动转换"></a>1.1.8.3 自动转换</h4><h4 id="1-1-8-4-命令行参数"><a href="#1-1-8-4-命令行参数" class="headerlink" title="1.1.8.4 命令行参数"></a>1.1.8.4 命令行参数</h4><h4 id="1-1-9-5-重定向与管道"><a href="#1-1-9-5-重定向与管道" class="headerlink" title="1.1.9.5 重定向与管道"></a>1.1.9.5 重定向与管道</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggo0yg327cj319w02kgnv.jpg" alt="image-20200712112430202"></p><p>像上面这样，同时使用重定向输入和输出会清空文件中的数据，从而引发java.util.NoSuchElementException: No line found 异常</p><h4 id="1-1-9-7-标准绘图库-基本方法"><a href="#1-1-9-7-标准绘图库-基本方法" class="headerlink" title="1.1.9.7 标准绘图库(基本方法)"></a>1.1.9.7 标准绘图库(基本方法)</h4><p><strong>经验启发： 如何确定一个正方形(包括位置和大小)：</strong></p><p>只需要确定正方形的中心位置，以及中心位置具体一条边的距离即可</p><h4 id="1-1-9-8-标准会图库-控制方法"><a href="#1-1-9-8-标准会图库-控制方法" class="headerlink" title="1.1.9.8 标准会图库(控制方法)"></a>1.1.9.8 标准会图库(控制方法)</h4><p>StdDraw.fillRectangle(x, y, rw, rh)中x，y是长方形左下角的坐标。以屏幕左下角为(0,0)作为标准</p><h3 id="1-1-11-展望"><a href="#1-1-11-展望" class="headerlink" title="1.1.11 展望"></a>1.1.11 展望</h3><p>数据抽象： 主要思想是鼓励程序员定义自己的数据类型(一系列值和对这些值的操作)，而不仅仅是那些操作预定义的数据类型的静态方法。</p><h2 id="1-2-数据抽象"><a href="#1-2-数据抽象" class="headerlink" title="1.2 数据抽象"></a>1.2 数据抽象</h2><p>抽象数据类型(ADT)是一种能够对使用者以藏数据表示的数据类型。</p><p>抽象数据类型的主要不同之处在于它将数据和函数的实现关联，并将数据的表示方式隐藏起来。在使用抽象数据类型时，我们的注意力集中在API描述的操作上而不会去关心数据的表示；在实现抽象数据类型时，我们的注意力集中在数据本身并将实现对该数据的各种操作.</p><h4 id="1-2-1-4-对象"><a href="#1-2-1-4-对象" class="headerlink" title="1.2.1.4 对象"></a>1.2.1.4 对象</h4><p>对象是能够承载数据类型的值的实体。所有对象都有三大重要特性：状态、标识和行为。对象的状态即数据类型中的值。对象的标识能够将一个对象区别于另一个对象。可以认为对象的标识就是它在内存中的位置。对象的行为就是数据类型的操作。</p><h2 id="4-4-最短路径"><a href="#4-4-最短路径" class="headerlink" title="4.4 最短路径"></a>4.4 最短路径</h2><h3 id="4-4-1-最短路径的性质"><a href="#4-4-1-最短路径的性质" class="headerlink" title="4.4.1 最短路径的性质"></a>4.4.1 最短路径的性质</h3><ul><li>路径是有向的</li><li>权重不一定等于距离</li><li>并不是所有顶点都是可到达的。如果t并不是从s可达的，那么就不存在任何路径，也就不存在最短路径</li><li>负权重会使问题更复杂</li><li>最短路径一般都是简单的。找到的最短路径都不会含有环</li><li>最短路径不一定是唯一的</li><li>可能存在平行边和字环：平行边的权重最小者才会被选上，最短路径也不可能包含自环(除非自环的权重为零)</li></ul><h1 id="有意思的问答"><a href="#有意思的问答" class="headerlink" title="有意思的问答"></a>有意思的问答</h1><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj7hw7ba8j31dy05ujvd.jpg" alt="image-20200808104316694"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj7pwlkjrj31dw064q8b.jpg" alt="image-20200808105104209"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj7vs52hmj313i04cwhn.jpg" alt="image-20200808105641873"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghj7zfbsi0j31co046tcn.jpg" alt="image-20200808110013526"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-8-字符串&quot;&gt;&lt;a href=&quot;#1-1-8-字符串&quot; class=&quot;headerlink&quot; title=&quot;1.1.8 字符串&quot;&gt;&lt;/a&gt;1.1.8 字符串&lt;/h3&gt;&lt;p&gt;String类型是Java的一个数据类型，但并不是原始数据类型&lt;/p&gt;
&lt;h4 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/final关键字</title>
    <link href="http://www.nianchu.space/2020/06/12/Java/final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://www.nianchu.space/2020/06/12/Java/final%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-06-12T07:22:40.646Z</published>
    <updated>2020-06-12T07:28:48.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpjc1e86pj31d204ejsr.jpg" alt="image-20200612152537147"></p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpjdid0lxj31c00e2q6g.jpg" alt="image-20200612152704529"></p><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfpjeg367vj31bw0kyqb9.jpg" alt="image-20200612152758241"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;final关键字&quot;&gt;&lt;a href=&quot;#final关键字&quot; class=&quot;headerlink&quot; title=&quot;final关键字&quot;&gt;&lt;/a&gt;final关键字&lt;/h1&gt;&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/递归</title>
    <link href="http://www.nianchu.space/2020/06/03/Java/%E9%80%92%E5%BD%92/"/>
    <id>http://www.nianchu.space/2020/06/03/Java/%E9%80%92%E5%BD%92/</id>
    <published>2020-06-03T14:09:56.982Z</published>
    <updated>2020-06-06T02:21:55.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第18章-递归"><a href="#第18章-递归" class="headerlink" title="第18章 递归"></a>第18章 递归</h1><h2 id="18-1-引言"><a href="#18-1-引言" class="headerlink" title="18.1 引言"></a>18.1 引言</h2><p>*<em>要点提示： *</em>递归是一种针对使用简单的循环难以编程实现的问题，提供优雅解决方案的技术</p><p>有关H-树的知识： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffgrtd6h3j31eo0kk4k7.jpg" alt="image-20200603222118178"></p><p>使用递归就是使用递归方法编程，递归方法就是直接或间接调用自身的方法。递归是一个很有用的程序技术。</p><h2 id="18-2-示例学习：-计算阶乘"><a href="#18-2-示例学习：-计算阶乘" class="headerlink" title="18.2 示例学习： 计算阶乘"></a>18.2 示例学习： 计算阶乘</h2><p>一个递归调用可以导致更多的递归调用，因为这个方法继续把每个子问题分解成新的子问题。要终止一个递归方法，问题最后必须达到一个终止条件。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffhrsxlzfj315y0u01kx.jpg" alt="image-20200603225556923"></p><p><strong>如果递归不能使问题简化并最终收敛到基础情况，就有可能出现无限递归。</strong></p><h2 id="18-3-示例学习：-计算斐波那契数"><a href="#18-3-示例学习：-计算斐波那契数" class="headerlink" title="18.3 示例学习： 计算斐波那契数"></a>18.3 示例学习： 计算斐波那契数</h2><h2 id="18-4-使用递归解决问题"><a href="#18-4-使用递归解决问题" class="headerlink" title="18.4 使用递归解决问题"></a>18.4 使用递归解决问题</h2><p>所有的递归方法都具有下面的特点： </p><ul><li>这些方法使用if-else或switch语句来引导不同的情况</li><li>一个或多个基础情况(最简单的情况)用来停止递归</li><li>每个递归调用都会简化原始问题，让它不断地接近基础情况，直到它变成这种基础境况为止。</li></ul><h2 id="18-5-递归辅助方法"><a href="#18-5-递归辅助方法" class="headerlink" title="18.5 递归辅助方法"></a>18.5 递归辅助方法</h2><p><strong>要点提示 ：</strong>有时候可以通过针对要解决的初始问题的类似问题定义一个递归方法，来找到初始问题的解决方法。这个新的方法称为递归辅助方法，初始问题可以通过调用递归辅助方法来得到解决。</p><p>下面是实例： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gficrt1zkij310w0u0hdt.jpg" alt="image-20200606101938995"></p><p><strong>划重点：</strong> </p><p>在递归程序设计中定义第二个方法来接收附加的参数是一个常用的设计，这样的方法被称为递归辅助方法。</p><h3 id="18-5-1-递归选择排序"><a href="#18-5-1-递归选择排序" class="headerlink" title="18.5.1 递归选择排序"></a>18.5.1 递归选择排序</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第18章-递归&quot;&gt;&lt;a href=&quot;#第18章-递归&quot; class=&quot;headerlink&quot; title=&quot;第18章 递归&quot;&gt;&lt;/a&gt;第18章 递归&lt;/h1&gt;&lt;h2 id=&quot;18-1-引言&quot;&gt;&lt;a href=&quot;#18-1-引言&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML/21天学通HTML+CSS+JavaScript Web开发</title>
    <link href="http://www.nianchu.space/2020/06/01/HTML/21%E5%A4%A9%E5%AD%A6%E9%80%9AHTML+CSS+JavaScript%20Web%E5%BC%80%E5%8F%91/"/>
    <id>http://www.nianchu.space/2020/06/01/HTML/21%E5%A4%A9%E5%AD%A6%E9%80%9AHTML+CSS+JavaScript%20Web%E5%BC%80%E5%8F%91/</id>
    <published>2020-06-01T06:29:32.322Z</published>
    <updated>2020-08-05T02:25:05.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>##第1章 何为Web发布</p><h3 id="1-1-像Web发布者一样思考"><a href="#1-1-像Web发布者一样思考" class="headerlink" title="1.1 像Web发布者一样思考"></a>1.1 像Web发布者一样思考</h3><p>Web是： </p><ul><li>一个超文本信息系统</li><li>跨平台的</li><li>分布式的</li><li>交互式的</li></ul><h4 id="1-1-1-Web是一个超文本信息系统"><a href="#1-1-1-Web是一个超文本信息系统" class="headerlink" title="1.1.1 Web是一个超文本信息系统"></a>1.1.1 Web是一个超文本信息系统</h4><p>超文本的含义： 不像看书那样以线性方式阅读，而是可以轻松从一个地方跳到另一个地方： 可以获取更详细的信息，再回过去阅读、跳到其他主题或者根据兴趣阅读。</p><p>术语超文本，可以理解为链接。链接也可称为超链接。</p><h4 id="1-1-2-Web是跨平台的"><a href="#1-1-2-Web是跨平台的" class="headerlink" title="1.1.2 Web是跨平台的"></a>1.1.2 Web是跨平台的</h4><p>跨平台意味着不管使用什么计算机硬件，也不管运行的是什么操作系统，装备的是什么显示器，都可以一样地访问Web信息。</p><p>下面是书中提供的一个很有意思的观点： </p><p><strong>跨平台是一种理想：</strong></p><p>随着众多特殊功能、技术和媒体类型的推出，Web的跨平台性特征遭到了损害，Web发布者可以使用很多非标准特性，如Flash，但这样做将缩小其网站的受众范围，如果考虑到越来越多的人转而使用智能手机和移动设备来访问Web，Web发布者还必须做出如下选择： 专门创建用于移动设备的应用程序，还是打造跨平台兼容性更强的Web应用程序。该不该为特定平台提供更强大的功能而降低跨平台的灵活性呢？</p><h4 id="1-1-3-Web是分布式的"><a href="#1-1-3-Web是分布式的" class="headerlink" title="1.1.3 Web是分布式的"></a>1.1.3 Web是分布式的</h4><p>Web为什么能成功地提供海量信息呢？因为这些信息分布在全球的数百万个网站中，而每个网站都分别存储其发布的信息。每个网站驻留在一台或者多台被称为Web服务器的计算机上。Web服务器也是计算机，只是负责侦听并相映Web浏览器的请求。我们使用Web浏览器时，请求服务器提供资源以便查看它。我们只是将浏览器指向网站，其他什么都没有做。</p><p>网站是Web上一个发布信息的位置。您浏览网页时，浏览器连接到网络以获取该网页。每个网站、网站的每个 网页乃至每项信息都有独一无二的地址，这个地址被称为 ：统一资源定位符(URL).</p><h4 id="1-1-4-Web是动态的"><a href="#1-1-4-Web是动态的" class="headerlink" title="1.1.4 Web是动态的"></a>1.1.4 Web是动态的</h4><p>重启浏览器可以获取Web上更新的信息</p><p>当前，甚至都无须重新加载网页就能看到最新的信息。通过使用JavaScript可以实时地更新网页的内容。</p><h4 id="1-1-5-Web是交互式的"><a href="#1-1-5-Web是交互式的" class="headerlink" title="1.1.5 Web是交互式的"></a>1.1.5 Web是交互式的</h4><p>Web的交互性是通过单击链接跳到其他网页实现的。除此之外，Web还可以让用户同发布者和其他用户交流。</p><h3 id="1-2-Web浏览器"><a href="#1-2-Web浏览器" class="headerlink" title="1.2 Web浏览器"></a>1.2 Web浏览器</h3><p><strong>注意：</strong>仅当您确定只有使用特定浏览器的用户访问您的网站时，选择针对该浏览器进行开发才是合适的。</p><h4 id="1-2-1-Web浏览器的作用"><a href="#1-2-1-Web浏览器的作用" class="headerlink" title="1.2.1 Web浏览器的作用"></a>1.2.1 Web浏览器的作用</h4><p>Web浏览器的核心作用是连接到We服务器并请求文档，再妥善地设置这些文档的格式并显示它们。</p><p>Web浏览器还可显示本地计算机中的文件、下载并非用于显示的文件，甚至让用户能够发送和接受电子邮件。</p><p>所有网页都是使用超文本标记语言HTML编写的，这种语言指定网页包含的文本、描述网页的结构、指定到其他文档和图像等多媒体。</p><p>即使是同一个文件，不同浏览器设置其格式和显示的方式也可能不同，这取决于系统的功能以及浏览器的配置。</p><h4 id="1-2-2-概述一些流行的Web浏览器"><a href="#1-2-2-概述一些流行的Web浏览器" class="headerlink" title="1.2.2 概述一些流行的Web浏览器"></a>1.2.2 概述一些流行的Web浏览器</h4><p><em>Google Chrome</em></p><p>和Apple Safari使用的是一个HTML引擎——开源引擎WebKit.</p><p><strong>注意：</strong></p><p>如果要检查跨平台兼容性问题，请从IE 和 Firefox开始，再将Chrome也囊括进来。</p><p><em>Firfox</em></p><p>Firfox得以流行是因为它不存在困扰IE的安全问题。</p><h3 id="1-3-Web服务器"><a href="#1-3-Web服务器" class="headerlink" title="1.3 Web服务器"></a>1.3 Web服务器</h3><p>要将网页发布到Web上，需要一个Web服务器。</p><p>Web服务器是在计算机上运行的程序，负责响应Web浏览器的请求——向它提供URL指定的内容。运行服务器程序的计算机也被称为服务器。</p><p><strong>您使用浏览器请求网页时，浏览器使用HTTP建立一条到服务器的Web连接。服务器接受连接，发送请求的文件，再关闭连接。接下来，浏览器对从服务器获取的信息设置格式。</strong></p><p>在服务器端，可能有很多不同的浏览器连接到同一个服务器，该服务器负责处理所有这些请求。</p><p>Web服务器还负责管理表单输入以及将表单和浏览器关联到运行在服务器上的数据库等程序。</p><h3 id="1-4-统一资源定位符"><a href="#1-4-统一资源定位符" class="headerlink" title="1.4 统一资源定位符"></a>1.4 统一资源定位符</h3><p>URL为查找并访问信息提供了统一而一致的方法。</p><p>还可以使用URL在文档中创建到另一个文档中的超文本链接。</p><p>*<em>URL包含有关如下方面的信息： *</em></p><ul><li><p>如何获取信息(使用哪种协议： FTP,HTTP还是file)；</p></li><li><p>该信息所在计算机的Internet主机名(<a href="http://www.ncsa.uiuc.edu)等" target="_blank" rel="noopener">www.ncsa.uiuc.edu)等</a></p></li><li><p>该信息位于网站的哪个目录或位置</p></li></ul><p>  还可以使用特殊的URL来完成发送邮件和运行JavaScript代码等任务</p><h3 id="1-5-广义的Web发布"><a href="#1-5-广义的Web发布" class="headerlink" title="1.5 广义的Web发布"></a>1.5 广义的Web发布</h3><p>一般而言，网页都是根据别人创建的模版生成的，通常可以设置内容的格式——使用图形编辑器或让您能够避免使用HTML的简化标记。</p><p>如果，发布的内容看起来不妥，要修复问题就必须懂HTML。</p><p>需要区分由您控制的页面部分和您使用发布应用程序生成的部分。</p><h3 id="1-7-作业"><a href="#1-7-作业" class="headerlink" title="1.7 作业"></a>1.7 作业</h3><h4 id="1-7-1-问与答"><a href="#1-7-1-问与答" class="headerlink" title="1.7.1 问与答"></a>1.7.1 问与答</h4><p>问： Web由谁负责运营？这些协议都是由谁控制的？这一切都是由谁管理的？</p><p>万维网并非由某个组织拥有或控制。<strong>有两类组织给Web的外观和发展方向带来了重大影响：</strong></p><ol><li><p>万维网联盟(W3C)： 负责制定万维网标准和实施相关的规则，网址为：<a href="http://www.w3.org" target="_blank" rel="noopener">www.w3.org</a></p></li><li><p>浏览器开发商 ：一些关心Web未来的个人和公司成立了一个名为WHATWG——超文本应用技术工作组。HTML5规范就是WHATWG和W3C一起制定的。</p><p>从现在开谁，WHATWG放弃了给HTML规范制定版本号，相反，HTML是一个“流动的标准”，将涵盖实验性功能和得到广泛支持的功能，旨在确保该规范紧跟发展步伐，涵盖浏览器开发商一致同意在其浏览器中添加的功能。</p><h2 id="第2章-准备好工具"><a href="#第2章-准备好工具" class="headerlink" title="第2章 准备好工具"></a>第2章 准备好工具</h2><h3 id="2-1-网站剖析"><a href="#2-1-网站剖析" class="headerlink" title="2.1  网站剖析"></a>2.1  网站剖析</h3><ul><li>网站： 一个或多个网页，它们以有意义的方式组织起来，一起描述了一项信息或者营造出一种效果。</li><li>Web服务器： Internet或内联网中的计算机，在收到浏览器的请求时提供网页或其他文件(内联网是Internet协议但不对公众开放的网络)</li><li>网页 ：网站上的入口页面，可链接到当前网站或者其他网站的页面。</li><li>主页： 网站的入口页面，可链接到当前网站或者其他网站的页面。</li></ul></li></ol><p>网站都由Web服务器托管。</p><p>网页有时也被称为Web文档。</p><p>网页由HTML文档和其他部分组成。</p><h3 id="2-2-为发布到Web准备好计算机"><a href="#2-2-为发布到Web准备好计算机" class="headerlink" title="2.2 为发布到Web准备好计算机"></a>2.2 为发布到Web准备好计算机</h3><p>学习如何从空白开始创建网站，就需要配置计算机，以便能够在本地创建和查看网页</p><p>尝试Web发布，只有两款工具是必不可少的，就是文本编辑器和Web浏览器。</p><h4 id="2-2-1-文本编辑器"><a href="#2-2-1-文本编辑器" class="headerlink" title="2.2.1 文本编辑器"></a>2.2.1 文本编辑器</h4><p>HTML属于纯文本文件，应使用处理纯文本的工具对其进行编辑。</p><h4 id="2-2-2-Web浏览器"><a href="#2-2-2-Web浏览器" class="headerlink" title="2.2.2 Web浏览器"></a>2.2.2 Web浏览器</h4><p>下载Google Chrome</p><p>###2.3 使用Google Chrome 开发者工具</p><p>打开开发者工具的快捷键 ：</p><ul><li>Windows中为ctrl  + Shift + I</li><li>Mac OS 中： Command + Option + I </li></ul><p>开发者工具是查看源代码这种概念的扩展，功能更加强大。</p><p>开发者工具中包含很多选项卡，默认显示的是Element，其中包含的内容类似于网页的源代码。浏览器下载网页的时候，将其进行转换，让设置HTML格式并显示它的引擎能够明白。</p><p>Element选项卡显示的是浏览器看到的HTML，而“查看源代码”显示的是浏览器下载的HTML。这两者有几个不同的地方。</p><p>将鼠标指向Element选项卡中的元素，相应的网页部分将呈高亮显示，由此可以知道网页各部分与HTML源代码的对应关系。</p><h3 id="2-4-您要在Web上做什么"><a href="#2-4-您要在Web上做什么" class="headerlink" title="2.4 您要在Web上做什么"></a>2.4 您要在Web上做什么</h3><p>对于要发布到Web上的东西，我在本书中称之为内容。</p><h3 id="2-5-绘制网站线框图"><a href="#2-5-绘制网站线框图" class="headerlink" title="2.5 绘制网站线框图"></a>2.5 绘制网站线框图</h3><p>网络规划的下一步是确定如何在网页之间分配内容，并制定在网页之间导航的方案。</p><h4 id="2-5-1-线框图是什么，为何需要绘制线框图"><a href="#2-5-1-线框图是什么，为何需要绘制线框图" class="headerlink" title="2.5.1 线框图是什么，为何需要绘制线框图"></a>2.5.1 线框图是什么，为何需要绘制线框图</h4><p>线框图是网站完成后的大致轮廓，指出了内容在网页之间的分配情况以及内容是如何彼此关联起来的。</p><p>对于复杂的大型网站，线框图可节省大量的时间，避免众多的弯路。</p><p>线框图，一般而言，是成组的文档或图像，每组表示网站中一种特定类型的网页。文档包含网页的粗略示意图指出了网页各各部分处于什么位置、占据多大空间以及将发挥的作用</p><h4 id="2-5-2-线框图绘制小贴士"><a href="#2-5-2-线框图绘制小贴士" class="headerlink" title="2.5.2 线框图绘制小贴士"></a>2.5.2 线框图绘制小贴士</h4><ul><li><p>如何在网页之间分配主题</p><p>最佳的做法是，让每个页面都包含一个主题的信息。如果页面有好几屏长，也许该奖相应的主题按逻辑分成多个子主题。</p><ul><li>在网页之间导航的主要方式是什么？ </li></ul><p>需要链接。这些是文档中的主链接，让访客能够实现您确定的目标。向前、向后、向上的链接以及到主页的链接都属于主要的导航方式。</p><ul><li>要提供其他哪些导航方式</li></ul><p>除了简单的导航链接外，还可以包含与主要Web内容平行的额外信息，如术语表</p><p>按字母顺序排列的概念索引、版权信息或职员页面。</p><ul><li>要在主页上放置哪些内容？</li></ul><p>主页上的内容应该有足够的吸引力，让目标受众留下来</p><ul><li>如何让访问内部网页的用户知道他身处何方？</li></ul><p>可以通过设计和导航实现这个目标。</p><ul><li>您的目标是什么？</li></ul><p>注意聚焦于你的目标</p><h3 id="2-6-Web托管"><a href="#2-6-Web托管" class="headerlink" title="2.6 Web托管"></a>2.6 Web托管</h3><p>迟早需要将本地计算机上创建的网站放到Internet上，最简单的方法，是获取一个这样的Web托管账户，即让您能够将HTML文件、图像、样式和其他Web内容上传到一台Web服务器。</p><h4 id="2-6-1-使用内容管理应用程序"><a href="#2-6-1-使用内容管理应用程序" class="headerlink" title="2.6.1 使用内容管理应用程序"></a>2.6.1 使用内容管理应用程序</h4><p>使用应用程序将内容发布到Web上：</p><ul><li>博客网站</li><li>一些在线工具可以建立格式比博客更开放、更专业的网站</li></ul></li></ul><p>上述两种方式，通常只需填写表单并为网站选择URL和主题，然后就可以通过表单输入内容。</p><h4 id="2-6-2-设置Web托管"><a href="#2-6-2-设置Web托管" class="headerlink" title="2.6.2 设置Web托管"></a>2.6.2 设置Web托管</h4><p>注册托管账户以便将网页发布到Web上的步骤如下： </p><ol><li>注册一个域名。</li><li>选择一家Web托管公司并注册账户。</li><li>将注册的域名同新创建的网站关联起来。</li><li>开始上传内容。</li></ol><h2 id="第3章-HTML-和-CSS简介"><a href="#第3章-HTML-和-CSS简介" class="headerlink" title="第3章 HTML 和 CSS简介"></a>第3章 HTML 和 CSS简介</h2><h3 id="3-1-HTML是什么"><a href="#3-1-HTML是什么" class="headerlink" title="3.1 HTML是什么"></a>3.1 HTML是什么</h3><p>HTML指的是超文本标记语言</p><h4 id="3-1-1-HTML定义了网页的结构"><a href="#3-1-1-HTML定义了网页的结构" class="headerlink" title="3.1.1 HTML定义了网页的结构"></a>3.1.1 HTML定义了网页的结构</h4><p>是一种描述文档结构而非实际呈现效果的语言。</p><h4 id="3-1-2-HTML未定义网页的布局"><a href="#3-1-2-HTML未定义网页的布局" class="headerlink" title="3.1.2 HTML未定义网页的布局"></a>3.1.2 HTML未定义网页的布局</h4><p>HTML规范对页面的外观都未置一言。HTML标签只是指出元素是标题或列表，没有说明该如何设置标题或列表的格式。</p><p><strong>注意：</strong>级联样式表(CSS)能够将复杂的格式设置应用于HTML标签。</p><p><strong>应用于标签的视觉样式的发展历程</strong>：</p><p>链接应该带有下划线并显示为蓝色，访问过的链接为紫色，要突出的文本为斜体……</p><h4 id="3-1-3-HTML为何以这样的方式工作"><a href="#3-1-3-HTML为何以这样的方式工作" class="headerlink" title="3.1.3 HTML为何以这样的方式工作"></a>3.1.3 HTML为何以这样的方式工作</h4><p>设计原则： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdmjruij4j31ac0927ip.jpg" alt="image-20200602081006343"></p><h4 id="3-1-4-标记的工作原理"><a href="#3-1-4-标记的工作原理" class="headerlink" title="3.1.4 标记的工作原理"></a>3.1.4 标记的工作原理</h4><p>HTML是一种标记语言。</p><p>HTML包含一组可供使用的预处理标签，不能编造标签来创建新样式或功能。</p><p>不同的浏览器支持不同的标签。</p><h3 id="3-2-HTML文件怎么样"><a href="#3-2-HTML文件怎么样" class="headerlink" title="3.2 HTML文件怎么样"></a>3.2 HTML文件怎么样</h3><p>HTM文件包含的以下内容： </p><ul><li>页面本身的内容</li><li>HTML标签</li></ul><p><strong>HTML中在结束标签中出现的是”/“而不是反斜杠</strong></p><p>有些标签只有起始标签或者结束标签；</p><p>有些标签是荣国旗，在&lt;&gt;内包含额外的信息和文本；</p><p>有些标签内部有额外的文本，提供了有关签名的额外信息。这些文本被称为属性，通常以name=value的形式定义的，位于标签名后面，并用一个空格与标签名分隔开。</p><p><strong>HTML标签不区分大小写。</strong></p><h4 id="3-2-1-文本格式设置和HTML"><a href="#3-2-1-文本格式设置和HTML" class="headerlink" title="3.2.1 文本格式设置和HTML"></a>3.2.1 文本格式设置和HTML</h4><p>分析HTML页面时，浏览器会忽略您为设置格式而添加的所有空白字符，包括多余的空格、制表符、换行符等</p><p>在HTML中设置格式的唯一途径就是使用HTML标签。(此规则有两个例外，它们是标签<pre>和CSS属性pre)</p><h3 id="3-3-HTML-属性"><a href="#3-3-HTML-属性" class="headerlink" title="3.3 HTML 属性"></a>3.3 HTML 属性</h3><p>可使用属性来修改HTML元素。属性是在元素的起始标签中指定的。</p><p>很多元素有其特有的属性，<strong>也有适用于所有元素的全局元素。例如： ID属性指定一个标识符，用于唯一地标识页面元素。</strong></p><p><strong>这些标识符主要供JavaScript和级联样式表使用。</strong></p><p>class是一个全局属性，可用于建立元素编组。可给多个元素指定相同的class属性，以便在CSS或JavaScript中将这些元素作为一个编组来饮用它们。</p><p>第三个全局属性是style</p><h3 id="3-4-使用属性style"><a href="#3-4-使用属性style" class="headerlink" title="3.4 使用属性style"></a>3.4 使用属性style</h3><p>级联样式表告诉浏览器如何渲染HTML元素。</p><p>CSS的优点在于，可以各种方式使用它。</p><h4 id="3-4-1-在标签中指定样式"><a href="#3-4-1-在标签中指定样式" class="headerlink" title="3.4.1 在标签中指定样式"></a>3.4.1 在标签中指定样式</h4><h3 id="3-5-HTML标准简史"><a href="#3-5-HTML标准简史" class="headerlink" title="3.5 HTML标准简史"></a>3.5 HTML标准简史</h3><h4 id="3-5-1-XHTML"><a href="#3-5-1-XHTML" class="headerlink" title="3.5.1 XHTML"></a>3.5.1 XHTML</h4><p>XHTML文档必须是有效的XML。<strong>下面是规则：</strong></p><ul><li>所有标签小写</li><li>没有结束标签的标签，必须在其标签后面加上反斜杠，例如<br> -> <br/></li><li>所有属性都必须有值。如果某些属性没有与之相关联的值，XHTML要求将其值设置为属性名，即采用格式attribute = "attribute"</li></ul><h3 id="3-6-不断发展的最新标准HTML5"><a href="#3-6-不断发展的最新标准HTML5" class="headerlink" title="3.6 不断发展的最新标准HTML5"></a>3.6 不断发展的最新标准HTML5</h3><p>访问<a href="http://caniuse.com/" target="_blank" rel="noopener">http://caniuse.com/</a> ，查看HTML5的各项功能、支持该功能的浏览器版本以及其浏览器支持该功能的用户所占的百分比。</p><h3 id="3-8-问与答"><a href="#3-8-问与答" class="headerlink" title="3.8  问与答"></a>3.8  问与答</h3><h4 id="3-8-1-可以使用HTML设置文本格式吗？"><a href="#3-8-1-可以使用HTML设置文本格式吗？" class="headerlink" title="3.8.1 可以使用HTML设置文本格式吗？"></a>3.8.1 可以使用HTML设置文本格式吗？</h4><p>可以对字符串设置一些格式。大多数设置文本格式的标签都已被CSS取代，但浏览器依然支持较旧的文本格式设置元素。</p><h2 id="第4章-HTML基础知识"><a href="#第4章-HTML基础知识" class="headerlink" title="第4章 HTML基础知识"></a>第4章 HTML基础知识</h2><h4 id="4-1-定义页面的总体结构"><a href="#4-1-定义页面的总体结构" class="headerlink" title="4.1 定义页面的总体结构"></a>4.1 定义页面的总体结构</h4><p>HTML定义了三个用于定义页面总体结构以及提供简单标题信息的标签——<html>,<head>,<body></p><p><strong>DOCTYPE标识符</strong>：</p><p>它不是网页结构的标签，但是XHTML和HTML5都要求网页必须包含它。</p><h4 id="4-1-1-标签"><a href="#4-1-1-标签" class="headerlink" title="4.1.1 标签"></a>4.1.1 标签<html></h4><p>网页的所有文本和HTML元素都必须放在起始和结束<html>标签之间。</p><p>如果省略它，浏览器将会替你添加。</p><h4 id="4-1-2-标签"><a href="#4-1-2-标签" class="headerlink" title="4.1.2 标签"></a>4.1.2 标签<head></h4><p>是一个容器，包含所有提供有关网页的信息的标签，但不包含将显示在网页中的信息。</p><h4 id="4-1-3-标签"><a href="#4-1-3-标签" class="headerlink" title="4.1.3 标签"></a>4.1.3 标签<body></h4><p>结束HTML标签时，务必确保结束的时最近的未结束标签。</p><h3 id="4-2-名称"><a href="#4-2-名称" class="headerlink" title="4.2 名称"></a>4.2 名称</h3><p>每个HTML页面都需要一个名称，它指出页面描述的是什么。用户浏览网页时，这个名称出现在浏览器的标题栏中。这个名称被浏览器用来创建书签；还被搜索引擎用来建立页面索引。</p><p><strong>使用<title>标签指定名称</strong></p><p><strong>将<title>标签放在<head>中</strong></p><p><strong><title>不能包含其他标签</strong></p><h3 id="4-3-标题"><a href="#4-3-标题" class="headerlink" title="4.3 标题"></a>4.3 标题</h3><p>HTML定义了6级标题</p><p>在HTML文档中，缩进可以更好地展示层次结构。但是在展示的页面中，不会缩进。浏览器对缩进置若罔闻。</p><p>*<em>警告： *</em>不要为了将文本显示为粗体或突出网页的某些部分而使用标题，这样做虽然会获得想要的效果，但标记表示的将不再是网页的结构。这样会影响搜索引擎、便利性和有些浏览器。</p><p><strong>提示：</strong>从视觉效果来看，4-6级标题不是很有用，但是从文档结构的角度看，很有意义。另外，使用4-6级标题可以使用样式来获得想要的效果。</p><h3 id="4-4-段落"><a href="#4-4-段落" class="headerlink" title="4.4 段落"></a>4.4 段落</h3></p>虽然并非 必不可少，但是对CSS确定段落的内容至关重要。<h3 id="4-5-注释"><a href="#4-5-注释" class="headerlink" title="4.5 注释"></a>4.5 注释</h3><p>分析HTML文件时，会忽略注释中的文本。但是，在浏览器中，用户可以使用“查看源代码”功能来查看注释，因此，对于不希望用户看到的东西，请不要将其放在注释中。</p><p>格式： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is comment --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-问与答"><a href="#4-7-问与答" class="headerlink" title="4.7 问与答"></a>4.7 问与答</h3><h4 id="4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？"><a href="#4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？" class="headerlink" title="4.7.1 有些网页没有使用结构页面标签(、、)。那真的是必须包含它们吗？"></a>4.7.1 有些网页没有使用结构页面标签(<html>、<head>、<body>)。那真的是必须包含它们吗？</h4><p>除了<title>以外可以不包括，但是最好养成使用结构标签的习惯。</p><h4 id="4-7-2-标签是用于添加网页内容的通用标签吗？"><a href="#4-7-2-标签是用于添加网页内容的通用标签吗？" class="headerlink" title="4.7.2 标签是用于添加网页内容的通用标签吗？"></a>4.7.2 标签<p>是用于添加网页内容的通用标签吗？</h4><p>不是，标签<div>才是用于添加网页内容的通用标签。标签<p>专用于在网页中添加文本段落。包括<div>在内的很多标签都不能放在标签<p>里面。</p><h4 id="4-7-3-注释可以包含HTML标签"><a href="#4-7-3-注释可以包含HTML标签" class="headerlink" title="4.7.3 注释可以包含HTML标签"></a>4.7.3 注释可以包含HTML标签</h4><p>可以在注释中包含HTML标签，但是浏览器不会显示它们。使用注释来隐藏页面的某部分是一种常见的做法，通常这种做法叫做“注释掉”。</p><h2 id="第5章-使用列表组织信息"><a href="#第5章-使用列表组织信息" class="headerlink" title="第5章 使用列表组织信息"></a>第5章 使用列表组织信息</h2><p><strong>知识导航：</strong></p><ul><li>如何创建编号列表</li><li>如何创建项目列表</li><li>如何创建定义列表(definition list)</li><li>与列表相关的级联样式表(CSS)属性</li></ul><h3 id="5-1-列表概述"><a href="#5-1-列表概述" class="headerlink" title="5.1 列表概述"></a>5.1 列表概述</h3><p>列表分为： </p><ul><li>有序列表</li><li>无序列表</li><li>定义列表</li></ul><p>所有的列表标签都有如下特征 ：</p><ul><li>列表有指定类型的外部元素。<ul></ul>表示无序列表,<ol></ol>表示有序列表,<dl></dl>表示定义列表。</li><li>每个列表项都有自己的标签：在词汇列表中为<dt>和<dd>.在其他列表中为<li></li></ul><h3 id="5-2-带编号的列表"><a href="#5-2-带编号的列表" class="headerlink" title="5.2 带编号的列表"></a>5.2 带编号的列表</h3><p>带编号的列表是<ol></ol>定义的，而其中的列表行是使用标签<li>和</li>定义的。</p><p>显示有序列表时，列览器会缩进列表并编号。</p><p><strong>仅当列表项的顺序很重要时，才应使用带编号的列表。</strong></p><h4 id="5-2-1-定制有序列表"><a href="#5-2-1-定制有序列表" class="headerlink" title="5.2.1 定制有序列表"></a>5.2.1 定制有序列表</h4><p>定制的方法有两种： </p><ul><li><p>修改列表的编号样式(1.使用CSS属性list-style-type;2.使用属性[attribute]type——在html5中已经被舍弃)</p></li><li><p>修改编号本身。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfeu2l0967j31by0gugx1.jpg" alt="image-20200603091556411"></p></li></ul><p>要指定列表使用的起始编号或字母，可使用属性start.不管指定的编号形式是什么，属性start的值必须时十进制数字。</p><p>在任何列表项都可以添加一个value值以重新开始从这个列表项开始的序号。</p><h3 id="5-3-无序列表"><a href="#5-3-无序列表" class="headerlink" title="5.3 无序列表"></a>5.3 无序列表</h3><p>无序列表通常称为项目符号列表，其中每个列表项都使用相同的项目符号，而不是编号。</p><p>对于无序列表，各个浏览器标记每个列表项时默认使用的项目符号相同，但文本浏览器通常使用星号。</p><h4 id="5-3-1-定制无序列表"><a href="#5-3-1-定制无序列表" class="headerlink" title="5.3.1 定制无序列表"></a>5.3.1 定制无序列表</h4><p>项目符号样式如下： </p><ul><li>disc: 圆盘，这是默认样式</li><li>square:实心正方形</li><li>circle:生成空心圆</li></ul><p>可以使用一幅画来自定义项目符号样式，例如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-image: url(/bullet.gif)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下方式实现后续行与项目符号或列表符号对齐： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-position: inside"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时修改多个与列表相关的属性，可以像下面这样，同时指定三个值： 列表样式类型、列表样式位置和用作项目符号图像的url： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style: circle inside url("</span>")"&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-定义列表"><a href="#5-4-定义列表" class="headerlink" title="5.4 定义列表"></a>5.4 定义列表</h3><p>定义列表包含两部分： </p><ul><li>术语</li><li>术语的定义</li></ul><p>定义列表的每部分都有其标签： 术语标签为<dt></dt>,定义标签<dd><dd>。它们往往成对存在。</p><p>整个定义列表是使用标签<dl></dl>定义的。</p><p>在浏览器中显示定义列表时，通常术语和定义是分开的并缩进定义。</p><h3 id="5-5-嵌套列表"><a href="#5-5-嵌套列表" class="headerlink" title="5.5 嵌套列表"></a>5.5 嵌套列表</h3><p>在一个列表中放置另一个列表。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffis1mo3gj31ey0esaos.jpg" alt="image-20200603233039568"></p><h3 id="5-6-列表的其他用途"><a href="#5-6-列表的其他用途" class="headerlink" title="5.6 列表的其他用途"></a>5.6 列表的其他用途</h3><p>列表远不是简单的项目符号列表。很多常见的Web设计元素的结构都类似于列表。</p><h3 id="5-8-作业"><a href="#5-8-作业" class="headerlink" title="5.8  作业"></a>5.8  作业</h3><h4 id="5-8-1-可修改列表项的缩进程度或让它们不缩进吗？"><a href="#5-8-1-可修改列表项的缩进程度或让它们不缩进吗？" class="headerlink" title="5.8.1 可修改列表项的缩进程度或让它们不缩进吗？"></a>5.8.1 可修改列表项的缩进程度或让它们不缩进吗？</h4><p>用于控制列表缩进程度的属性是 ：margin-left和padding-left，有些浏览器使用前者，有些浏览器使用后者。</p><p>为了让文本按照特定的方式对齐，可以将边距(margin)设置为负值。</p><h2 id="第6章-使用链接"><a href="#第6章-使用链接" class="headerlink" title="第6章 使用链接"></a>第6章 使用链接</h2><h3 id="6-1-创建链接"><a href="#6-1-创建链接" class="headerlink" title="6.1 创建链接"></a>6.1 创建链接</h3><p>使用URL创建链接，需要： </p><ul><li>要链接到的文件名(或者URL)</li><li>用作可单击链接的文本</li></ul><p>在链接标签中，只有文本是在网页上可见的；单击链接时，浏览器将加载相关联的URL。</p><h4 id="6-1-1-链接标签"><a href="#6-1-1-链接标签" class="headerlink" title="6.1.1 链接标签"></a>6.1.1 链接标签<a></h4><p><a></a>也被称为锚标签，因为它也可用于创建锚。链接标签最常用的用途是，用于创建到其他网页的链接。</p><p>标签<a>必须包含一些属性。</p><p>在链接标签中，最常见的属性是herf，它表示超文本引用，可以使用它来指定链接指向的文件名或URL。</p><p>*<em>注意： *</em>在HTML5中，没有任何属性的<a>也是合法的，这种链接称为占位符链接，可将其与CSS和脚本结合起来使用。</p><p>关于具体如何使用链接： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffz85iunhj31di0g6grd.jpg" alt="image-20200604085951473"></p><p>在链接中，文件名是区分大小写的，但是url不区分。</p><p>有关标签嵌套的提醒： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzmcfesnj31au0bob0c.jpg" alt="image-20200604091329375"></p><h3 id="6-2-使用相对和绝对路径链接到本地页面"><a href="#6-2-使用相对和绝对路径链接到本地页面" class="headerlink" title="6.2 使用相对和绝对路径链接到本地页面"></a>6.2 使用相对和绝对路径链接到本地页面</h3><p>*<em>注意： *</em>文件夹和目录说的是一码事，具体使用哪个取决于的是操作系统。</p><p>要在链接中指定相对路径名，必须使用UNIX式路径，而不管使用的是什么操作系统。即，</p><p>使用斜杠(/)来分隔目录名，并使用两点(..)来表示当前目录的父目录。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzrke0vmj31bk0ic7ip.jpg" alt="image-20200604091831046"></p><h4 id="6-2-1-绝对路径名"><a href="#6-2-1-绝对路径名" class="headerlink" title="6.2.1 绝对路径名"></a>6.2.1 绝对路径名</h4><p>相对路径名通过指定相对于当前页面的位置来指定要链接到的页面，而绝对路径名，从顶级目录出发，要经过哪些目录才能到达这个文件。</p><p>绝对路径总是以斜杠打头，以便与当前目录区分开来。斜杠后面从顶级目录出发，前往链接到的文件需要经过的所有目录。</p><p>*<em>注意： *</em></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzv91xspj31ey0o0qnz.jpg" alt="image-20200604092202966"></p><h4 id="6-2-2-该使用相对路径还是使用绝对路径"><a href="#6-2-2-该使用相对路径还是使用绝对路径" class="headerlink" title="6.2.2 该使用相对路径还是使用绝对路径"></a>6.2.2 该使用相对路径还是使用绝对路径</h4><p>合理混合使用这两种链接是最佳的选择。经验规则是： </p><p>如果链接的页面属于同一个集合，就使用相对路径，否则，使用绝对路径。</p><h3 id="6-3-链接到Web上的其他文档"><a href="#6-3-链接到Web上的其他文档" class="headerlink" title="6.3 链接到Web上的其他文档"></a>6.3 链接到Web上的其他文档</h3><p>要链接到Internet上的其他页面(远程页面)，也可以使用链接标签。</p><p>使用<em></em>可以将字体设置为斜体。</p><h3 id="6-4-链接到文档的特定位置"><a href="#6-4-链接到文档的特定位置" class="headerlink" title="6.4 链接到文档的特定位置"></a>6.4 链接到文档的特定位置</h3><p>要链接到另一个页面的特定位置，只需在链接的URL中指定要链接的元素的ID。</p><p>也可以使用链接跳到网页中的特定元素。</p><p>ID属性可用于页面的任何元素，唯一的要求是，每个ID在当前页面中是独一无二的。</p><p>Id还可用于设置页面的样式。</p><h4 id="6-4-1-创建链接和锚"><a href="#6-4-1-创建链接和锚" class="headerlink" title="6.4.1 创建链接和锚"></a>6.4.1 创建链接和锚</h4><p>创建一个锚的例子： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"part4"</span>&gt;</span>Part Four: Grapefruit from Heaven <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在链接中指向一个锚： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mybgdoc.html#part"</span>&gt;</span>Go to part 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中#后面是id</p><h4 id="6-4-2-标签的name属性"><a href="#6-4-2-标签的name属性" class="headerlink" title="6.4.2 标签的name属性"></a>6.4.2 标签<a>的name属性</h4><p>使用标签<a>创建锚时，不是使用属性herf来链接到特定的页面，而使用属性name来指出这是一个可链接的锚。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span> name="part4"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>Part Four : Grapefruit from Heaven </span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议不要不用属性name来创建锚链接，而是使用ID。ID属性适用于任何HTML元素，但是name只支持<a>标签。</p><h4 id="6-4-3-链接到当前文档的其他元素"><a href="#6-4-3-链接到当前文档的其他元素" class="headerlink" title="6.4.3 链接到当前文档的其他元素"></a>6.4.3 链接到当前文档的其他元素</h4><p>在当前页面链接是，只需要6.4.1的锚的示例中#号后面的部分，包含#号在内。</p><h3 id="6-5剖析URL"><a href="#6-5剖析URL" class="headerlink" title="6.5剖析URL"></a>6.5剖析URL</h3><p>URL：统一资源定位符</p><h4 id="6-5-1-URL的组成成分"><a href="#6-5-1-URL的组成成分" class="headerlink" title="6.5.1 URL的组成成分"></a>6.5.1 URL的组成成分</h4><p>包含三部分： 协议，主机名，目录或文件名</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh4l9mzr4j319o0e4dmq.jpg" alt="image-20200605085059262"></p><p><strong>端口：</strong> URL的主机部分可能包含端口号。端口号让浏览器使用合适的协议链接到相应的网络端口。仅当相应请求的服务器被显式地设置为侦听特定端口时，才需要在URL中包含端口号。服务器默认端口是80，此时可以省略。</p><p>当存在端口号时： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://my-public-access-unix.com:155/pub/file</span><br></pre></td></tr></table></figure><p>服务器的根url的路径为/，如<a href="http://www.example.com/" target="_blank" rel="noopener">http://www.example.com/</a></p><p>很多url后面还有查询，它通过问号与URL的其他部分分开。查询由名称-值对组成，名称-值对之间用&分隔，而名称和值之间用等号=分隔。例如： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com/search?q=china&amp;oq=china&amp;aqs=chrome..69i57j69i61j69i60.6294j0j1&amp;sourceid=chrome&amp;ie=UTF-8</span><br></pre></td></tr></table></figure><p>其中</p><p>oq：上次搜索关键字</p><p>ie：关键字编码格式</p><h4 id="6-5-2-URL中的特殊字符"><a href="#6-5-2-URL中的特殊字符" class="headerlink" title="6.5.2 URL中的特殊字符"></a>6.5.2 URL中的特殊字符</h4><p>URL中的特殊字符是指除了大小写字母、数字0-9和下述符号外的字符： 美元$,连字符(-),下划线(_)句点(.)。</p><p>使用特殊字符，要经过转义编码以防止它们被视为URL的一部分。而编码是由百分符号和两位十六进制数组成(0-9,A-F)的</p><p>例如： </p><p>空格： %20</p><p>问号：%3e</p><p>斜杠： %2f</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh81cd0ymj31cc0iuauw.jpg" alt="image-20200605105015529"></p><h4 id="6-5-3-属性rel"><a href="#6-5-3-属性rel" class="headerlink" title="6.5.3 属性rel"></a>6.5.3 属性rel</h4><p>rel是<a>的另一个属性，用于描述当前文档与链接到的文档之间的关系。</p><p>这个属性有一组特定的可能取值，其中最著名的是nofollow，它让搜索引擎给链接到的文档排名时不要考虑这个链接，是一种防范搜索引擎作弊的手段。使用如下： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.example.com/"</span> <span class="attr">ref</span>=<span class="string">"nofollow"</span>&gt;</span>Link to example site<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于rel更多的属性，请查看网站： </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://microformats.org/wiki/existing-values</span></span><br></pre></td></tr></table></figure><h3 id="6-6-URL分类"><a href="#6-6-URL分类" class="headerlink" title="6.6 URL分类"></a>6.6 URL分类</h3><p>统一资源定位符规范定义了很多种URL。</p><h4 id="6-6-1-HTTP-URL"><a href="#6-6-1-HTTP-URL" class="headerlink" title="6.6.1 HTTP URL"></a>6.6.1 HTTP URL</h4><p>是最长的URL类型。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh8dt83qoj31cg0t8gt5.jpg" alt="image-20200605110207485"></p><h4 id="6-6-2-匿名FTP-URL"><a href="#6-6-2-匿名FTP-URL" class="headerlink" title="6.6.2 匿名FTP URL"></a>6.6.2 匿名FTP URL</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh8fp5qx8j31b40ti4qp.jpg" alt="image-20200605110403122"></p><p>浏览器使用FTP来获取文件时，如果获取的是HTML文件，浏览器就将显示它，否则就将它保存在磁盘中。</p><p>ps： 我在想那些打开链接就直接下载的URL应该就属于FTP URL。</p><h4 id="6-6-3-非匿名-FTP-URL"><a href="#6-6-3-非匿名-FTP-URL" class="headerlink" title="6.6.3 非匿名 FTP URL"></a>6.6.3 非匿名 FTP URL</h4><p>总结就是： 尽量不使用，必须使用时使用专用的FTP客户端而不是浏览器。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh8mpt5b0j31es0l0txx.jpg" alt="image-20200605111047982"></p><h4 id="6-6-4-mailto-URL"><a href="#6-6-4-mailto-URL" class="headerlink" title="6.6.4 mailto URL"></a>6.6.4 mailto URL</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh8r7fqaxj30u00w4kjl.jpg" alt="image-20200605111505682"></p><h4 id="6-6-5-文件URL"><a href="#6-6-5-文件URL" class="headerlink" title="6.6.5 文件URL"></a>6.6.5 文件URL</h4><p>文件URL指向本地磁盘中的文件，即指向浏览器所在系统中的文件。(它们包含三个而不是两个斜杠)</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">file:///dirl/dir2/file</span></span><br></pre></td></tr></table></figure><p>文件URL的另一个用途是，为浏览器指定一个本地启动页面，其中包含到经常访问的网站的链接。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfh8xh9xodj31bs0eqwxf.jpg" alt="image-20200605112109294"></p><p>ps： 有点绕</p><h3 id="6-8-问答"><a href="#6-8-问答" class="headerlink" title="6.8 问答"></a>6.8 问答</h3><h4 id="问：有办法在malto-URL中指定主题吗？"><a href="#问：有办法在malto-URL中指定主题吗？" class="headerlink" title="问：有办法在malto URL中指定主题吗？"></a>问：有办法在malto URL中指定主题吗？</h4><p>可以。具体见截图。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhmw2jc0bj31bg08gdni.jpg" alt="image-20200605192408660"></p><h2 id="第7章-使用HTML和CSS设置文本的格式"><a href="#第7章-使用HTML和CSS设置文本的格式" class="headerlink" title="第7章 使用HTML和CSS设置文本的格式"></a>第7章 使用HTML和CSS设置文本的格式</h2><h3 id="7-1-字符级元素"><a href="#7-1-字符级元素" class="headerlink" title="7.1 字符级元素"></a>7.1 字符级元素</h3><p>字符级元素指的是影响其他HTML标签中单词或字符的标签，它们修改这些文本的外观，使其不同于周围的文本，例如将其设置为粗体或带下划线。</p><p><a>是字符级元素。</p><p>可以在块级元素中嵌套字符级元素，也可以在字符级元素中嵌套块级元素。</p><p>要修改文本中一系列字符的外观，可以使用： </p><ul><li>HTML语义标签或级联样式表(CSS)</li></ul><h4 id="7-1-1-HTML语义标签"><a href="#7-1-1-HTML语义标签" class="headerlink" title="7.1.1 HTML语义标签"></a>7.1.1 HTML语义标签</h4><p>语义标签描述了它包含的文本的定义，而不是这些文本在浏览器中的外观。例如 ：HTML语义标签可能指出它包含的内容是一个定义、代码片段或者要突出的单词。</p><p>每个字符样式标签都有起始标签和结束标签，并影响包含在这两个标签之间的文本。下面是HTML一些语义标签： </p><ul><li><em>: 这个标签指出要以某种方式突出字符。大多数浏览器都将<em>显示为斜体。</li><li><strong>使用这个标签时，字符比使用<em>时更加突出，通常显示为粗体</li><li><code>: 这个标签指出它包含的文本是示例代码，应使用Courier等等宽字体显示。</li><li><samp>:这个标签指出它包含的是示例文本，通常像<code>一样使用等宽字体显示。</li><li><kbd>:这个标签标示需要用户输入的文本，也用等宽字体显示</li><li><var>: 这个标签标示需要用实际值替换的变量或其他实体的名称，通常显示为斜体或下划线.</li><li><dfn>: 这个标签标示定义。用于突出要定义或刚定义的单词(通常使用斜体表示)</li><li><cite>: 这个标签标示引用的作品名，通常显示为斜体</li><li><abbr>: 这个标签标示缩略语</li></ul><h4 id="7-1-2-HTML5-物理样式标签的变化"><a href="#7-1-2-HTML5-物理样式标签的变化" class="headerlink" title="7.1.2 HTML5 物理样式标签的变化"></a>7.1.2 HTML5 物理样式标签的变化</h4><p>物理样式： physical style.</p><p>书上提示不要使用它们，而应该使用CSS或等价的语义标签。</p><ul><li><b>:通常显示为粗体的文本</li><li><i>：通常显示为斜体的文本</li><li><u>：通常显示为带下划线的文本</li><li><samll>：使用小字号显示的文本</li><li><sub>：下标</li><li><sup>：上标</li></ul><h3 id="7-2-使用CSS设置字符的格式"><a href="#7-2-使用CSS设置字符的格式" class="headerlink" title="7.2 使用CSS设置字符的格式"></a>7.2 使用CSS设置字符的格式</h3><p>大多数标签都以某种方式影响其包含的文本的外观，但有一个标签对其包含的文本没有任何影戏，这就是标签<span>,它存在的目的就是要与样式表相关联。使用时，只需要用它来包含文本即可。</p><p>单独使用<span>时没有任何效果，与属性结合起来，它可取代前面的所有标签，而且效果好很多。</p><h4 id="7-2-1-text-decoration-属性"><a href="#7-2-1-text-decoration-属性" class="headerlink" title="7.2.1 text-decoration 属性"></a>7.2.1 text-decoration 属性</h4><p>text-decoration属性用于指定要对标签内的文本应用哪种装饰。这个属性的可取值包括： underline,overline,line-through和blink。</p><h4 id="7-2-2-字体属性"><a href="#7-2-2-字体属性" class="headerlink" title="7.2.2 字体属性"></a>7.2.2 字体属性</h4><p>修改文本的外观时，可使用的一系列其他主要属性时字体属性。使用字体属性时，几乎可以修改浏览器渲染文本时使用的任何字体的任何方面。</p><p>属性font-style可用于将文本设置为斜体，它有三种可能取值：normal,italic(像标签<i>那样渲染文本),oblique(标准字体的倾斜版本)。</p><p>将文本设置为oblique 或italic时，浏览器将选择这两者中可用的那个。如果这两者都没有安装，浏览器通常会生成字体的倾斜版本。</p><p>使用CSS来创建粗体文本。在HTML中，只有两种选择：要么为粗体，要么不为粗体。而使用CSS时，可以有更多的选择。实际上，文本要么为粗体，要么正常。要将文本设置为粗体，可以属性<strong>font-weight</strong>。这个值的属性的可能取值包括normal,bold,bolder,lighter以及100-900（以100为单位）</p><p>提示： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhqdxo4jpj31dc0ae7fi.jpg" alt="image-20200605212508661"></p><p>还可以使用属性<strong>font-family</strong>来设置文本使用的字体系列；还可以指定文本使用特定的字体。</p><p>指定字体系列时，具体使用哪种字体将取决于用户系统的首选项。</p><p>指定字体系列时，可使用属性<strong>font-family</strong>,其值可能为serif, sans-serif,cursive,fantasy,monospase.</p><p>使用CSS可以实现HTML标签无法实现的一种功能：<strong>font-variant</strong>.它可以渲染文本，即将小写字母替换为小型大写字母(small capital)字母，这个 属性有两个可能的取值： normal,small-caps.</p><p>PS: 结果类似于下面这种，应该一看就知道是什么意思了：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhqodvajhj30m2024t8p.jpg" alt="image-20200605213512350"></p><h3 id="7-3-预定格式的文本"><a href="#7-3-预定格式的文本" class="headerlink" title="7.3 预定格式的文本"></a>7.3 预定格式的文本</h3><p>HTML代码中包含的多余空白都会被浏览器删除，但是使用预定义格式文本标签<pre>时会有例外。对于放在标签<pre>和</pre>之前的文本，其中的所有空白都会保留在最终输出中，这可以用于在显示的页面中保留HTML代码中文本的距离。</p><p>预定义格式的文本通常是使用Courier等等宽字体显示的。</p><p>在包含在标签<pre>内的文本中，可食用链接标签和字体样式，但不能使用标题和段落等元素。</p><p>应使用硬回车进行换行，并尽可能让每行的长度不超过60个字符。</p><p>在预定义格式文本中慎用制表符，因为字表符在不同浏览器中代表不同字符。</p><p>pre还非常适合用于快速而轻松地将纯文本格式文件(电子邮件)转换为HTML。</p><p>标签pre还可用于在网页中创建ASCII艺术品。像下面这样： <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfi8bo5kqnj30ii09k75c.jpg" alt="image-20200606074546132"></p><h3 id="7-4-水平分割线-分隔"><a href="#7-4-水平分割线-分隔" class="headerlink" title="7.4 水平分割线(分隔)"></a>7.4 水平分割线(分隔)</h3><p>标签<hr>在网页中创建了一条水平线，它没有结束标签，也不包含任何文本。在HTML5中，这个标签被赋予了语义：主题分隔。这个标签一直都显示为一条水平线，现在的语义是：表示主题变了。</p><p><strong>结束空元素</strong>：</p><p>为了符合XHTML的要求，可以使用<hr/>作为结束标签。即使这个标签包含属性，斜杠也应位于标签名后面。 </p><h4 id="7-4-1-的属性"><a href="#7-4-1-的属性" class="headerlink" title="7.4.1 的属性"></a>7.4.1 <hr>的属性</h4><ul><li>size:指定水平线的粗细，单位为像素，默认为2像素，也是最细的水平线</li><li>Width:指定水平线的水平宽度。可以将宽度指定为特定的像素级，也可以指定为屏幕宽度的百分比。</li></ul><p>PS: 这里说一下我看到这里时的困惑，size和width有什么不同呢？具体看下面的截图就能知道了。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfjp50csj8j322m0caq4l.jpg" alt="image-20200607141306694"></p><p>如果指定的宽度比浏览器的宽度小，还可使用属性align指定水平线的对齐方式：</p><ul><li>左对齐:align="left"</li><li>右对齐:align="right"</li><li>居中:align="center"</li></ul><p>默认情况下，水平居中</p><p>使用已摒弃的属性noshade让浏览器将水平线绘制为没有三维投影的普通线条。</p><h3 id="7-5-换行"><a href="#7-5-换行" class="headerlink" title="7.5 换行"></a>7.5 换行<br></h3><p><br>在其所在的地方换行。浏览器遇到标签<br>时间，将重起一行显示它后面的文本，且缩进程度与当前元素的左边距相同。</p><p>br仅仅是重起一行显示后续文本，它不会增加新行的行前距和行后距，也不会改变当前实体的字体和样式。</p><h1 id="11"><a href="#11" class="headerlink" title="11"></a>11</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghey4u9winj31p20s27ad.jpg" alt=""></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghezpvuj2pj30z00m8480.jpg" alt="image-20200804191201098"></p><p>上图中，第一个选择器选择first下的second；第二个选择器选择first下的third</p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><p><strong>CSS选择器中的大于是什么意思？</strong></p><p>可以把>理解为是直接的小孩(direct descendant child)，而平常比较容易看到的空格(space)是所有小孩的意思。</p><p>区别在于，>要求被选择的元素不是嵌套元素，也就是说不是在其他元素内部的。</p><p>space则没有上述要求，指的是class下所有的此类元素</p><h1 id="遗忘知识"><a href="#遗忘知识" class="headerlink" title="遗忘知识"></a>遗忘知识</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><caption> : 表格的标题</li><li><b>：加粗</li></ul><h1 id="自己没有解决但是上网找到解决方法的问题"><a href="#自己没有解决但是上网找到解决方法的问题" class="headerlink" title="自己没有解决但是上网找到解决方法的问题"></a>自己没有解决但是上网找到解决方法的问题</h1><ul><li>HTML中嵌套表格时，最里面的表格按照常规方法是不能居中显示的，解决办法如下</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghb3jngmj7j31h803swit.jpg" alt="image-20200801102208275"></p><p>- </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;p&gt;##第1章 何为Web发布&lt;/p&gt;
&lt;h3 id=&quot;1-1-像Web发布者一样思考&quot;&gt;&lt;a href=&quot;#1-1-像Web发布者一样思考&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML/HTML</title>
    <link href="http://www.nianchu.space/2020/06/01/HTML/HTML/"/>
    <id>http://www.nianchu.space/2020/06/01/HTML/HTML/</id>
    <published>2020-06-01T02:22:20.248Z</published>
    <updated>2020-06-01T06:27:50.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>全称： 超文本标记语言(HyperText Markup Language)</p><p>##HTML文件的后缀： </p><ul><li>.html</li><li>htm</li></ul><p>以上两种没有任何区别</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;全称： 超文本标记语言(HyperText Markup Language)&lt;/p&gt;
&lt;p&gt;##HTML文件的后缀： &lt;/p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/二进制IO</title>
    <link href="http://www.nianchu.space/2020/05/31/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6IO/"/>
    <id>http://www.nianchu.space/2020/05/31/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6IO/</id>
    <published>2020-05-31T11:11:01.273Z</published>
    <updated>2020-06-03T14:09:20.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制I-O"><a href="#二进制I-O" class="headerlink" title="二进制I/O"></a>二进制I/O</h1><h2 id="17-1-引言"><a href="#17-1-引言" class="headerlink" title="17.1 引言"></a>17.1 引言</h2><p><strong>文件分类：</strong> </p><p>可以使用文本编辑器进行处理(读取、创建或者修改)的文件被称为文本文件。所有</p><p>所有其他的文件都被称为二进制文件。</p><p>不能使用文本编辑器来读取二进制文件——它们是为让程序来读取而设计的。就像，Java源程序存储在文本文件中，可以使用文本编辑器读取，而Java类是二进制文件，由Java虚拟机读取。</p><p>可以简单的认为： 文本文件是由字符序列构成的，而二进制是由位bit序列构成的。</p><p>二进制文件的优势在于它的处理效率比文本文件高。</p><h2 id="17-2-在Java中如何处理文本I-O"><a href="#17-2-在Java中如何处理文本I-O" class="headerlink" title="17.2 在Java中如何处理文本I/O"></a>17.2 在Java中如何处理文本I/O</h2><p>要点提示： 使用Scanner类读取文本数据，使用PrintWriter类写文本数据。</p><p>File类： 封装了文件或路径属性，但是不包含从/向文件读/写数据的方法。</p><p>I/O类： 包含从/向文件读/写数据的方法。</p><p>输出对象： 输出流</p><p>输入对象： 输入流</p><h2 id="17-3-文本I-O与二进制I-O"><a href="#17-3-文本I-O与二进制I-O" class="headerlink" title="17.3 文本I/O与二进制I/O"></a>17.3 文本I/O与二进制I/O</h2><p><strong>要点提示 ：</strong>二进制I/O不涉及编码和解码，所以更高效</p><p>计算机并不区分二进制文件和文本文件。所有的文件都是以二进制形式来存储的，从本质上来说，所有的文件都是二进制的。</p><p>文本I/O能提供一层抽象，用于字符串层次的编码和解码。对于文本I/O，编码和解码是自动进行的。</p><p>对于文本编辑器或文本输出程序创建的文件，应该使用文本输入来读取，对于Java二进制输出程序创建的文件，应该使用二进制输入来读取。</p><p>二进制I/O不需要编码和解码，所以它的效率更高。同时，由于二进制文件与主机的编码方案无关，因此，它是可移植的。这也是Java的类文件存储为二进制文件的原因。</p><h2 id="17-4-二进制I-O类"><a href="#17-4-二进制I-O类" class="headerlink" title="17.4 二进制I/O类"></a>17.4 二进制I/O类</h2><p>*<em>要点提示： *</em>抽象类InputStream是读取二进制数据的根类，抽象类是OutputStream是写入二进制数据的根类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5k8kqkj31dy0k6k5z.jpg" alt="image-20200531193633640"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5x8lkdj31cy0ny1kx.jpg" alt="image-20200531193655448"></p><p>注意： 二进制I/O类中所有方法都声明为抛出java.io.IOException或java.io.IOException的子类</p><p>![image-20200531193942861](/Users/bowenkei/Library/Application Support/typora-user-images/image-20200531193942861.png)</p><h3 id="17-4-1-FileInputStream和FileOutputStream"><a href="#17-4-1-FileInputStream和FileOutputStream" class="headerlink" title="17.4.1 FileInputStream和FileOutputStream"></a>17.4.1 FileInputStream和FileOutputStream</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbvanos7bj318s0do4a6.jpg" alt="image-20200531194126051"></p><p>如果为一个不存在的文件创建一个FileInputStream对象，将会发生java.io.FileNotFountException异常</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbveid9yij31ce0e819x.jpg" alt="image-20200531194506941"></p><p>使用FileOutputStream构造方法创建对象时，如果这个文件不存在，就会创建一个新的文件</p><p>当文件已存在的时候，使用以下两个方法将会删除点文件中已经存在的内容： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream(file: File)</span><br><span class="line">  FileOutputStream(filename: String)</span><br></pre></td></tr></table></figure><p>为了既保留文件现有内容又可以给文件追加新数据，可以在创建一个FileOutputStream对象时，添加append参数，并将其值设置为true。</p><p>几乎所有的I/O类都会抛出java.io.IOException。所以，必须在方法中声明会抛出java.io.IOException异常，或者将代码放到try-catch块中。</p><p><strong>程序清单17-1使用二进制I/O将从1到10的10个字节值写入一个名为temp.dat的文件，再把他们从文件中读出来。</strong></p><p>使用try-with-resource来声明和创建输入输出流，从而在使用后可以自动关闭。</p><p>java.io.InputStream和java.io.OutputStream实现了AutoClosable接口。</p><p>AutoClosable接口定义了close()方法，用来个关闭资源。任何AutoClosable类型的对象可以用于try-with-resources语法中，实现自动关闭。</p><p>二进制文件可以从程序中读取它，但是不能用文本编辑器阅读它。</p><p><strong>提示：</strong>当流不再使用时，记得使用close()方法将其关闭，或者使用try-with-resource语句自动关闭。不关闭流可能会在输出文件中造成数据受损，或导致其他的程序设计错误。</p><p>*<em>注意： *</em>FileInputStream类的实例可以作为参数去构造一个Scanner=对象， FileOutputStream类的实例可以作为参数构造一个Printerwriter对象。可以创建一个PrintWriter对象来向文件中追加文本。如果xx.txt不存在，就会创建这个文件。如果xx.txt文件已经存在，就将新数据追加到该文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Printer(<span class="keyword">new</span> FileOutputStream(<span class="string">"xx.txt"</span>, <span class="keyword">true</span>));</span><br></pre></td></tr></table></figure><h3 id="FileterInputStream-和-FilterOutputStream"><a href="#FileterInputStream-和-FilterOutputStream" class="headerlink" title="FileterInputStream 和 FilterOutputStream"></a>FileterInputStream 和 FilterOutputStream</h3><p>过滤器数据流(file stream)是为某种目的过滤字节的数据流。读取整数值、双精度值和字符串，那就需要一个过滤类来包装字节输入流。使用过滤器类就可以读取整数值、双精度值和字符串，而不是字节或字符。</p><p>FileterInputStream 和 FilterOutputStream是过滤数据的基类。需要处理基本数值类型时，就是用DataInputStream和DataOutputStream类来过滤字节。</p><p>###DataInputStream和DataOutputStream </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fe1k2fj31b80l27r0.jpg" alt="image-20200601195913906"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fnrp7jj31cw0monow.jpg" alt="image-20200601195934714"></p><p>基本类型的值不需要做任何转化就可以从内存复制到输出数据流。字符串的字符可以写成多种形式 ：</p><ol><li>二进制I/O中的字符与字符串</li></ol><p>一个统一码由两个字节构成。writerChar(char c )方法将字符c的统一码写入输出流。writerChars(String s )方法将字符串s中的所有字符的统一码写到输出流中。writeBytes(String s )方法将字符串s中的每个字符的统一码的低字节写入到输出流。统一码的高字节被抛弃。</p><p>writeBytes(String s )方法适用于由ASCII码构成的字符串，ASCII码仅存储统一码的低字节。如果毕业字符串包含非ASCII码的字符，就必须使用writeChars方法实现写入这个字符串。</p><p>writeUTF(String s )方法将两个字节的长度信息写入输入流，后面紧跟着的是字符串s中的每个字符的改进版UTF-8的形式。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1uojv8pj30u00zcb2a.jpg" alt="image-20200601201352901"></p><p>*<em>警告： *</em></p><p>应该按存储的顺序和格式读取文件中的数据。</p><ol start="3"><li>检测文件的末尾</li></ol><p>如果达到InputStream的末尾之后还继续从中读取数据，就会发生EOFException异常。这个异常可以用来检查是否已经到达文件末尾。</p><h3 id="BufferedInputStream-和-BufferedOutputStream"><a href="#BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="BufferedInputStream 和 BufferedOutputStream"></a>BufferedInputStream 和 BufferedOutputStream</h3><p>BufferedInputStream 和 BufferedOutputStream没有包含新的方法，它们的方法都是从InputStream 和OutputStream继承而来的。它们在后来管理了一个缓冲区，根据要求自动从磁盘中读取数据和写入数据。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0eogrfpj31bm0i8dvx.jpg" alt="image-20200602160930843"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0fug543j31c80pukca.jpg" alt="image-20200602161036165"></p><p>缓冲区指定大小是512字节。</p><p>*<em>提示： *</em>应该总是使用缓冲区I/O来加速输入和输出。</p><h2 id="17-5-示例学习：-复制文件"><a href="#17-5-示例学习：-复制文件" class="headerlink" title="17.5 示例学习： 复制文件"></a>17.5 示例学习： 复制文件</h2><h2 id="17-6-对象I-O"><a href="#17-6-对象I-O" class="headerlink" title="17.6 对象I/O"></a>17.6 对象I/O</h2><p><strong>要点提示：</strong>ObjectInputStream 和ObjectOutputStream类可以用于读/写可序列化的对象。</p><p>ObjectInputStream 和ObjectOutputStream类除了实现基本数据类型与字符串的输入和输出之外，还可以实现对象的输入和输出。因而，可以使用ObjectInputStream 和ObjectOutputStream类代替DataInputStream和DataOutputStream。</p><p>读取时为了得到所需的数据类型，必须使用Java安全的类型转换。例如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date date = (Date)(inputStream.readObject());</span><br></pre></td></tr></table></figure><p>readObject()方法可能会抛出ClassNotFoundException.注意使用时要抛出它</p><h3 id="17-6-1-Serializable-接口"><a href="#17-6-1-Serializable-接口" class="headerlink" title="17.6.1 Serializable 接口"></a>17.6.1 Serializable 接口</h3><p>可以写入到输出流中的对象被称为可序化的。</p><p>可序化对象的类必须实现Serializable接口。</p><p>Serializable是一个标记接口。它没有方法，不需要在类中为实现Serializable接口增加额外的代码。实现这个接口可以启动Java的序列化机制，自动完成存储对象和数组的过程。</p><p>Java提供一个内在机制自动完成写对象的过程。这个过程称为对象序列化(object serialization),它是在ObjectOutputStream中实现的。相反，读取对象的过程称作反对象序列化(object deserialization),它是在ObjectInputStream中实现的。</p><p>试图存储一个不支持Serializable接口的对象会引起一个NotSerializableexception异常。</p><p>当存储一个可序列化对象时，会对该对象的类进行编码。编码包括类名、类的签名、对象实例变量的值以及该对象引用的任何其他对象的闭团，但是不存储对象静态变量的值。</p><p><strong>注意： 非序列化的数据域</strong></p><p>如果一个对象是Serializable的实例，但它包含了非序列化的实例数据域，那么就不可以序列化这个对象。为了使该对象是可序列化的，需要给这些数据域加上关键字transient,告诉Java虚拟机将对象写入流时忽略这些数据域。看下面的例子： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe7lzpgqtj31bi0e4ak6.jpg" alt="image-20200602201849302"></p><p><strong>注意： 重复的对象</strong></p><p>如果一个对象不止一次写入对象流，不会存储对象的多分副本。第一次写入一个对象时，就会为它创建一个序列号。Java虚拟机将对象的所有内容和序列号一起写入对象流。以后每次存储时，如果再写入相同的对象，就只存储序列号。读出这些对象时，它们的引用相同，因为在内存中实际上存储的只是一个对象。</p><h3 id="17-6-2-序列化数组"><a href="#17-6-2-序列化数组" class="headerlink" title="17.6.2 序列化数组"></a>17.6.2 序列化数组</h3><p>如果数组中所有元素都是可序列化的，那这个数组就是可序列化的。一个完整的数组可以使用writeObject方法写入文件，随后使用readObject方法恢复。</p><h2 id="17-7-随机访问文件"><a href="#17-7-随机访问文件" class="headerlink" title="17.7 随机访问文件"></a>17.7 随机访问文件</h2><p>*<em>要点提示： *</em>Java提供了RandomAccessFile类，允许从文件的任何位置进行数据的读写。</p><p>只读的流或者只写的流被称为顺序(sequential)流。使用顺序流打开的文件被称为顺序访问文件。顺序访问文件的内容不能更新。</p><p>使用RandomAccessFile类打开的文件称为随机访问文件。</p><p>RandomAccessFile类实现了DateInput和DataOutput接口。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexci82n0j31bc0u07wh.jpg" alt="image-20200603110915507"></p><p>创建一个RandomAccessFile时，可以指定两种模式(“r”，“rw”)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.dat"</span>, <span class="string">"rw"</span>);</span><br></pre></td></tr></table></figure><p>如果test.dat 已经存在，则创建raf以便访问这个文件，否则就创建一个名为test.dat的新文件，再创建raf以便访问这个文件。raf.length()返回给定时刻文件test.dat中的字节数。向文件中追加数据，raf.length就会增加。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexlt416tj310r0u0b29.jpg" alt="image-20200603111803022"></p><p>在RandomAccessFile中使用setLength(0)方法将文件长度设置为0。这样做的效果是将文件的原有内容删除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二进制I-O&quot;&gt;&lt;a href=&quot;#二进制I-O&quot; class=&quot;headerlink&quot; title=&quot;二进制I/O&quot;&gt;&lt;/a&gt;二进制I/O&lt;/h1&gt;&lt;h2 id=&quot;17-1-引言&quot;&gt;&lt;a href=&quot;#17-1-引言&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaFx UI组件和多媒体</title>
    <link href="http://www.nianchu.space/2020/05/22/Java/JavaFx%20UI%E7%BB%84%E4%BB%B6%E5%92%8C%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>http://www.nianchu.space/2020/05/22/Java/JavaFx%20UI%E7%BB%84%E4%BB%B6%E5%92%8C%E5%A4%9A%E5%AA%92%E4%BD%93/</id>
    <published>2020-05-22T07:58:00.000Z</published>
    <updated>2020-05-27T08:01:44.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaFx-UI组件和多媒体"><a href="#JavaFx-UI组件和多媒体" class="headerlink" title="JavaFx UI组件和多媒体"></a>JavaFx UI组件和多媒体</h1><h2 id="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"><a href="#引言JavaFX提供了许多UI组件，用于开发全面的用户界面" class="headerlink" title="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"></a>引言JavaFX提供了许多UI组件，用于开发全面的用户界面</h2><p>Oracle公司提供了可视化设计和开发GUI的工具。这使得程序员可以用最少的编码快速将图形用户界面(GUI)元素组装在一起，然而，任何工具都不是万能的。有时需要修改这些工具生成的程序。所以，理解JavaFx GUI程序设计的一些基本概念非常有必要。</p><p><img src="media/15898826720171.jpg" alt="-w1120"></p><p><img src="media/15898827040254.jpg" alt="-w1154"></p><h2 id="Labeled和Label"><a href="#Labeled和Label" class="headerlink" title="Labeled和Label"></a>Labeled和Label</h2><p>要点提示 ：JavaFX提供了许多组件，用于开发全面的用户界面</p><p>标签(label)是一个显示小段文字、一个节点或同时显示两者的区域。它通常用来给其他组件(通常是文本域)做标签。</p><p>标签和按钮共享许多共同的属性。这些属性定义在Labeled类中。<br><img src="media/15898830157493.jpg" alt="-w1144"></p><p>Label可以使用下面三种构造方法的其中之一进行构建，如图：<br><img src="media/15898830571137.jpg" alt="-w1080"></p><p>Graphic属性可以是任何一个节点，比如一个形状、一个图像或者一个组件。</p><p>*<em>注意： *</em><br>使用ContentDisplay()用于设置的不是标签相对于图像节点的位置，而是图像节点相对于标签的位置<br>HBox将所有节点放在水平线上</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>button是单击时触发动作时间的组件。JavaFx提供了常规按钮、开关按钮、复选框按钮和单选按钮。这些按钮的共同特性在ButtonBase和Label类中定义。</p><p>按钮与标签非常相似，除了按钮具有定义在ButtonBase类中的onAction属性，该属性设置一个用于处理按钮动作的处理器。<br><img src="media/15898859183657.jpg" alt="-w1128"></p><p>*<em>注意： *</em><br>BorderPane是这样一个面板： 将节点放置在顶部、右边、底部、左边以及中间区域</p><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>复选框用于提供给用户进行选择。<br>复选框提供了selected属性用于表明一个复选框是否被选中。 </p><p><img src="media/15899068142632.jpg" alt="-w1113"></p><p>VBox: 节点放在单列里<br>HBox： 节点放在单行里</p><h2 id="单选按钮-radio-button"><a href="#单选按钮-radio-button" class="headerlink" title="单选按钮 radio button"></a>单选按钮 radio button</h2><p>又称为选项按钮，用于让用户从一组选项中选择一个单一的条目。</p><p>外观上单选按钮类似于复选框<br>复选框是方形的，可以选中或者不选中<br>单选按钮显示一个圆，或是填充的或是空白的。分别对应选中和未选中<br>RadioButton是ToggleButton的子类。单选按钮和开关按钮的不同之处是，单选按钮显示一个圆，而开关按钮渲染成类似按钮<br><img src="media/15899400921265.jpg" alt="-w1142"></p><p><img src="media/15899403065993.jpg" alt="-w1132"></p><h2 id="文本域-text-filed"><a href="#文本域-text-filed" class="headerlink" title="文本域 text filed"></a>文本域 text filed</h2><p>可以用于输入或者显示一个字符串。<br>TextField是TextInputControl的子类。<br><img src="media/15899411471024.jpg" alt="-w1150"><br><em><em>注意： *</em><br>如果一个文本域用于输入密码，使用PasswordField来替代TextFiled。PasswordField继承自TextField，将输入文本隐藏为回显字符</em>…..</p><h2 id="文本区域-TextArea"><a href="#文本区域-TextArea" class="headerlink" title="文本区域 TextArea"></a>文本区域 TextArea</h2><p>要点提示： TextArea允许用户输入多行文本<br>如果需要让用户输入多行文本，可以创建多个TextField的实例。<strong>或者</strong>选择使用TextArea，它允许用户输入多行文本<br><img src="media/15899420441135.jpg" alt="-w1120"></p><p>TextArea提供滚动支持，但是通常而言，创建一个ScrollPane对象来包含一个TextArea的实例，并且让ScrolPane处理TextArea的滚动会更加方便。<br><em>提示</em>： 可以将任何节点放置在ScrollPane中。如果空间太大以至于不能在显示区域内完整显示，ScrollPane提供了垂直和水平方向的自动滚动支持</p><h2 id="组合框-combo-box"><a href="#组合框-combo-box" class="headerlink" title="组合框 combo box"></a>组合框 combo box</h2><p>要点提示 ：组合框也称为选择列表(choice list)或下拉式列表(drop-down),他包含一个条目列表，用户能够从中进行选择。</p><p>组合框可以限制用户的选择范围，并避免对输入数据有效性进行繁琐的检查。以下为ComBox类中的一些常用的属性和构造方法。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gezavug3g1j31m50u0wlt.jpg" alt="image-20200520224822234"></p><p>ComboBox定义为一个泛型类。泛型T为保存在一个组合框中的元素指定元素类型。</p><p>ComBox继承自ComBoxBase。ComBox可以触发一个ActionEvent事件。当一个条目被选中后，一个ActionEvent事件被触发。</p><p><strong>ObservableList是Java.util.List的子接口,因此你可以将定义在List中的所用方法应用于ObservableList。</strong></p><p><strong>JavaFX提供了一个静态方法FXCollections.observableArrayList(arrayOfElements)来从一个元素数组中创建一个ObservableList。</strong></p><h2 id="列表视图-ListView"><a href="#列表视图-ListView" class="headerlink" title="列表视图 ListView"></a>列表视图 ListView</h2><p>ListView是一个泛型类。泛型T为存储在一个列表视图中的元素指定了元素类型。</p><p>如下是： ListView的详细： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf07xiv2vrj31rq0og7wh.jpg" alt="image-20200521175156890"></p><p>getSelectionModel()方法返回一个SelectionModel实例，该实例包含了设置选择模式以及获得被选中的索引值和条目的方法。</p><p>选择模式由以下连个常量之一定义，分别是SelectionMode.MULTIPLE和SelectionMode.SINGLE。它们表明可以选择单个还是多个条目。默认为SINGLE.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf085neu1bj31qm0toquu.jpg" alt="image-20200521175948759"></p><p><strong>注意⚠️</strong>：</p><p>程序代码运行之后，在列表视图中具体实现多选需要结合特定的按键。例如在mac os上，按住command的同时，用鼠标多选项目即可。</p><h2 id="滚动条-ScrollBar"><a href="#滚动条-ScrollBar" class="headerlink" title="滚动条 ScrollBar"></a>滚动条 ScrollBar</h2><p>要点提示： ScrollBar是一个允许用户从一个范围的值中进行选择的组件</p><p>用户可以通过鼠标操作改变滚动条的值。</p><p>ScrollBar的属性如下： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0fjj5m5dj31qz0u0hdt.jpg" alt="image-20200521221513304"></p><p><strong>注意：</strong> 滚动条的轨道宽度对应于max + visibleAmount。当一个滚动条设置为它的最大值时，块的左侧位于max，右侧位于max + visibleAmount。</p><p><strong>实际操作中的经验：</strong> 想要实现拖动滑动条移动Text的位置，必须将文本放在一个面板中，然后面板置于边框面板的中央。如果文本直接放在边框面板的中央，不能通过重设它的x和y属性改变文本的位置。</p><h2 id="滑动条-Slider"><a href="#滑动条-Slider" class="headerlink" title="滑动条 Slider"></a>滑动条 Slider</h2><p>要点提示 ：Slider与ScrollBar类似，但是Slider有更多属性，并且可以以多种形式显示。Slider允许用户通过在一个有界的区间中滑动滑块，从而以图形方式选择一个值。滑动条可以显示区间中的主刻度以及次刻度。刻度之间的像素值是由majorTickUnit和minorTickUnit属性指定的，分别表示主像素和次要像素。</p><p>滑块可以水平显示也可以垂直显示，可以带刻度可以不带刻度。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0ysa4it8j31qi0t8hdt.jpg" alt="image-20200522092106948"></p><p><strong>注意</strong>：垂直滚动条的值从上向下是增加的，但是垂直滑动条的值从上到下是减少的。</p><h2 id="示例学习：-开发一个井字游戏"><a href="#示例学习：-开发一个井字游戏" class="headerlink" title="示例学习： 开发一个井字游戏"></a>示例学习： 开发一个井字游戏</h2><p>*<em>注意： *</em>在开发和测试一个Java项目时，可以采用渐进的方法。</p><h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><p>*<em>要点提示： *</em>使用Media来获得媒体源，使用MediaPlayer类来播放和控制媒体，使用MediaView来显示视频。</p><p>媒体(视频和音频)对于开发富因特网应用是必要的。</p><p>JavaFX支持MP3、AIFF、WAV以及MPEG-4音频格式以及FLV和MPEG-4视频格式。</p><p>Media类代表了一个媒体源，具有duration、width以及height属性。</p><p>可以从一个Internet URL字符串中创建以一个Media对象。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71dgaeehj31se0lk1kx.jpg" alt="image-20200527152400018"></p><p>MediaPlayer类播放媒体，并通过一些属性来控制媒体播放，比如autoPlay、currentCount、cycleCount、mute、volume和totalDuration。可以从一个媒体对象来构建一个MediaPlayer对象，并使用pause()、play()方法来暂停和继续播放。</p><p>MediaView类是Node的子类，提供MediaPlayer播放的Media视图。MediaView类提供了一些属性用于观看媒体。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71h25jqkj31mh0u0hdt.jpg" alt="image-20200527152730968"></p><p>Media,MediaPlayer,MediaView的关系如下：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf72el0r5cj31py08ygth.jpg" alt="image-20200527155944537"></p><p>一个Media对象支持实时流媒体。一个Media对象可以被多个播放器共享，并且不同的视图可以使用同一个MediaPlayer对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaFx-UI组件和多媒体&quot;&gt;&lt;a href=&quot;#JavaFx-UI组件和多媒体&quot; class=&quot;headerlink&quot; title=&quot;JavaFx UI组件和多媒体&quot;&gt;&lt;/a&gt;JavaFx UI组件和多媒体&lt;/h1&gt;&lt;h2 id=&quot;引言JavaFX提供了许多
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java/事件驱动编程和动画</title>
    <link href="http://www.nianchu.space/2020/05/22/Java/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <id>http://www.nianchu.space/2020/05/22/Java/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8A%A8%E7%94%BB/</id>
    <published>2020-05-22T02:32:31.292Z</published>
    <updated>2020-05-27T07:18:19.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-事件驱动编程和动画"><a href="#Java-事件驱动编程和动画" class="headerlink" title="Java 事件驱动编程和动画"></a>Java 事件驱动编程和动画</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>要点提示： 可以编写代码以处理诸如单击按钮、鼠标移动以及按键盘之类的时间。</p><p>为了响应一个按钮单击事件，你需要编写代码来处理按钮单击动作。按钮是一个事件源对象，即动作起源的地方。需要创建一个能对一个按钮动作事件进行处理的对象，即事件处理器。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf10yxo1j2j31h00ccn5y.jpg" alt="image-20200522103644432"></p><p>不是多有对象都可以成为一个动作事件的处理器。要成为一个动作事件的处理器，必须满足两个要求： </p><ol><li>该对象必须是EventHandler<T extends Event>接口的一个示例。接口定义了所有处理器的共同行为。T extends Event是一个Event子类型的泛型。</li><li>EventHandler对象handler必须使用方法source.setOnAction(handler)和事件源对象注册</li><li>EventHandler <ActionEvent> 接口包含了 handle ( ActionEvent ) 方法用于处理动作事件。你的处理器类必须覆盖这个方法来响应事件 。 15 ActionEvent 事件的代码 。</li></ol><h2 id="事件和事件源"><a href="#事件和事件源" class="headerlink" title="事件和事件源"></a>事件和事件源</h2><p>要点提示： 事件是从一个事件源上产生的对象。触发一个事件意味着产生一个事件并委托处理器处理该事件。</p><p>事件驱动编程： 当运行一个Java GUI程序的时候，程序和用户进行交互，并且事件驱动它的执行。这称为事件驱动编程。 </p><p>事件可以被定义为一个告知程序某件事发生的信号。</p><p>事件由外部的用户动作，比如鼠标的移动、单击和键盘按键所触发。</p><p>事件源对象： 产生一个事件并且出发它的组件称为事件源对象，或称为源对象或者源组件。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11rhaq5ej31go0ictj7.jpg" alt="image-20200522110409887"></p><p><strong>注意</strong>：如果一个组件可以触发一个事件，那么这个组件的任何子类都可以触发同样类型的事件。比如，每个JavaFX形状、布局面板和组件都可以触发MouseEvent和KeyEvent事件，因为Node是形状、布局面板和组件的超类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11uy6ln2j31i20u0qv5.jpg" alt="image-20200522110728861"></p><h2 id="注册处理器和处理事件"><a href="#注册处理器和处理事件" class="headerlink" title="注册处理器和处理事件"></a>注册处理器和处理事件</h2><p><strong>要点提示</strong>： 处理器是一个对象，<strong>它必须通过一个事件源对象进行注册，并且它必须是一个恰当的事件处理接口的实例。</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf124m0abdj31so0is7vo.jpg" alt="image-20200522111645923"></p><p><strong>技巧：</strong>设计一个类来建模一个包含了支持方法的面板是一个好的策略，这样相关的方法和面板都耦在一个对象中来。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>要点提示： 内部类，或者称为嵌套类，是一个定义在另外一个类范围中的类。内部类对于定义处理器非常有用。</p><p>一个内部类可以如常规类一样使用。通常，在一个类只被它的外部类所使用的时候，才将它定义为内部类。</p><p>一个内部类具有下面的特征：</p><ul><li>一个内部类被被编译为OuterClassName$InnerClassName的类。</li><li>一个内部类可以引用定义在它所在的外部类中的数据和方法。所以，没有必要将外部类对象的引用传递给内部类的构造方法。内部类可以使程序更加精简。</li><li>一个内部类可以使用可见性修饰符所定义，和应用于一个类中的成员的可见性规则一样</li><li>一个内部类可以被定义为static。一个static的内部类可以使用外部类的名字所访问。一个static的内部类不能访问外部类中非静态成员。</li><li>内部类对象通常在外部类中所创建。也可以从另外一个类中来创建一个内部类的对象。如果内部类是非静态的，你必须先创建一个外部类的实例，然后使用以下语法来创建一个内部类的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = outerObject.<span class="keyword">new</span> InnerClass();</span><br></pre></td></tr></table></figure><ul><li>如果内部类是静态的，使用以下语法来创建一个内部类对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = <span class="keyword">new</span> OuterClass.InnerClass();</span><br></pre></td></tr></table></figure><p>内部类的用途： </p><ul><li>将相互依赖的类结合到一个主类中</li><li>避免类名的冲突</li></ul><p>一个处理器类被设计为针对一个GUI组件创建一个处理器对象(比如，一个按钮)。处理器类不会被其他应用所共享，所以将它定义在主类里面作为一个内部类是恰如其分的。</p><h2 id="匿名内部类处理器"><a href="#匿名内部类处理器" class="headerlink" title="匿名内部类处理器"></a>匿名内部类处理器</h2><p><strong>要点提示</strong>：一个匿名内部类是一个没有名字的内部类。它将进一步实现定义一个内部类以及创建一个内部类的实例。</p><p>下面是一个内部类被匿名内部类替代的示例： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf1a0ynvklj31sm0m81c4.jpg" alt="image-20200522154958242"></p><p>匿名内部类的语法如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> superClassName/InterfaceName()&#123;</span><br><span class="line"><span class="comment">// Implement or override methods in superclass or interface</span></span><br><span class="line"><span class="comment">// Other methods if necessary</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类是一种特殊类型的内部类，它被当作一个内部类对待，同时具有下面的特征： </p><ul><li>一个匿名内部类必须总是从一个父类继承或者实现一个接口，但是它不能有显式的extends或者implements子句</li><li>一个匿名内部类必须实现父类或者接口中的所有抽象方法</li><li>一个匿名内部类总是使用它父类的无参构造方法来创建一个实例。如果一个匿名内部类实现一个接口，构造方法是Object().</li><li>一个匿名内部类被编译成一个名为OuterClassName$n.class。</li></ul><p>例如如果外部类Test有两个匿名的内部类，它们将被编译成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用lambda表达式简化事件处理</span><br><span class="line"></span><br><span class="line">要点提示： lambda表达式可以用于极大简化事件处理器的代码编写.</span><br><span class="line"></span><br><span class="line">lambda表达式可以被看作使用精简语法的匿名内部类。</span><br><span class="line"></span><br><span class="line">如图是将匿名内部类用lambda表达式代替的一个例子：</span><br><span class="line"></span><br><span class="line">![image-20200524001209498](https://tva1.sinaimg.cn/large/007S8ZIlly1gf2u5ud8zgj31qq0kmdrp.jpg)</span><br><span class="line"></span><br><span class="line">一个lambda表达式的基础语法是： </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">(type1 parm1, type2 parm2, ...) -&gt; expression</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(type1 parm1, type2 parm2, ...) -&gt; &#123;statements;&#125;</span><br></pre></td></tr></table></figure><p>一个参数的数据类型既可以显式声明，也可以由编译器隐式推断。如果只有一个参数，并且没有显示的数据类型，圆括号可以被省略。</p><p>因而上面(截图)的例子可以表示为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e -&gt; &#123;</span><br><span class="line">  <span class="comment">// Code for processing event e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3fxuqocej31v00l04qp.jpg" alt="image-20200524124547574"></p><h2 id="示例学习：-贷款计算器"><a href="#示例学习：-贷款计算器" class="headerlink" title="示例学习： 贷款计算器"></a>示例学习： 贷款计算器</h2><h2 id="示例学习-鼠标事件"><a href="#示例学习-鼠标事件" class="headerlink" title="示例学习: 鼠标事件"></a>示例学习: 鼠标事件</h2><p><strong>要点提示：</strong>当一个鼠标按键在一个节点或者一个场景中被按下、释放、单击、移动或者拖动时，一个MouseEvent事件被触发。</p><p>MouseEvent对象捕捉事件，例如和它相关的单击数、鼠标位置或者那个叫鼠标按键被按下： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3kcgren1j31so0u0n49.jpg" alt="image-20200524151800627"></p><p>四个常数——PRIMARY,SECONDARY,MIDDLE和None在MouseEvent中被定义，表明鼠标的左、右、中以及无按钮。shiyonggetButton()方法来探测哪个按钮被按下。</p><p>在任何节点和场景都可触发鼠标事件。</p><h2 id="键盘事件-KeyEvent"><a href="#键盘事件-KeyEvent" class="headerlink" title="键盘事件 KeyEvent"></a>键盘事件 KeyEvent</h2><p><strong>要点提示:</strong>在一个节点或者一个场景上面只要按下、释放或者敲击键盘，就会触发一个KeyEvent事件。</p><p>键盘事件使得可以采用键盘来控制和执行动作，或者从键盘获得输入。KeyEvent对象描述了事件的性质(即，一个按键被按下释放或者敲击)以及键值。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l1fsp2ej31ni0k4b11.jpg" alt="image-20200524154213607"></p><p>每个键盘事件有一个相关的编码，可以通过KeyEvent的getCode()方法返回。键的编码是定义在KeyCode中的常量。KeyCode是一个enum类型的变量。</p><p>对于按下键和释放键的事件，getCode()返回表中的值， getText()返回一个描述键的代码的字符串， getCharacter()返回一个空字符串。对于敲击键额事件，geCode()返回UNDEFINED, getcCharacter()返回相应的Unicode字符或者和敲击事件相关的一个字符序列。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7ne7h0j31us0gu4e3.jpg" alt="image-20200524154812371"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7uwigwj31ue0ho18h.jpg" alt="image-20200524154825125"></p><p><strong>注意</strong></p><p>在一个枚举类型值的switch语句中，case后面跟的是枚举常量。常量是不受限制的(unqalified)即无须加KeyCode等类限定。例如： 在case子句中使用keyCode.DOWN将出现错误。</p><p>只有一个被拒交的节点可以接受KeyEvent事件。在一个text上调用requestFocus()使得text可以接受键盘输入。<strong>这个方法必须在舞台被显示后调用。</strong></p><p><strong>注意：</strong> 单击一个按钮之后，circlePane将不再被聚焦，为了修复这个问题，可以在每次按钮被单击后，在circlePane上再次调用requestFocus()。</p><h2 id="可观察对象的监听器"><a href="#可观察对象的监听器" class="headerlink" title="可观察对象的监听器"></a>可观察对象的监听器</h2><p>*<em>要点提示： *</em>可以通过添加一个监听器来处理可观察对象中的值的变化</p><p>一个Observable类的实例被认为是一个可观察对象，它包含了一个addListener(InvalidationListener listener)方法用于添加监听器。监听器类必须实现InvalidationListenr接口以重写invalidate(Observable o)方法，从而可以处理值的改变。一旦observable中的值改变了，通过调用invalidate(Observable o)方法，监听器得到通知。每个绑定属性都是Observable的实例。  </p><p>可以使用lambda来简化添加监听器的流程。注意处理器使用的是e，监听器使用的是ov。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>*<em>要点提示： *</em>JavaFx中的Animaiton类为所有的动画制作提供了核心功能。</p><p>JavaFX提供了许多Animation的具体子类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3r5dr678j31ui0rchdt.jpg" alt="image-20200524191335802"></p><p>其中autoReverse是一个Boolean属性，表示下一周期中动画是否要倒转方向。cycleCount表示了该动画的循环次数。使用Tiemline.INDEFINTE表示无限循环。rate定义了动画的速度。一个负的rate值表示动画的相反方向。status是只读属性，表明了动画的状态(Animation.Status.PAUSED、Animation.Status.RUNNING和Animation.Status.STOPPED)。方法pause(),play(),stop()分别表示暂停、播放和终止动画。</p><h3 id="PathTrasition"><a href="#PathTrasition" class="headerlink" title="PathTrasition"></a>PathTrasition</h3><p>PathTrasition类制作一个在给定时间，节点沿着一条路从一个端点到另一个端点的移动动画，PathTransition是Animation的子类型。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3rd7dkj4j31os0u0kjl.jpg" alt="image-20200524192103626"></p><p>Duration类定义了持续事件。它是一个不可更改的类。这个类定义类常量INDEFINTE，ONE，UNKNOW和ZERO来代表一个无限循环、1毫秒、未知以及哦的持续时间。可以使用new Duration(double millis)来创建一个Duration实例，使用add、substract、multiply和divide方法来执行算数操作，还可以使用toHours(),toMinutes(),toSeconds()和tomMillis()来返回持续时间值中的小时数、分钟数、秒钟数和毫秒数。还可以使用comPareTo来比较两个持续时间。</p><p>常量NONE和ORTHOGONAL_TO_TANGET在PathTransiton.OrientationType中定义。后者确定节点在沿着几何路径移动的过程中是否和路径的切线保持垂直。</p><h2 id="FadeTransition"><a href="#FadeTransition" class="headerlink" title="FadeTransition"></a>FadeTransition</h2><p>FadeTransition类在一个给定的时间内，通过改变一个节点的透明度来产生动画。FadeTransition是Animation的子类型。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf53fa5cbdj31tw0tahdt.jpg" alt="image-20200525230347355"></p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>PathTransition和FadeTransition定义类的特定的动画。Timeline类可以通过使用一个或者更多的KeyFrame(关键帧)来编写任意动画。每个KeyFrame在一个给定的时间间隔内顺序执行。Timeline继承自Animation。</p><p>通过new Timeline(KeyFrame… keyframe)来构建一个Timeline。</p><p>一个KeyFrame可以使用以下语句来构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> KeyFrame(Duration duration, EeventHandler&lt;ActionEvent&gt; onFinished)</span><br></pre></td></tr></table></figure><p>处理器onFinished方法当这个关键帧的持续时间结束后被调用。</p><h2 id="示例学习-：弹球"><a href="#示例学习-：弹球" class="headerlink" title="示例学习 ：弹球"></a>示例学习 ：弹球</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-事件驱动编程和动画&quot;&gt;&lt;a href=&quot;#Java-事件驱动编程和动画&quot; class=&quot;headerlink&quot; title=&quot;Java 事件驱动编程和动画&quot;&gt;&lt;/a&gt;Java 事件驱动编程和动画&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/W3Cschool/JavaFX/JavaFX 复选框</title>
    <link href="http://www.nianchu.space/2020/05/20/Java/W3Cschool/JavaFX/JavaFX%20%E5%A4%8D%E9%80%89%E6%A1%86/"/>
    <id>http://www.nianchu.space/2020/05/20/Java/W3Cschool/JavaFX/JavaFX%20%E5%A4%8D%E9%80%89%E6%A1%86/</id>
    <published>2020-05-19T16:40:22.448Z</published>
    <updated>2020-05-19T16:40:22.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C 第二章 对C的扩展</title>
    <link href="http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%B9C%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%B9C%E7%9A%84%E6%89%A9%E5%B1%95/</id>
    <published>2020-05-17T06:05:24.501Z</published>
    <updated>2020-06-20T12:27:53.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对C的扩展"><a href="#对C的扩展" class="headerlink" title="对C的扩展"></a>对C的扩展</h1><h2 id="2-1-最简单的Object-C"><a href="#2-1-最简单的Object-C" class="headerlink" title="2.1 最简单的Object-C"></a>2.1 最简单的Object-C</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfyt4thp8bj314y09skb3.jpg" alt="image-20200620155442707"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfytiqy5wnj314s0bu7q7.jpg" alt="image-20200620160810017"></p><p>如果用户提供文件路径，argc值为1，如果提供了文件路径，argc将大于1.</p><p>argv[0]:保存用户提供的文件名</p><p> argv[1]:保存程序名字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对C的扩展&quot;&gt;&lt;a href=&quot;#对C的扩展&quot; class=&quot;headerlink&quot; title=&quot;对C的扩展&quot;&gt;&lt;/a&gt;对C的扩展&lt;/h1&gt;&lt;h2 id=&quot;2-1-最简单的Object-C&quot;&gt;&lt;a href=&quot;#2-1-最简单的Object-C&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C第一章 启程</title>
    <link href="http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%90%AF%E7%A8%8B/"/>
    <id>http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%90%AF%E7%A8%8B/</id>
    <published>2020-05-17T05:59:05.788Z</published>
    <updated>2020-05-17T06:04:34.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-启程"><a href="#第一章-启程" class="headerlink" title="第一章 启程"></a>第一章 启程</h1><h2 id="1-2-历史背景"><a href="#1-2-历史背景" class="headerlink" title="1.2 历史背景"></a>1.2 历史背景</h2><p>Steve Jobs 成立了NeXT公司。NeXT选择Unix作为其操作系统，创建了NextSTEP。NextSTEP后被命名为Cocoa。</p><h2 id="1-3-内容简介"><a href="#1-3-内容简介" class="headerlink" title="1.3 内容简介"></a>1.3 内容简介</h2><p>oc是C语言的一个扩展集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-启程&quot;&gt;&lt;a href=&quot;#第一章-启程&quot; class=&quot;headerlink&quot; title=&quot;第一章 启程&quot;&gt;&lt;/a&gt;第一章 启程&lt;/h1&gt;&lt;h2 id=&quot;1-2-历史背景&quot;&gt;&lt;a href=&quot;#1-2-历史背景&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
