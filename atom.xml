<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nianchu-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nianchu.space/"/>
  <updated>2020-06-04T01:31:06.013Z</updated>
  <id>http://www.nianchu.space/</id>
  
  <author>
    <name>nianchu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java/递归</title>
    <link href="http://www.nianchu.space/2020/06/03/Java/%E9%80%92%E5%BD%92/"/>
    <id>http://www.nianchu.space/2020/06/03/Java/%E9%80%92%E5%BD%92/</id>
    <published>2020-06-03T14:09:56.982Z</published>
    <updated>2020-06-04T01:31:06.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第18章-递归"><a href="#第18章-递归" class="headerlink" title="第18章 递归"></a>第18章 递归</h1><h2 id="18-1-引言"><a href="#18-1-引言" class="headerlink" title="18.1 引言"></a>18.1 引言</h2><p>*<em>要点提示： *</em>递归是一种针对使用简单的循环难以编程实现的问题，提供优雅解决方案的技术</p><p>有关H-树的知识： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffgrtd6h3j31eo0kk4k7.jpg" alt="image-20200603222118178"></p><p>使用递归就是使用递归方法编程，递归方法就是直接或间接调用自身的方法。递归是一个很有用的程序技术。</p><h2 id="18-2-示例学习：-计算阶乘"><a href="#18-2-示例学习：-计算阶乘" class="headerlink" title="18.2 示例学习： 计算阶乘"></a>18.2 示例学习： 计算阶乘</h2><p>一个递归调用可以导致更多的递归调用，因为这个方法继续把每个子问题分解成新的子问题。要终止一个递归方法，问题最后必须达到一个终止条件。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffhrsxlzfj315y0u01kx.jpg" alt="image-20200603225556923"></p><p><strong>如果递归不能使问题简化并最终收敛到基础情况，就有可能出现无限递归。</strong></p><h2 id="18-3-示例学习：-计算斐波那契数"><a href="#18-3-示例学习：-计算斐波那契数" class="headerlink" title="18.3 示例学习： 计算斐波那契数"></a>18.3 示例学习： 计算斐波那契数</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第18章-递归&quot;&gt;&lt;a href=&quot;#第18章-递归&quot; class=&quot;headerlink&quot; title=&quot;第18章 递归&quot;&gt;&lt;/a&gt;第18章 递归&lt;/h1&gt;&lt;h2 id=&quot;18-1-引言&quot;&gt;&lt;a href=&quot;#18-1-引言&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML/21天学通HTML+CSS+JavaScript Web开发</title>
    <link href="http://www.nianchu.space/2020/06/01/HTML/21%E5%A4%A9%E5%AD%A6%E9%80%9AHTML+CSS+JavaScript%20Web%E5%BC%80%E5%8F%91/"/>
    <id>http://www.nianchu.space/2020/06/01/HTML/21%E5%A4%A9%E5%AD%A6%E9%80%9AHTML+CSS+JavaScript%20Web%E5%BC%80%E5%8F%91/</id>
    <published>2020-06-01T06:29:32.322Z</published>
    <updated>2020-06-04T16:48:04.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>##第1章 何为Web发布</p><h3 id="1-1-像Web发布者一样思考"><a href="#1-1-像Web发布者一样思考" class="headerlink" title="1.1 像Web发布者一样思考"></a>1.1 像Web发布者一样思考</h3><p>Web是： </p><ul><li>一个超文本信息系统</li><li>跨平台的</li><li>分布式的</li><li>交互式的</li></ul><h4 id="1-1-1-Web是一个超文本信息系统"><a href="#1-1-1-Web是一个超文本信息系统" class="headerlink" title="1.1.1 Web是一个超文本信息系统"></a>1.1.1 Web是一个超文本信息系统</h4><p>超文本的含义： 不像看书那样以线性方式阅读，而是可以轻松从一个地方跳到另一个地方： 可以获取更详细的信息，再回过去阅读、跳到其他主题或者根据兴趣阅读。</p><p>术语超文本，可以理解为链接。链接也可称为超链接。</p><h4 id="1-1-2-Web是跨平台的"><a href="#1-1-2-Web是跨平台的" class="headerlink" title="1.1.2 Web是跨平台的"></a>1.1.2 Web是跨平台的</h4><p>跨平台意味着不管使用什么计算机硬件，也不管运行的是什么操作系统，装备的是什么显示器，都可以一样地访问Web信息。</p><p>下面是书中提供的一个很有意思的观点： </p><p><strong>跨平台是一种理想：</strong></p><p>随着众多特殊功能、技术和媒体类型的推出，Web的跨平台性特征遭到了损害，Web发布者可以使用很多非标准特性，如Flash，但这样做将缩小其网站的受众范围，如果考虑到越来越多的人转而使用智能手机和移动设备来访问Web，Web发布者还必须做出如下选择： 专门创建用于移动设备的应用程序，还是打造跨平台兼容性更强的Web应用程序。该不该为特定平台提供更强大的功能而降低跨平台的灵活性呢？</p><h4 id="1-1-3-Web是分布式的"><a href="#1-1-3-Web是分布式的" class="headerlink" title="1.1.3 Web是分布式的"></a>1.1.3 Web是分布式的</h4><p>Web为什么能成功地提供海量信息呢？因为这些信息分布在全球的数百万个网站中，而每个网站都分别存储其发布的信息。每个网站驻留在一台或者多台被称为Web服务器的计算机上。Web服务器也是计算机，只是负责侦听并相映Web浏览器的请求。我们使用Web浏览器时，请求服务器提供资源以便查看它。我们只是将浏览器指向网站，其他什么都没有做。</p><p>网站是Web上一个发布信息的位置。您浏览网页时，浏览器连接到网络以获取该网页。每个网站、网站的每个 网页乃至每项信息都有独一无二的地址，这个地址被称为 ：统一资源定位符(URL).</p><h4 id="1-1-4-Web是动态的"><a href="#1-1-4-Web是动态的" class="headerlink" title="1.1.4 Web是动态的"></a>1.1.4 Web是动态的</h4><p>重启浏览器可以获取Web上更新的信息</p><p>当前，甚至都无须重新加载网页就能看到最新的信息。通过使用JavaScript可以实时地更新网页的内容。</p><h4 id="1-1-5-Web是交互式的"><a href="#1-1-5-Web是交互式的" class="headerlink" title="1.1.5 Web是交互式的"></a>1.1.5 Web是交互式的</h4><p>Web的交互性是通过单击链接跳到其他网页实现的。除此之外，Web还可以让用户同发布者和其他用户交流。</p><h3 id="1-2-Web浏览器"><a href="#1-2-Web浏览器" class="headerlink" title="1.2 Web浏览器"></a>1.2 Web浏览器</h3><p><strong>注意：</strong>仅当您确定只有使用特定浏览器的用户访问您的网站时，选择针对该浏览器进行开发才是合适的。</p><h4 id="1-2-1-Web浏览器的作用"><a href="#1-2-1-Web浏览器的作用" class="headerlink" title="1.2.1 Web浏览器的作用"></a>1.2.1 Web浏览器的作用</h4><p>Web浏览器的核心作用是连接到We服务器并请求文档，再妥善地设置这些文档的格式并显示它们。</p><p>Web浏览器还可显示本地计算机中的文件、下载并非用于显示的文件，甚至让用户能够发送和接受电子邮件。</p><p>所有网页都是使用超文本标记语言HTML编写的，这种语言指定网页包含的文本、描述网页的结构、指定到其他文档和图像等多媒体。</p><p>即使是同一个文件，不同浏览器设置其格式和显示的方式也可能不同，这取决于系统的功能以及浏览器的配置。</p><h4 id="1-2-2-概述一些流行的Web浏览器"><a href="#1-2-2-概述一些流行的Web浏览器" class="headerlink" title="1.2.2 概述一些流行的Web浏览器"></a>1.2.2 概述一些流行的Web浏览器</h4><p><em>Google Chrome</em></p><p>和Apple Safari使用的是一个HTML引擎——开源引擎WebKit.</p><p><strong>注意：</strong></p><p>如果要检查跨平台兼容性问题，请从IE 和 Firefox开始，再将Chrome也囊括进来。</p><p><em>Firfox</em></p><p>Firfox得以流行是因为它不存在困扰IE的安全问题。</p><h3 id="1-3-Web服务器"><a href="#1-3-Web服务器" class="headerlink" title="1.3 Web服务器"></a>1.3 Web服务器</h3><p>要将网页发布到Web上，需要一个Web服务器。</p><p>Web服务器是在计算机上运行的程序，负责响应Web浏览器的请求——向它提供URL指定的内容。运行服务器程序的计算机也被称为服务器。</p><p><strong>您使用浏览器请求网页时，浏览器使用HTTP建立一条到服务器的Web连接。服务器接受连接，发送请求的文件，再关闭连接。接下来，浏览器对从服务器获取的信息设置格式。</strong></p><p>在服务器端，可能有很多不同的浏览器连接到同一个服务器，该服务器负责处理所有这些请求。</p><p>Web服务器还负责管理表单输入以及将表单和浏览器关联到运行在服务器上的数据库等程序。</p><h3 id="1-4-统一资源定位符"><a href="#1-4-统一资源定位符" class="headerlink" title="1.4 统一资源定位符"></a>1.4 统一资源定位符</h3><p>URL为查找并访问信息提供了统一而一致的方法。</p><p>还可以使用URL在文档中创建到另一个文档中的超文本链接。</p><p>*<em>URL包含有关如下方面的信息： *</em></p><ul><li><p>如何获取信息(使用哪种协议： FTP,HTTP还是file)；</p></li><li><p>该信息所在计算机的Internet主机名(<a href="http://www.ncsa.uiuc.edu)等" target="_blank" rel="noopener">www.ncsa.uiuc.edu)等</a></p></li><li><p>该信息位于网站的哪个目录或位置</p></li></ul><p>  还可以使用特殊的URL来完成发送邮件和运行JavaScript代码等任务</p><h3 id="1-5-广义的Web发布"><a href="#1-5-广义的Web发布" class="headerlink" title="1.5 广义的Web发布"></a>1.5 广义的Web发布</h3><p>一般而言，网页都是根据别人创建的模版生成的，通常可以设置内容的格式——使用图形编辑器或让您能够避免使用HTML的简化标记。</p><p>如果，发布的内容看起来不妥，要修复问题就必须懂HTML。</p><p>需要区分由您控制的页面部分和您使用发布应用程序生成的部分。</p><h3 id="1-7-作业"><a href="#1-7-作业" class="headerlink" title="1.7 作业"></a>1.7 作业</h3><h4 id="1-7-1-问与答"><a href="#1-7-1-问与答" class="headerlink" title="1.7.1 问与答"></a>1.7.1 问与答</h4><p>问： Web由谁负责运营？这些协议都是由谁控制的？这一切都是由谁管理的？</p><p>万维网并非由某个组织拥有或控制。<strong>有两类组织给Web的外观和发展方向带来了重大影响：</strong></p><ol><li><p>万维网联盟(W3C)： 负责制定万维网标准和实施相关的规则，网址为：<a href="http://www.w3.org" target="_blank" rel="noopener">www.w3.org</a></p></li><li><p>浏览器开发商 ：一些关心Web未来的个人和公司成立了一个名为WHATWG——超文本应用技术工作组。HTML5规范就是WHATWG和W3C一起制定的。</p><p>从现在开谁，WHATWG放弃了给HTML规范制定版本号，相反，HTML是一个“流动的标准”，将涵盖实验性功能和得到广泛支持的功能，旨在确保该规范紧跟发展步伐，涵盖浏览器开发商一致同意在其浏览器中添加的功能。</p><h2 id="第2章-准备好工具"><a href="#第2章-准备好工具" class="headerlink" title="第2章 准备好工具"></a>第2章 准备好工具</h2><h3 id="2-1-网站剖析"><a href="#2-1-网站剖析" class="headerlink" title="2.1  网站剖析"></a>2.1  网站剖析</h3><ul><li>网站： 一个或多个网页，它们以有意义的方式组织起来，一起描述了一项信息或者营造出一种效果。</li><li>Web服务器： Internet或内联网中的计算机，在收到浏览器的请求时提供网页或其他文件(内联网是Internet协议但不对公众开放的网络)</li><li>网页 ：网站上的入口页面，可链接到当前网站或者其他网站的页面。</li><li>主页： 网站的入口页面，可链接到当前网站或者其他网站的页面。</li></ul></li></ol><p>网站都由Web服务器托管。</p><p>网页有时也被称为Web文档。</p><p>网页由HTML文档和其他部分组成。</p><h3 id="2-2-为发布到Web准备好计算机"><a href="#2-2-为发布到Web准备好计算机" class="headerlink" title="2.2 为发布到Web准备好计算机"></a>2.2 为发布到Web准备好计算机</h3><p>学习如何从空白开始创建网站，就需要配置计算机，以便能够在本地创建和查看网页</p><p>尝试Web发布，只有两款工具是必不可少的，就是文本编辑器和Web浏览器。</p><h4 id="2-2-1-文本编辑器"><a href="#2-2-1-文本编辑器" class="headerlink" title="2.2.1 文本编辑器"></a>2.2.1 文本编辑器</h4><p>HTML属于纯文本文件，应使用处理纯文本的工具对其进行编辑。</p><h4 id="2-2-2-Web浏览器"><a href="#2-2-2-Web浏览器" class="headerlink" title="2.2.2 Web浏览器"></a>2.2.2 Web浏览器</h4><p>下载Google Chrome</p><p>###2.3 使用Google Chrome 开发者工具</p><p>打开开发者工具的快捷键 ：</p><ul><li>Windows中为ctrl  + Shift + I</li><li>Mac OS 中： Command + Option + I </li></ul><p>开发者工具是查看源代码这种概念的扩展，功能更加强大。</p><p>开发者工具中包含很多选项卡，默认显示的是Element，其中包含的内容类似于网页的源代码。浏览器下载网页的时候，将其进行转换，让设置HTML格式并显示它的引擎能够明白。</p><p>Element选项卡显示的是浏览器看到的HTML，而“查看源代码”显示的是浏览器下载的HTML。这两者有几个不同的地方。</p><p>将鼠标指向Element选项卡中的元素，相应的网页部分将呈高亮显示，由此可以知道网页各部分与HTML源代码的对应关系。</p><h3 id="2-4-您要在Web上做什么"><a href="#2-4-您要在Web上做什么" class="headerlink" title="2.4 您要在Web上做什么"></a>2.4 您要在Web上做什么</h3><p>对于要发布到Web上的东西，我在本书中称之为内容。</p><h3 id="2-5-绘制网站线框图"><a href="#2-5-绘制网站线框图" class="headerlink" title="2.5 绘制网站线框图"></a>2.5 绘制网站线框图</h3><p>网络规划的下一步是确定如何在网页之间分配内容，并制定在网页之间导航的方案。</p><h4 id="2-5-1-线框图是什么，为何需要绘制线框图"><a href="#2-5-1-线框图是什么，为何需要绘制线框图" class="headerlink" title="2.5.1 线框图是什么，为何需要绘制线框图"></a>2.5.1 线框图是什么，为何需要绘制线框图</h4><p>线框图是网站完成后的大致轮廓，指出了内容在网页之间的分配情况以及内容是如何彼此关联起来的。</p><p>对于复杂的大型网站，线框图可节省大量的时间，避免众多的弯路。</p><p>线框图，一般而言，是成组的文档或图像，每组表示网站中一种特定类型的网页。文档包含网页的粗略示意图指出了网页各各部分处于什么位置、占据多大空间以及将发挥的作用</p><h4 id="2-5-2-线框图绘制小贴士"><a href="#2-5-2-线框图绘制小贴士" class="headerlink" title="2.5.2 线框图绘制小贴士"></a>2.5.2 线框图绘制小贴士</h4><ul><li><p>如何在网页之间分配主题</p><p>最佳的做法是，让每个页面都包含一个主题的信息。如果页面有好几屏长，也许该奖相应的主题按逻辑分成多个子主题。</p><ul><li>在网页之间导航的主要方式是什么？ </li></ul><p>需要链接。这些是文档中的主链接，让访客能够实现您确定的目标。向前、向后、向上的链接以及到主页的链接都属于主要的导航方式。</p><ul><li>要提供其他哪些导航方式</li></ul><p>除了简单的导航链接外，还可以包含与主要Web内容平行的额外信息，如术语表</p><p>按字母顺序排列的概念索引、版权信息或职员页面。</p><ul><li>要在主页上放置哪些内容？</li></ul><p>主页上的内容应该有足够的吸引力，让目标受众留下来</p><ul><li>如何让访问内部网页的用户知道他身处何方？</li></ul><p>可以通过设计和导航实现这个目标。</p><ul><li>您的目标是什么？</li></ul><p>注意聚焦于你的目标</p><h3 id="2-6-Web托管"><a href="#2-6-Web托管" class="headerlink" title="2.6 Web托管"></a>2.6 Web托管</h3><p>迟早需要将本地计算机上创建的网站放到Internet上，最简单的方法，是获取一个这样的Web托管账户，即让您能够将HTML文件、图像、样式和其他Web内容上传到一台Web服务器。</p><h4 id="2-6-1-使用内容管理应用程序"><a href="#2-6-1-使用内容管理应用程序" class="headerlink" title="2.6.1 使用内容管理应用程序"></a>2.6.1 使用内容管理应用程序</h4><p>使用应用程序将内容发布到Web上：</p><ul><li>博客网站</li><li>一些在线工具可以建立格式比博客更开放、更专业的网站</li></ul></li></ul><p>上述两种方式，通常只需填写表单并为网站选择URL和主题，然后就可以通过表单输入内容。</p><h4 id="2-6-2-设置Web托管"><a href="#2-6-2-设置Web托管" class="headerlink" title="2.6.2 设置Web托管"></a>2.6.2 设置Web托管</h4><p>注册托管账户以便将网页发布到Web上的步骤如下： </p><ol><li>注册一个域名。</li><li>选择一家Web托管公司并注册账户。</li><li>将注册的域名同新创建的网站关联起来。</li><li>开始上传内容。</li></ol><h2 id="第3章-HTML-和-CSS简介"><a href="#第3章-HTML-和-CSS简介" class="headerlink" title="第3章 HTML 和 CSS简介"></a>第3章 HTML 和 CSS简介</h2><h3 id="3-1-HTML是什么"><a href="#3-1-HTML是什么" class="headerlink" title="3.1 HTML是什么"></a>3.1 HTML是什么</h3><p>HTML指的是超文本标记语言</p><h4 id="3-1-1-HTML定义了网页的结构"><a href="#3-1-1-HTML定义了网页的结构" class="headerlink" title="3.1.1 HTML定义了网页的结构"></a>3.1.1 HTML定义了网页的结构</h4><p>是一种描述文档结构而非实际呈现效果的语言。</p><h4 id="3-1-2-HTML未定义网页的布局"><a href="#3-1-2-HTML未定义网页的布局" class="headerlink" title="3.1.2 HTML未定义网页的布局"></a>3.1.2 HTML未定义网页的布局</h4><p>HTML规范对页面的外观都未置一言。HTML标签只是指出元素是标题或列表，没有说明该如何设置标题或列表的格式。</p><p><strong>注意：</strong>级联样式表(CSS)能够将复杂的格式设置应用于HTML标签。</p><p><strong>应用于标签的视觉样式的发展历程</strong>：</p><p>链接应该带有下划线并显示为蓝色，访问过的链接为紫色，要突出的文本为斜体……</p><h4 id="3-1-3-HTML为何以这样的方式工作"><a href="#3-1-3-HTML为何以这样的方式工作" class="headerlink" title="3.1.3 HTML为何以这样的方式工作"></a>3.1.3 HTML为何以这样的方式工作</h4><p>设计原则： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdmjruij4j31ac0927ip.jpg" alt="image-20200602081006343"></p><h4 id="3-1-4-标记的工作原理"><a href="#3-1-4-标记的工作原理" class="headerlink" title="3.1.4 标记的工作原理"></a>3.1.4 标记的工作原理</h4><p>HTML是一种标记语言。</p><p>HTML包含一组可供使用的预处理标签，不能编造标签来创建新样式或功能。</p><p>不同的浏览器支持不同的标签。</p><h3 id="3-2-HTML文件怎么样"><a href="#3-2-HTML文件怎么样" class="headerlink" title="3.2 HTML文件怎么样"></a>3.2 HTML文件怎么样</h3><p>HTM文件包含的以下内容： </p><ul><li>页面本身的内容</li><li>HTML标签</li></ul><p><strong>HTML中在结束标签中出现的是”/“而不是反斜杠</strong></p><p>有些标签只有起始标签或者结束标签；</p><p>有些标签是荣国旗，在&lt;&gt;内包含额外的信息和文本；</p><p>有些标签内部有额外的文本，提供了有关签名的额外信息。这些文本被称为属性，通常以name=value的形式定义的，位于标签名后面，并用一个空格与标签名分隔开。</p><p><strong>HTML标签不区分大小写。</strong></p><h4 id="3-2-1-文本格式设置和HTML"><a href="#3-2-1-文本格式设置和HTML" class="headerlink" title="3.2.1 文本格式设置和HTML"></a>3.2.1 文本格式设置和HTML</h4><p>分析HTML页面时，浏览器会忽略您为设置格式而添加的所有空白字符，包括多余的空格、制表符、换行符等</p><p>在HTML中设置格式的唯一途径就是使用HTML标签。(此规则有两个例外，它们是标签<pre>和CSS属性pre)</p><h3 id="3-3-HTML-属性"><a href="#3-3-HTML-属性" class="headerlink" title="3.3 HTML 属性"></a>3.3 HTML 属性</h3><p>可使用属性来修改HTML元素。属性是在元素的起始标签中指定的。</p><p>很多元素有其特有的属性，<strong>也有适用于所有元素的全局元素。例如： ID属性指定一个标识符，用于唯一地标识页面元素。</strong></p><p><strong>这些标识符主要供JavaScript和级联样式表使用。</strong></p><p>class是一个全局属性，可用于建立元素编组。可给多个元素指定相同的class属性，以便在CSS或JavaScript中将这些元素作为一个编组来饮用它们。</p><p>第三个全局属性是style</p><h3 id="3-4-使用属性style"><a href="#3-4-使用属性style" class="headerlink" title="3.4 使用属性style"></a>3.4 使用属性style</h3><p>级联样式表告诉浏览器如何渲染HTML元素。</p><p>CSS的优点在于，可以各种方式使用它。</p><h4 id="3-4-1-在标签中指定样式"><a href="#3-4-1-在标签中指定样式" class="headerlink" title="3.4.1 在标签中指定样式"></a>3.4.1 在标签中指定样式</h4><h3 id="3-5-HTML标准简史"><a href="#3-5-HTML标准简史" class="headerlink" title="3.5 HTML标准简史"></a>3.5 HTML标准简史</h3><h4 id="3-5-1-XHTML"><a href="#3-5-1-XHTML" class="headerlink" title="3.5.1 XHTML"></a>3.5.1 XHTML</h4><p>XHTML文档必须是有效的XML。<strong>下面是规则：</strong></p><ul><li>所有标签小写</li><li>没有结束标签的标签，必须在其标签后面加上反斜杠，例如<br> -> <br/></li><li>所有属性都必须有值。如果某些属性没有与之相关联的值，XHTML要求将其值设置为属性名，即采用格式attribute = "attribute"</li></ul><h3 id="3-6-不断发展的最新标准HTML5"><a href="#3-6-不断发展的最新标准HTML5" class="headerlink" title="3.6 不断发展的最新标准HTML5"></a>3.6 不断发展的最新标准HTML5</h3><p>访问<a href="http://caniuse.com/" target="_blank" rel="noopener">http://caniuse.com/</a> ，查看HTML5的各项功能、支持该功能的浏览器版本以及其浏览器支持该功能的用户所占的百分比。</p><h3 id="3-8-问与答"><a href="#3-8-问与答" class="headerlink" title="3.8  问与答"></a>3.8  问与答</h3><h4 id="3-8-1-可以使用HTML设置文本格式吗？"><a href="#3-8-1-可以使用HTML设置文本格式吗？" class="headerlink" title="3.8.1 可以使用HTML设置文本格式吗？"></a>3.8.1 可以使用HTML设置文本格式吗？</h4><p>可以对字符串设置一些格式。大多数设置文本格式的标签都已被CSS取代，但浏览器依然支持较旧的文本格式设置元素。</p><h2 id="第4章-HTML基础知识"><a href="#第4章-HTML基础知识" class="headerlink" title="第4章 HTML基础知识"></a>第4章 HTML基础知识</h2><h4 id="4-1-定义页面的总体结构"><a href="#4-1-定义页面的总体结构" class="headerlink" title="4.1 定义页面的总体结构"></a>4.1 定义页面的总体结构</h4><p>HTML定义了三个用于定义页面总体结构以及提供简单标题信息的标签——<html>,<head>,<body></p><p><strong>DOCTYPE标识符</strong>：</p><p>它不是网页结构的标签，但是XHTML和HTML5都要求网页必须包含它。</p><h4 id="4-1-1-标签"><a href="#4-1-1-标签" class="headerlink" title="4.1.1 标签"></a>4.1.1 标签<html></h4><p>网页的所有文本和HTML元素都必须放在起始和结束<html>标签之间。</p><p>如果省略它，浏览器将会替你添加。</p><h4 id="4-1-2-标签"><a href="#4-1-2-标签" class="headerlink" title="4.1.2 标签"></a>4.1.2 标签<head></h4><p>是一个容器，包含所有提供有关网页的信息的标签，但不包含将显示在网页中的信息。</p><h4 id="4-1-3-标签"><a href="#4-1-3-标签" class="headerlink" title="4.1.3 标签"></a>4.1.3 标签<body></h4><p>结束HTML标签时，务必确保结束的时最近的未结束标签。</p><h3 id="4-2-名称"><a href="#4-2-名称" class="headerlink" title="4.2 名称"></a>4.2 名称</h3><p>每个HTML页面都需要一个名称，它指出页面描述的是什么。用户浏览网页时，这个名称出现在浏览器的标题栏中。这个名称被浏览器用来创建书签；还被搜索引擎用来建立页面索引。</p><p><strong>使用<title>标签指定名称</strong></p><p><strong>将<title>标签放在<head>中</strong></p><p><strong><title>不能包含其他标签</strong></p><h3 id="4-3-标题"><a href="#4-3-标题" class="headerlink" title="4.3 标题"></a>4.3 标题</h3><p>HTML定义了6级标题</p><p>在HTML文档中，缩进可以更好地展示层次结构。但是在展示的页面中，不会缩进。浏览器对缩进置若罔闻。</p><p>*<em>警告： *</em>不要为了将文本显示为粗体或突出网页的某些部分而使用标题，这样做虽然会获得想要的效果，但标记表示的将不再是网页的结构。这样会影响搜索引擎、便利性和有些浏览器。</p><p><strong>提示：</strong>从视觉效果来看，4-6级标题不是很有用，但是从文档结构的角度看，很有意义。另外，使用4-6级标题可以使用样式来获得想要的效果。</p><h3 id="4-4-段落"><a href="#4-4-段落" class="headerlink" title="4.4 段落"></a>4.4 段落</h3></p>虽然并非 必不可少，但是对CSS确定段落的内容至关重要。<h3 id="4-5-注释"><a href="#4-5-注释" class="headerlink" title="4.5 注释"></a>4.5 注释</h3><p>分析HTML文件时，会忽略注释中的文本。但是，在浏览器中，用户可以使用“查看源代码”功能来查看注释，因此，对于不希望用户看到的东西，请不要将其放在注释中。</p><p>格式： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is comment --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-问与答"><a href="#4-7-问与答" class="headerlink" title="4.7 问与答"></a>4.7 问与答</h3><h4 id="4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？"><a href="#4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？" class="headerlink" title="4.7.1 有些网页没有使用结构页面标签(、、)。那真的是必须包含它们吗？"></a>4.7.1 有些网页没有使用结构页面标签(<html>、<head>、<body>)。那真的是必须包含它们吗？</h4><p>除了<title>以外可以不包括，但是最好养成使用结构标签的习惯。</p><h4 id="4-7-2-标签是用于添加网页内容的通用标签吗？"><a href="#4-7-2-标签是用于添加网页内容的通用标签吗？" class="headerlink" title="4.7.2 标签是用于添加网页内容的通用标签吗？"></a>4.7.2 标签<p>是用于添加网页内容的通用标签吗？</h4><p>不是，标签<div>才是用于添加网页内容的通用标签。标签<p>专用于在网页中添加文本段落。包括<div>在内的很多标签都不能放在标签<p>里面。</p><h4 id="4-7-3-注释可以包含HTML标签"><a href="#4-7-3-注释可以包含HTML标签" class="headerlink" title="4.7.3 注释可以包含HTML标签"></a>4.7.3 注释可以包含HTML标签</h4><p>可以在注释中包含HTML标签，但是浏览器不会显示它们。使用注释来隐藏页面的某部分是一种常见的做法，通常这种做法叫做“注释掉”。</p><h2 id="第5章-使用列表组织信息"><a href="#第5章-使用列表组织信息" class="headerlink" title="第5章 使用列表组织信息"></a>第5章 使用列表组织信息</h2><p><strong>知识导航：</strong></p><ul><li>如何创建编号列表</li><li>如何创建项目列表</li><li>如何创建定义列表(definition list)</li><li>与列表相关的级联样式表(CSS)属性</li></ul><h3 id="5-1-列表概述"><a href="#5-1-列表概述" class="headerlink" title="5.1 列表概述"></a>5.1 列表概述</h3><p>列表分为： </p><ul><li>有序列表</li><li>无序列表</li><li>定义列表</li></ul><p>所有的列表标签都有如下特征 ：</p><ul><li>列表有指定类型的外部元素。<ul></ul>表示无序列表,<ol></ol>表示有序列表,<dl></dl>表示定义列表。</li><li>每个列表项都有自己的标签：在词汇列表中为<dt>和<dd>.在其他列表中为<li></li></ul><h3 id="5-2-带编号的列表"><a href="#5-2-带编号的列表" class="headerlink" title="5.2 带编号的列表"></a>5.2 带编号的列表</h3><p>带编号的列表是<ol></ol>定义的，而其中的列表行是使用标签<li>和</li>定义的。</p><p>显示有序列表时，列览器会缩进列表并编号。</p><p><strong>仅当列表项的顺序很重要时，才应使用带编号的列表。</strong></p><h4 id="5-2-1-定制有序列表"><a href="#5-2-1-定制有序列表" class="headerlink" title="5.2.1 定制有序列表"></a>5.2.1 定制有序列表</h4><p>定制的方法有两种： </p><ul><li><p>修改列表的编号样式(1.使用CSS属性list-style-type;2.使用属性[attribute]type——在html5中已经被舍弃)</p></li><li><p>修改编号本身。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfeu2l0967j31by0gugx1.jpg" alt="image-20200603091556411"></p></li></ul><p>要指定列表使用的起始编号或字母，可使用属性start.不管指定的编号形式是什么，属性start的值必须时十进制数字。</p><p>在任何列表项都可以添加一个value值以重新开始从这个列表项开始的序号。</p><h3 id="5-3-无序列表"><a href="#5-3-无序列表" class="headerlink" title="5.3 无序列表"></a>5.3 无序列表</h3><p>无序列表通常称为项目符号列表，其中每个列表项都使用相同的项目符号，而不是编号。</p><p>对于无序列表，各个浏览器标记每个列表项时默认使用的项目符号相同，但文本浏览器通常使用星号。</p><h4 id="5-3-1-定制无序列表"><a href="#5-3-1-定制无序列表" class="headerlink" title="5.3.1 定制无序列表"></a>5.3.1 定制无序列表</h4><p>项目符号样式如下： </p><ul><li>disc: 圆盘，这是默认样式</li><li>square:实心正方形</li><li>circle:生成空心圆</li></ul><p>可以使用一幅画来自定义项目符号样式，例如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-image: url(/bullet.gif)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下方式实现后续行与项目符号或列表符号对齐： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-position: inside"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时修改多个与列表相关的属性，可以像下面这样，同时指定三个值： 列表样式类型、列表样式位置和用作项目符号图像的url： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style: circle inside url("</span>")"&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-定义列表"><a href="#5-4-定义列表" class="headerlink" title="5.4 定义列表"></a>5.4 定义列表</h3><p>定义列表包含两部分： </p><ul><li>术语</li><li>术语的定义</li></ul><p>定义列表的每部分都有其标签： 术语标签为<dt></dt>,定义标签<dd><dd>。它们往往成对存在。</p><p>整个定义列表是使用标签<dl></dl>定义的。</p><p>在浏览器中显示定义列表时，通常术语和定义是分开的并缩进定义。</p><h3 id="5-5-嵌套列表"><a href="#5-5-嵌套列表" class="headerlink" title="5.5 嵌套列表"></a>5.5 嵌套列表</h3><p>在一个列表中放置另一个列表。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffis1mo3gj31ey0esaos.jpg" alt="image-20200603233039568"></p><h3 id="5-6-列表的其他用途"><a href="#5-6-列表的其他用途" class="headerlink" title="5.6 列表的其他用途"></a>5.6 列表的其他用途</h3><p>列表远不是简单的项目符号列表。很多常见的Web设计元素的结构都类似于列表。</p><h3 id="5-8-作业"><a href="#5-8-作业" class="headerlink" title="5.8  作业"></a>5.8  作业</h3><h4 id="5-8-1-可修改列表项的缩进程度或让它们不缩进吗？"><a href="#5-8-1-可修改列表项的缩进程度或让它们不缩进吗？" class="headerlink" title="5.8.1 可修改列表项的缩进程度或让它们不缩进吗？"></a>5.8.1 可修改列表项的缩进程度或让它们不缩进吗？</h4><p>用于控制列表缩进程度的属性是 ：margin-left和padding-left，有些浏览器使用前者，有些浏览器使用后者。</p><p>为了让文本按照特定的方式对齐，可以将边距(margin)设置为负值。</p><h2 id="第6章-使用链接"><a href="#第6章-使用链接" class="headerlink" title="第6章 使用链接"></a>第6章 使用链接</h2><h3 id="6-1-创建链接"><a href="#6-1-创建链接" class="headerlink" title="6.1 创建链接"></a>6.1 创建链接</h3><p>使用URL创建链接，需要： </p><ul><li>要链接到的文件名(或者URL)</li><li>用作可单击链接的文本</li></ul><p>在链接标签中，只有文本是在网页上可见的；单击链接时，浏览器将加载相关联的URL。</p><h4 id="6-1-1-链接标签"><a href="#6-1-1-链接标签" class="headerlink" title="6.1.1 链接标签"></a>6.1.1 链接标签<a></h4><p><a></a>也被称为锚标签，因为它也可用于创建锚。链接标签最常用的用途是，用于创建到其他网页的链接。</p><p>标签<a>必须包含一些属性。</p><p>在链接标签中，最常见的属性是herf，它表示超文本引用，可以使用它来指定链接指向的文件名或URL。</p><p>*<em>注意： *</em>在HTML5中，没有任何属性的<a>也是合法的，这种链接称为占位符链接，可将其与CSS和脚本结合起来使用。</p><p>关于具体如何使用链接： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffz85iunhj31di0g6grd.jpg" alt="image-20200604085951473"></p><p>在链接中，文件名是区分大小写的，但是url不区分。</p><p>有关标签嵌套的提醒： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzmcfesnj31au0bob0c.jpg" alt="image-20200604091329375"></p><h3 id="6-2-使用相对和绝对路径链接到本地页面"><a href="#6-2-使用相对和绝对路径链接到本地页面" class="headerlink" title="6.2 使用相对和绝对路径链接到本地页面"></a>6.2 使用相对和绝对路径链接到本地页面</h3><p>*<em>注意： *</em>文件夹和目录说的是一码事，具体使用哪个取决于的是操作系统。</p><p>要在链接中指定相对路径名，必须使用UNIX式路径，而不管使用的是什么操作系统。即，</p><p>使用斜杠(/)来分隔目录名，并使用两点(..)来表示当前目录的父目录。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzrke0vmj31bk0ic7ip.jpg" alt="image-20200604091831046"></p><h4 id="6-2-1-绝对路径名"><a href="#6-2-1-绝对路径名" class="headerlink" title="6.2.1 绝对路径名"></a>6.2.1 绝对路径名</h4><p>相对路径名通过指定相对于当前页面的位置来指定要链接到的页面，而绝对路径名，从顶级目录出发，要经过哪些目录才能到达这个文件。</p><p>绝对路径总是以斜杠打头，以便与当前目录区分开来。斜杠后面从顶级目录出发，前往链接到的文件需要经过的所有目录。</p><p>*<em>注意： *</em></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzv91xspj31ey0o0qnz.jpg" alt="image-20200604092202966"></p><h4 id="6-2-2-该使用相对路径还是使用绝对路径"><a href="#6-2-2-该使用相对路径还是使用绝对路径" class="headerlink" title="6.2.2 该使用相对路径还是使用绝对路径"></a>6.2.2 该使用相对路径还是使用绝对路径</h4><p>合理混合使用这两种链接是最佳的选择。经验规则是： </p><p>如果链接的页面属于同一个集合，就使用相对路径，否则，使用绝对路径。</p><h3 id="6-3-链接到Web上的其他文档"><a href="#6-3-链接到Web上的其他文档" class="headerlink" title="6.3 链接到Web上的其他文档"></a>6.3 链接到Web上的其他文档</h3><p>要链接到Internet上的其他页面(远程页面)，也可以使用链接标签。</p><p>使用<em></em>可以将字体设置为斜体。</p><h3 id="6-4-链接到文档的特定位置"><a href="#6-4-链接到文档的特定位置" class="headerlink" title="6.4 链接到文档的特定位置"></a>6.4 链接到文档的特定位置</h3><p>要链接到另一个页面的特定位置，只需在链接的URL中指定要链接的元素的ID。</p><p>也可以使用链接跳到网页中的特定元素。</p><p>ID属性可用于页面的任何元素，唯一的要求是，每个ID在当前页面中是独一无二的。</p><p>Id还可用于设置页面的样式。</p><h4 id="6-4-1-创建链接和锚"><a href="#6-4-1-创建链接和锚" class="headerlink" title="6.4.1 创建链接和锚"></a>6.4.1 创建链接和锚</h4><p>创建一个锚的例子： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"part4"</span>&gt;</span>Part Four: Grapefruit from Heaven <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在链接中指向一个锚： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mybgdoc.html#part"</span>&gt;</span>Go to part 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中#后面是id</p><h4 id="6-4-2-标签的name属性"><a href="#6-4-2-标签的name属性" class="headerlink" title="6..4.2 标签的name属性"></a>6..4.2 标签<a>的name属性</h4><p>使用标签<a>创建锚时，不是使用属性herf来链接到特定的页面，而使用属性name来指出这是一个可链接的锚。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span> name="part4"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>Part Four : Grapefruit from Heaven </span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议不要不用属性name来创建锚链接，而是使用ID。ID属性适用于任何HTML元素，但是name只支持<a>标签。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h1&gt;&lt;p&gt;##第1章 何为Web发布&lt;/p&gt;
&lt;h3 id=&quot;1-1-像Web发布者一样思考&quot;&gt;&lt;a href=&quot;#1-1-像Web发布者一样思考&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML/HTML</title>
    <link href="http://www.nianchu.space/2020/06/01/HTML/HTML/"/>
    <id>http://www.nianchu.space/2020/06/01/HTML/HTML/</id>
    <published>2020-06-01T02:22:20.248Z</published>
    <updated>2020-06-01T06:27:50.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>全称： 超文本标记语言(HyperText Markup Language)</p><p>##HTML文件的后缀： </p><ul><li>.html</li><li>htm</li></ul><p>以上两种没有任何区别</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;全称： 超文本标记语言(HyperText Markup Language)&lt;/p&gt;
&lt;p&gt;##HTML文件的后缀： &lt;/p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/二进制IO</title>
    <link href="http://www.nianchu.space/2020/05/31/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6IO/"/>
    <id>http://www.nianchu.space/2020/05/31/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6IO/</id>
    <published>2020-05-31T11:11:01.273Z</published>
    <updated>2020-06-03T14:09:20.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制I-O"><a href="#二进制I-O" class="headerlink" title="二进制I/O"></a>二进制I/O</h1><h2 id="17-1-引言"><a href="#17-1-引言" class="headerlink" title="17.1 引言"></a>17.1 引言</h2><p><strong>文件分类：</strong> </p><p>可以使用文本编辑器进行处理(读取、创建或者修改)的文件被称为文本文件。所有</p><p>所有其他的文件都被称为二进制文件。</p><p>不能使用文本编辑器来读取二进制文件——它们是为让程序来读取而设计的。就像，Java源程序存储在文本文件中，可以使用文本编辑器读取，而Java类是二进制文件，由Java虚拟机读取。</p><p>可以简单的认为： 文本文件是由字符序列构成的，而二进制是由位bit序列构成的。</p><p>二进制文件的优势在于它的处理效率比文本文件高。</p><h2 id="17-2-在Java中如何处理文本I-O"><a href="#17-2-在Java中如何处理文本I-O" class="headerlink" title="17.2 在Java中如何处理文本I/O"></a>17.2 在Java中如何处理文本I/O</h2><p>要点提示： 使用Scanner类读取文本数据，使用PrintWriter类写文本数据。</p><p>File类： 封装了文件或路径属性，但是不包含从/向文件读/写数据的方法。</p><p>I/O类： 包含从/向文件读/写数据的方法。</p><p>输出对象： 输出流</p><p>输入对象： 输入流</p><h2 id="17-3-文本I-O与二进制I-O"><a href="#17-3-文本I-O与二进制I-O" class="headerlink" title="17.3 文本I/O与二进制I/O"></a>17.3 文本I/O与二进制I/O</h2><p><strong>要点提示 ：</strong>二进制I/O不涉及编码和解码，所以更高效</p><p>计算机并不区分二进制文件和文本文件。所有的文件都是以二进制形式来存储的，从本质上来说，所有的文件都是二进制的。</p><p>文本I/O能提供一层抽象，用于字符串层次的编码和解码。对于文本I/O，编码和解码是自动进行的。</p><p>对于文本编辑器或文本输出程序创建的文件，应该使用文本输入来读取，对于Java二进制输出程序创建的文件，应该使用二进制输入来读取。</p><p>二进制I/O不需要编码和解码，所以它的效率更高。同时，由于二进制文件与主机的编码方案无关，因此，它是可移植的。这也是Java的类文件存储为二进制文件的原因。</p><h2 id="17-4-二进制I-O类"><a href="#17-4-二进制I-O类" class="headerlink" title="17.4 二进制I/O类"></a>17.4 二进制I/O类</h2><p>*<em>要点提示： *</em>抽象类InputStream是读取二进制数据的根类，抽象类是OutputStream是写入二进制数据的根类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5k8kqkj31dy0k6k5z.jpg" alt="image-20200531193633640"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5x8lkdj31cy0ny1kx.jpg" alt="image-20200531193655448"></p><p>注意： 二进制I/O类中所有方法都声明为抛出java.io.IOException或java.io.IOException的子类</p><p>![image-20200531193942861](/Users/bowenkei/Library/Application Support/typora-user-images/image-20200531193942861.png)</p><h3 id="17-4-1-FileInputStream和FileOutputStream"><a href="#17-4-1-FileInputStream和FileOutputStream" class="headerlink" title="17.4.1 FileInputStream和FileOutputStream"></a>17.4.1 FileInputStream和FileOutputStream</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbvanos7bj318s0do4a6.jpg" alt="image-20200531194126051"></p><p>如果为一个不存在的文件创建一个FileInputStream对象，将会发生java.io.FileNotFountException异常</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbveid9yij31ce0e819x.jpg" alt="image-20200531194506941"></p><p>使用FileOutputStream构造方法创建对象时，如果这个文件不存在，就会创建一个新的文件</p><p>当文件已存在的时候，使用以下两个方法将会删除点文件中已经存在的内容： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream(file: File)</span><br><span class="line">  FileOutputStream(filename: String)</span><br></pre></td></tr></table></figure><p>为了既保留文件现有内容又可以给文件追加新数据，可以在创建一个FileOutputStream对象时，添加append参数，并将其值设置为true。</p><p>几乎所有的I/O类都会抛出java.io.IOException。所以，必须在方法中声明会抛出java.io.IOException异常，或者将代码放到try-catch块中。</p><p><strong>程序清单17-1使用二进制I/O将从1到10的10个字节值写入一个名为temp.dat的文件，再把他们从文件中读出来。</strong></p><p>使用try-with-resource来声明和创建输入输出流，从而在使用后可以自动关闭。</p><p>java.io.InputStream和java.io.OutputStream实现了AutoClosable接口。</p><p>AutoClosable接口定义了close()方法，用来个关闭资源。任何AutoClosable类型的对象可以用于try-with-resources语法中，实现自动关闭。</p><p>二进制文件可以从程序中读取它，但是不能用文本编辑器阅读它。</p><p><strong>提示：</strong>当流不再使用时，记得使用close()方法将其关闭，或者使用try-with-resource语句自动关闭。不关闭流可能会在输出文件中造成数据受损，或导致其他的程序设计错误。</p><p>*<em>注意： *</em>FileInputStream类的实例可以作为参数去构造一个Scanner=对象， FileOutputStream类的实例可以作为参数构造一个Printerwriter对象。可以创建一个PrintWriter对象来向文件中追加文本。如果xx.txt不存在，就会创建这个文件。如果xx.txt文件已经存在，就将新数据追加到该文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Printer(<span class="keyword">new</span> FileOutputStream(<span class="string">"xx.txt"</span>, <span class="keyword">true</span>));</span><br></pre></td></tr></table></figure><h3 id="FileterInputStream-和-FilterOutputStream"><a href="#FileterInputStream-和-FilterOutputStream" class="headerlink" title="FileterInputStream 和 FilterOutputStream"></a>FileterInputStream 和 FilterOutputStream</h3><p>过滤器数据流(file stream)是为某种目的过滤字节的数据流。读取整数值、双精度值和字符串，那就需要一个过滤类来包装字节输入流。使用过滤器类就可以读取整数值、双精度值和字符串，而不是字节或字符。</p><p>FileterInputStream 和 FilterOutputStream是过滤数据的基类。需要处理基本数值类型时，就是用DataInputStream和DataOutputStream类来过滤字节。</p><p>###DataInputStream和DataOutputStream </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fe1k2fj31b80l27r0.jpg" alt="image-20200601195913906"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fnrp7jj31cw0monow.jpg" alt="image-20200601195934714"></p><p>基本类型的值不需要做任何转化就可以从内存复制到输出数据流。字符串的字符可以写成多种形式 ：</p><ol><li>二进制I/O中的字符与字符串</li></ol><p>一个统一码由两个字节构成。writerChar(char c )方法将字符c的统一码写入输出流。writerChars(String s )方法将字符串s中的所有字符的统一码写到输出流中。writeBytes(String s )方法将字符串s中的每个字符的统一码的低字节写入到输出流。统一码的高字节被抛弃。</p><p>writeBytes(String s )方法适用于由ASCII码构成的字符串，ASCII码仅存储统一码的低字节。如果毕业字符串包含非ASCII码的字符，就必须使用writeChars方法实现写入这个字符串。</p><p>writeUTF(String s )方法将两个字节的长度信息写入输入流，后面紧跟着的是字符串s中的每个字符的改进版UTF-8的形式。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1uojv8pj30u00zcb2a.jpg" alt="image-20200601201352901"></p><p>*<em>警告： *</em></p><p>应该按存储的顺序和格式读取文件中的数据。</p><ol start="3"><li>检测文件的末尾</li></ol><p>如果达到InputStream的末尾之后还继续从中读取数据，就会发生EOFException异常。这个异常可以用来检查是否已经到达文件末尾。</p><h3 id="BufferedInputStream-和-BufferedOutputStream"><a href="#BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="BufferedInputStream 和 BufferedOutputStream"></a>BufferedInputStream 和 BufferedOutputStream</h3><p>BufferedInputStream 和 BufferedOutputStream没有包含新的方法，它们的方法都是从InputStream 和OutputStream继承而来的。它们在后来管理了一个缓冲区，根据要求自动从磁盘中读取数据和写入数据。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0eogrfpj31bm0i8dvx.jpg" alt="image-20200602160930843"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0fug543j31c80pukca.jpg" alt="image-20200602161036165"></p><p>缓冲区指定大小是512字节。</p><p>*<em>提示： *</em>应该总是使用缓冲区I/O来加速输入和输出。</p><h2 id="17-5-示例学习：-复制文件"><a href="#17-5-示例学习：-复制文件" class="headerlink" title="17.5 示例学习： 复制文件"></a>17.5 示例学习： 复制文件</h2><h2 id="17-6-对象I-O"><a href="#17-6-对象I-O" class="headerlink" title="17.6 对象I/O"></a>17.6 对象I/O</h2><p><strong>要点提示：</strong>ObjectInputStream 和ObjectOutputStream类可以用于读/写可序列化的对象。</p><p>ObjectInputStream 和ObjectOutputStream类除了实现基本数据类型与字符串的输入和输出之外，还可以实现对象的输入和输出。因而，可以使用ObjectInputStream 和ObjectOutputStream类代替DataInputStream和DataOutputStream。</p><p>读取时为了得到所需的数据类型，必须使用Java安全的类型转换。例如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date date = (Date)(inputStream.readObject());</span><br></pre></td></tr></table></figure><p>readObject()方法可能会抛出ClassNotFoundException.注意使用时要抛出它</p><h3 id="17-6-1-Serializable-接口"><a href="#17-6-1-Serializable-接口" class="headerlink" title="17.6.1 Serializable 接口"></a>17.6.1 Serializable 接口</h3><p>可以写入到输出流中的对象被称为可序化的。</p><p>可序化对象的类必须实现Serializable接口。</p><p>Serializable是一个标记接口。它没有方法，不需要在类中为实现Serializable接口增加额外的代码。实现这个接口可以启动Java的序列化机制，自动完成存储对象和数组的过程。</p><p>Java提供一个内在机制自动完成写对象的过程。这个过程称为对象序列化(object serialization),它是在ObjectOutputStream中实现的。相反，读取对象的过程称作反对象序列化(object deserialization),它是在ObjectInputStream中实现的。</p><p>试图存储一个不支持Serializable接口的对象会引起一个NotSerializableexception异常。</p><p>当存储一个可序列化对象时，会对该对象的类进行编码。编码包括类名、类的签名、对象实例变量的值以及该对象引用的任何其他对象的闭团，但是不存储对象静态变量的值。</p><p><strong>注意： 非序列化的数据域</strong></p><p>如果一个对象是Serializable的实例，但它包含了非序列化的实例数据域，那么就不可以序列化这个对象。为了使该对象是可序列化的，需要给这些数据域加上关键字transient,告诉Java虚拟机将对象写入流时忽略这些数据域。看下面的例子： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe7lzpgqtj31bi0e4ak6.jpg" alt="image-20200602201849302"></p><p><strong>注意： 重复的对象</strong></p><p>如果一个对象不止一次写入对象流，不会存储对象的多分副本。第一次写入一个对象时，就会为它创建一个序列号。Java虚拟机将对象的所有内容和序列号一起写入对象流。以后每次存储时，如果再写入相同的对象，就只存储序列号。读出这些对象时，它们的引用相同，因为在内存中实际上存储的只是一个对象。</p><h3 id="17-6-2-序列化数组"><a href="#17-6-2-序列化数组" class="headerlink" title="17.6.2 序列化数组"></a>17.6.2 序列化数组</h3><p>如果数组中所有元素都是可序列化的，那这个数组就是可序列化的。一个完整的数组可以使用writeObject方法写入文件，随后使用readObject方法恢复。</p><h2 id="17-7-随机访问文件"><a href="#17-7-随机访问文件" class="headerlink" title="17.7 随机访问文件"></a>17.7 随机访问文件</h2><p>*<em>要点提示： *</em>Java提供了RandomAccessFile类，允许从文件的任何位置进行数据的读写。</p><p>只读的流或者只写的流被称为顺序(sequential)流。使用顺序流打开的文件被称为顺序访问文件。顺序访问文件的内容不能更新。</p><p>使用RandomAccessFile类打开的文件称为随机访问文件。</p><p>RandomAccessFile类实现了DateInput和DataOutput接口。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexci82n0j31bc0u07wh.jpg" alt="image-20200603110915507"></p><p>创建一个RandomAccessFile时，可以指定两种模式(“r”，“rw”)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.dat"</span>, <span class="string">"rw"</span>);</span><br></pre></td></tr></table></figure><p>如果test.dat 已经存在，则创建raf以便访问这个文件，否则就创建一个名为test.dat的新文件，再创建raf以便访问这个文件。raf.length()返回给定时刻文件test.dat中的字节数。向文件中追加数据，raf.length就会增加。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexlt416tj310r0u0b29.jpg" alt="image-20200603111803022"></p><p>在RandomAccessFile中使用setLength(0)方法将文件长度设置为0。这样做的效果是将文件的原有内容删除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二进制I-O&quot;&gt;&lt;a href=&quot;#二进制I-O&quot; class=&quot;headerlink&quot; title=&quot;二进制I/O&quot;&gt;&lt;/a&gt;二进制I/O&lt;/h1&gt;&lt;h2 id=&quot;17-1-引言&quot;&gt;&lt;a href=&quot;#17-1-引言&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaFx UI组件和多媒体</title>
    <link href="http://www.nianchu.space/2020/05/22/Java/JavaFx%20UI%E7%BB%84%E4%BB%B6%E5%92%8C%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>http://www.nianchu.space/2020/05/22/Java/JavaFx%20UI%E7%BB%84%E4%BB%B6%E5%92%8C%E5%A4%9A%E5%AA%92%E4%BD%93/</id>
    <published>2020-05-22T07:58:00.000Z</published>
    <updated>2020-05-27T08:01:44.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaFx-UI组件和多媒体"><a href="#JavaFx-UI组件和多媒体" class="headerlink" title="JavaFx UI组件和多媒体"></a>JavaFx UI组件和多媒体</h1><h2 id="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"><a href="#引言JavaFX提供了许多UI组件，用于开发全面的用户界面" class="headerlink" title="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"></a>引言JavaFX提供了许多UI组件，用于开发全面的用户界面</h2><p>Oracle公司提供了可视化设计和开发GUI的工具。这使得程序员可以用最少的编码快速将图形用户界面(GUI)元素组装在一起，然而，任何工具都不是万能的。有时需要修改这些工具生成的程序。所以，理解JavaFx GUI程序设计的一些基本概念非常有必要。</p><p><img src="media/15898826720171.jpg" alt="-w1120"></p><p><img src="media/15898827040254.jpg" alt="-w1154"></p><h2 id="Labeled和Label"><a href="#Labeled和Label" class="headerlink" title="Labeled和Label"></a>Labeled和Label</h2><p>要点提示 ：JavaFX提供了许多组件，用于开发全面的用户界面</p><p>标签(label)是一个显示小段文字、一个节点或同时显示两者的区域。它通常用来给其他组件(通常是文本域)做标签。</p><p>标签和按钮共享许多共同的属性。这些属性定义在Labeled类中。<br><img src="media/15898830157493.jpg" alt="-w1144"></p><p>Label可以使用下面三种构造方法的其中之一进行构建，如图：<br><img src="media/15898830571137.jpg" alt="-w1080"></p><p>Graphic属性可以是任何一个节点，比如一个形状、一个图像或者一个组件。</p><p>*<em>注意： *</em><br>使用ContentDisplay()用于设置的不是标签相对于图像节点的位置，而是图像节点相对于标签的位置<br>HBox将所有节点放在水平线上</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>button是单击时触发动作时间的组件。JavaFx提供了常规按钮、开关按钮、复选框按钮和单选按钮。这些按钮的共同特性在ButtonBase和Label类中定义。</p><p>按钮与标签非常相似，除了按钮具有定义在ButtonBase类中的onAction属性，该属性设置一个用于处理按钮动作的处理器。<br><img src="media/15898859183657.jpg" alt="-w1128"></p><p>*<em>注意： *</em><br>BorderPane是这样一个面板： 将节点放置在顶部、右边、底部、左边以及中间区域</p><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>复选框用于提供给用户进行选择。<br>复选框提供了selected属性用于表明一个复选框是否被选中。 </p><p><img src="media/15899068142632.jpg" alt="-w1113"></p><p>VBox: 节点放在单列里<br>HBox： 节点放在单行里</p><h2 id="单选按钮-radio-button"><a href="#单选按钮-radio-button" class="headerlink" title="单选按钮 radio button"></a>单选按钮 radio button</h2><p>又称为选项按钮，用于让用户从一组选项中选择一个单一的条目。</p><p>外观上单选按钮类似于复选框<br>复选框是方形的，可以选中或者不选中<br>单选按钮显示一个圆，或是填充的或是空白的。分别对应选中和未选中<br>RadioButton是ToggleButton的子类。单选按钮和开关按钮的不同之处是，单选按钮显示一个圆，而开关按钮渲染成类似按钮<br><img src="media/15899400921265.jpg" alt="-w1142"></p><p><img src="media/15899403065993.jpg" alt="-w1132"></p><h2 id="文本域-text-filed"><a href="#文本域-text-filed" class="headerlink" title="文本域 text filed"></a>文本域 text filed</h2><p>可以用于输入或者显示一个字符串。<br>TextField是TextInputControl的子类。<br><img src="media/15899411471024.jpg" alt="-w1150"><br><em><em>注意： *</em><br>如果一个文本域用于输入密码，使用PasswordField来替代TextFiled。PasswordField继承自TextField，将输入文本隐藏为回显字符</em>…..</p><h2 id="文本区域-TextArea"><a href="#文本区域-TextArea" class="headerlink" title="文本区域 TextArea"></a>文本区域 TextArea</h2><p>要点提示： TextArea允许用户输入多行文本<br>如果需要让用户输入多行文本，可以创建多个TextField的实例。<strong>或者</strong>选择使用TextArea，它允许用户输入多行文本<br><img src="media/15899420441135.jpg" alt="-w1120"></p><p>TextArea提供滚动支持，但是通常而言，创建一个ScrollPane对象来包含一个TextArea的实例，并且让ScrolPane处理TextArea的滚动会更加方便。<br><em>提示</em>： 可以将任何节点放置在ScrollPane中。如果空间太大以至于不能在显示区域内完整显示，ScrollPane提供了垂直和水平方向的自动滚动支持</p><h2 id="组合框-combo-box"><a href="#组合框-combo-box" class="headerlink" title="组合框 combo box"></a>组合框 combo box</h2><p>要点提示 ：组合框也称为选择列表(choice list)或下拉式列表(drop-down),他包含一个条目列表，用户能够从中进行选择。</p><p>组合框可以限制用户的选择范围，并避免对输入数据有效性进行繁琐的检查。以下为ComBox类中的一些常用的属性和构造方法。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gezavug3g1j31m50u0wlt.jpg" alt="image-20200520224822234"></p><p>ComboBox定义为一个泛型类。泛型T为保存在一个组合框中的元素指定元素类型。</p><p>ComBox继承自ComBoxBase。ComBox可以触发一个ActionEvent事件。当一个条目被选中后，一个ActionEvent事件被触发。</p><p><strong>ObservableList是Java.util.List的子接口,因此你可以将定义在List中的所用方法应用于ObservableList。</strong></p><p><strong>JavaFX提供了一个静态方法FXCollections.observableArrayList(arrayOfElements)来从一个元素数组中创建一个ObservableList。</strong></p><h2 id="列表视图-ListView"><a href="#列表视图-ListView" class="headerlink" title="列表视图 ListView"></a>列表视图 ListView</h2><p>ListView是一个泛型类。泛型T为存储在一个列表视图中的元素指定了元素类型。</p><p>如下是： ListView的详细： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf07xiv2vrj31rq0og7wh.jpg" alt="image-20200521175156890"></p><p>getSelectionModel()方法返回一个SelectionModel实例，该实例包含了设置选择模式以及获得被选中的索引值和条目的方法。</p><p>选择模式由以下连个常量之一定义，分别是SelectionMode.MULTIPLE和SelectionMode.SINGLE。它们表明可以选择单个还是多个条目。默认为SINGLE.</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf085neu1bj31qm0toquu.jpg" alt="image-20200521175948759"></p><p><strong>注意⚠️</strong>：</p><p>程序代码运行之后，在列表视图中具体实现多选需要结合特定的按键。例如在mac os上，按住command的同时，用鼠标多选项目即可。</p><h2 id="滚动条-ScrollBar"><a href="#滚动条-ScrollBar" class="headerlink" title="滚动条 ScrollBar"></a>滚动条 ScrollBar</h2><p>要点提示： ScrollBar是一个允许用户从一个范围的值中进行选择的组件</p><p>用户可以通过鼠标操作改变滚动条的值。</p><p>ScrollBar的属性如下： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0fjj5m5dj31qz0u0hdt.jpg" alt="image-20200521221513304"></p><p><strong>注意：</strong> 滚动条的轨道宽度对应于max + visibleAmount。当一个滚动条设置为它的最大值时，块的左侧位于max，右侧位于max + visibleAmount。</p><p><strong>实际操作中的经验：</strong> 想要实现拖动滑动条移动Text的位置，必须将文本放在一个面板中，然后面板置于边框面板的中央。如果文本直接放在边框面板的中央，不能通过重设它的x和y属性改变文本的位置。</p><h2 id="滑动条-Slider"><a href="#滑动条-Slider" class="headerlink" title="滑动条 Slider"></a>滑动条 Slider</h2><p>要点提示 ：Slider与ScrollBar类似，但是Slider有更多属性，并且可以以多种形式显示。Slider允许用户通过在一个有界的区间中滑动滑块，从而以图形方式选择一个值。滑动条可以显示区间中的主刻度以及次刻度。刻度之间的像素值是由majorTickUnit和minorTickUnit属性指定的，分别表示主像素和次要像素。</p><p>滑块可以水平显示也可以垂直显示，可以带刻度可以不带刻度。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0ysa4it8j31qi0t8hdt.jpg" alt="image-20200522092106948"></p><p><strong>注意</strong>：垂直滚动条的值从上向下是增加的，但是垂直滑动条的值从上到下是减少的。</p><h2 id="示例学习：-开发一个井字游戏"><a href="#示例学习：-开发一个井字游戏" class="headerlink" title="示例学习： 开发一个井字游戏"></a>示例学习： 开发一个井字游戏</h2><p>*<em>注意： *</em>在开发和测试一个Java项目时，可以采用渐进的方法。</p><h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><p>*<em>要点提示： *</em>使用Media来获得媒体源，使用MediaPlayer类来播放和控制媒体，使用MediaView来显示视频。</p><p>媒体(视频和音频)对于开发富因特网应用是必要的。</p><p>JavaFX支持MP3、AIFF、WAV以及MPEG-4音频格式以及FLV和MPEG-4视频格式。</p><p>Media类代表了一个媒体源，具有duration、width以及height属性。</p><p>可以从一个Internet URL字符串中创建以一个Media对象。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71dgaeehj31se0lk1kx.jpg" alt="image-20200527152400018"></p><p>MediaPlayer类播放媒体，并通过一些属性来控制媒体播放，比如autoPlay、currentCount、cycleCount、mute、volume和totalDuration。可以从一个媒体对象来构建一个MediaPlayer对象，并使用pause()、play()方法来暂停和继续播放。</p><p>MediaView类是Node的子类，提供MediaPlayer播放的Media视图。MediaView类提供了一些属性用于观看媒体。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71h25jqkj31mh0u0hdt.jpg" alt="image-20200527152730968"></p><p>Media,MediaPlayer,MediaView的关系如下：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf72el0r5cj31py08ygth.jpg" alt="image-20200527155944537"></p><p>一个Media对象支持实时流媒体。一个Media对象可以被多个播放器共享，并且不同的视图可以使用同一个MediaPlayer对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaFx-UI组件和多媒体&quot;&gt;&lt;a href=&quot;#JavaFx-UI组件和多媒体&quot; class=&quot;headerlink&quot; title=&quot;JavaFx UI组件和多媒体&quot;&gt;&lt;/a&gt;JavaFx UI组件和多媒体&lt;/h1&gt;&lt;h2 id=&quot;引言JavaFX提供了许多
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.nianchu.space/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java/事件驱动编程和动画</title>
    <link href="http://www.nianchu.space/2020/05/22/Java/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <id>http://www.nianchu.space/2020/05/22/Java/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8A%A8%E7%94%BB/</id>
    <published>2020-05-22T02:32:31.292Z</published>
    <updated>2020-05-27T07:18:19.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-事件驱动编程和动画"><a href="#Java-事件驱动编程和动画" class="headerlink" title="Java 事件驱动编程和动画"></a>Java 事件驱动编程和动画</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>要点提示： 可以编写代码以处理诸如单击按钮、鼠标移动以及按键盘之类的时间。</p><p>为了响应一个按钮单击事件，你需要编写代码来处理按钮单击动作。按钮是一个事件源对象，即动作起源的地方。需要创建一个能对一个按钮动作事件进行处理的对象，即事件处理器。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf10yxo1j2j31h00ccn5y.jpg" alt="image-20200522103644432"></p><p>不是多有对象都可以成为一个动作事件的处理器。要成为一个动作事件的处理器，必须满足两个要求： </p><ol><li>该对象必须是EventHandler<T extends Event>接口的一个示例。接口定义了所有处理器的共同行为。T extends Event是一个Event子类型的泛型。</li><li>EventHandler对象handler必须使用方法source.setOnAction(handler)和事件源对象注册</li><li>EventHandler <ActionEvent> 接口包含了 handle ( ActionEvent ) 方法用于处理动作事件。你的处理器类必须覆盖这个方法来响应事件 。 15 ActionEvent 事件的代码 。</li></ol><h2 id="事件和事件源"><a href="#事件和事件源" class="headerlink" title="事件和事件源"></a>事件和事件源</h2><p>要点提示： 事件是从一个事件源上产生的对象。触发一个事件意味着产生一个事件并委托处理器处理该事件。</p><p>事件驱动编程： 当运行一个Java GUI程序的时候，程序和用户进行交互，并且事件驱动它的执行。这称为事件驱动编程。 </p><p>事件可以被定义为一个告知程序某件事发生的信号。</p><p>事件由外部的用户动作，比如鼠标的移动、单击和键盘按键所触发。</p><p>事件源对象： 产生一个事件并且出发它的组件称为事件源对象，或称为源对象或者源组件。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11rhaq5ej31go0ictj7.jpg" alt="image-20200522110409887"></p><p><strong>注意</strong>：如果一个组件可以触发一个事件，那么这个组件的任何子类都可以触发同样类型的事件。比如，每个JavaFX形状、布局面板和组件都可以触发MouseEvent和KeyEvent事件，因为Node是形状、布局面板和组件的超类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11uy6ln2j31i20u0qv5.jpg" alt="image-20200522110728861"></p><h2 id="注册处理器和处理事件"><a href="#注册处理器和处理事件" class="headerlink" title="注册处理器和处理事件"></a>注册处理器和处理事件</h2><p><strong>要点提示</strong>： 处理器是一个对象，<strong>它必须通过一个事件源对象进行注册，并且它必须是一个恰当的事件处理接口的实例。</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf124m0abdj31so0is7vo.jpg" alt="image-20200522111645923"></p><p><strong>技巧：</strong>设计一个类来建模一个包含了支持方法的面板是一个好的策略，这样相关的方法和面板都耦在一个对象中来。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>要点提示： 内部类，或者称为嵌套类，是一个定义在另外一个类范围中的类。内部类对于定义处理器非常有用。</p><p>一个内部类可以如常规类一样使用。通常，在一个类只被它的外部类所使用的时候，才将它定义为内部类。</p><p>一个内部类具有下面的特征：</p><ul><li>一个内部类被被编译为OuterClassName$InnerClassName的类。</li><li>一个内部类可以引用定义在它所在的外部类中的数据和方法。所以，没有必要将外部类对象的引用传递给内部类的构造方法。内部类可以使程序更加精简。</li><li>一个内部类可以使用可见性修饰符所定义，和应用于一个类中的成员的可见性规则一样</li><li>一个内部类可以被定义为static。一个static的内部类可以使用外部类的名字所访问。一个static的内部类不能访问外部类中非静态成员。</li><li>内部类对象通常在外部类中所创建。也可以从另外一个类中来创建一个内部类的对象。如果内部类是非静态的，你必须先创建一个外部类的实例，然后使用以下语法来创建一个内部类的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = outerObject.<span class="keyword">new</span> InnerClass();</span><br></pre></td></tr></table></figure><ul><li>如果内部类是静态的，使用以下语法来创建一个内部类对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = <span class="keyword">new</span> OuterClass.InnerClass();</span><br></pre></td></tr></table></figure><p>内部类的用途： </p><ul><li>将相互依赖的类结合到一个主类中</li><li>避免类名的冲突</li></ul><p>一个处理器类被设计为针对一个GUI组件创建一个处理器对象(比如，一个按钮)。处理器类不会被其他应用所共享，所以将它定义在主类里面作为一个内部类是恰如其分的。</p><h2 id="匿名内部类处理器"><a href="#匿名内部类处理器" class="headerlink" title="匿名内部类处理器"></a>匿名内部类处理器</h2><p><strong>要点提示</strong>：一个匿名内部类是一个没有名字的内部类。它将进一步实现定义一个内部类以及创建一个内部类的实例。</p><p>下面是一个内部类被匿名内部类替代的示例： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf1a0ynvklj31sm0m81c4.jpg" alt="image-20200522154958242"></p><p>匿名内部类的语法如下所示： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> superClassName/InterfaceName()&#123;</span><br><span class="line"><span class="comment">// Implement or override methods in superclass or interface</span></span><br><span class="line"><span class="comment">// Other methods if necessary</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类是一种特殊类型的内部类，它被当作一个内部类对待，同时具有下面的特征： </p><ul><li>一个匿名内部类必须总是从一个父类继承或者实现一个接口，但是它不能有显式的extends或者implements子句</li><li>一个匿名内部类必须实现父类或者接口中的所有抽象方法</li><li>一个匿名内部类总是使用它父类的无参构造方法来创建一个实例。如果一个匿名内部类实现一个接口，构造方法是Object().</li><li>一个匿名内部类被编译成一个名为OuterClassName$n.class。</li></ul><p>例如如果外部类Test有两个匿名的内部类，它们将被编译成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用lambda表达式简化事件处理</span><br><span class="line"></span><br><span class="line">要点提示： lambda表达式可以用于极大简化事件处理器的代码编写.</span><br><span class="line"></span><br><span class="line">lambda表达式可以被看作使用精简语法的匿名内部类。</span><br><span class="line"></span><br><span class="line">如图是将匿名内部类用lambda表达式代替的一个例子：</span><br><span class="line"></span><br><span class="line">![image-20200524001209498](https://tva1.sinaimg.cn/large/007S8ZIlly1gf2u5ud8zgj31qq0kmdrp.jpg)</span><br><span class="line"></span><br><span class="line">一个lambda表达式的基础语法是： </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">(type1 parm1, type2 parm2, ...) -&gt; expression</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(type1 parm1, type2 parm2, ...) -&gt; &#123;statements;&#125;</span><br></pre></td></tr></table></figure><p>一个参数的数据类型既可以显式声明，也可以由编译器隐式推断。如果只有一个参数，并且没有显示的数据类型，圆括号可以被省略。</p><p>因而上面(截图)的例子可以表示为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e -&gt; &#123;</span><br><span class="line">  <span class="comment">// Code for processing event e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3fxuqocej31v00l04qp.jpg" alt="image-20200524124547574"></p><h2 id="示例学习：-贷款计算器"><a href="#示例学习：-贷款计算器" class="headerlink" title="示例学习： 贷款计算器"></a>示例学习： 贷款计算器</h2><h2 id="示例学习-鼠标事件"><a href="#示例学习-鼠标事件" class="headerlink" title="示例学习: 鼠标事件"></a>示例学习: 鼠标事件</h2><p><strong>要点提示：</strong>当一个鼠标按键在一个节点或者一个场景中被按下、释放、单击、移动或者拖动时，一个MouseEvent事件被触发。</p><p>MouseEvent对象捕捉事件，例如和它相关的单击数、鼠标位置或者那个叫鼠标按键被按下： </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3kcgren1j31so0u0n49.jpg" alt="image-20200524151800627"></p><p>四个常数——PRIMARY,SECONDARY,MIDDLE和None在MouseEvent中被定义，表明鼠标的左、右、中以及无按钮。shiyonggetButton()方法来探测哪个按钮被按下。</p><p>在任何节点和场景都可触发鼠标事件。</p><h2 id="键盘事件-KeyEvent"><a href="#键盘事件-KeyEvent" class="headerlink" title="键盘事件 KeyEvent"></a>键盘事件 KeyEvent</h2><p><strong>要点提示:</strong>在一个节点或者一个场景上面只要按下、释放或者敲击键盘，就会触发一个KeyEvent事件。</p><p>键盘事件使得可以采用键盘来控制和执行动作，或者从键盘获得输入。KeyEvent对象描述了事件的性质(即，一个按键被按下释放或者敲击)以及键值。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l1fsp2ej31ni0k4b11.jpg" alt="image-20200524154213607"></p><p>每个键盘事件有一个相关的编码，可以通过KeyEvent的getCode()方法返回。键的编码是定义在KeyCode中的常量。KeyCode是一个enum类型的变量。</p><p>对于按下键和释放键的事件，getCode()返回表中的值， getText()返回一个描述键的代码的字符串， getCharacter()返回一个空字符串。对于敲击键额事件，geCode()返回UNDEFINED, getcCharacter()返回相应的Unicode字符或者和敲击事件相关的一个字符序列。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7ne7h0j31us0gu4e3.jpg" alt="image-20200524154812371"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7uwigwj31ue0ho18h.jpg" alt="image-20200524154825125"></p><p><strong>注意</strong></p><p>在一个枚举类型值的switch语句中，case后面跟的是枚举常量。常量是不受限制的(unqalified)即无须加KeyCode等类限定。例如： 在case子句中使用keyCode.DOWN将出现错误。</p><p>只有一个被拒交的节点可以接受KeyEvent事件。在一个text上调用requestFocus()使得text可以接受键盘输入。<strong>这个方法必须在舞台被显示后调用。</strong></p><p><strong>注意：</strong> 单击一个按钮之后，circlePane将不再被聚焦，为了修复这个问题，可以在每次按钮被单击后，在circlePane上再次调用requestFocus()。</p><h2 id="可观察对象的监听器"><a href="#可观察对象的监听器" class="headerlink" title="可观察对象的监听器"></a>可观察对象的监听器</h2><p>*<em>要点提示： *</em>可以通过添加一个监听器来处理可观察对象中的值的变化</p><p>一个Observable类的实例被认为是一个可观察对象，它包含了一个addListener(InvalidationListener listener)方法用于添加监听器。监听器类必须实现InvalidationListenr接口以重写invalidate(Observable o)方法，从而可以处理值的改变。一旦observable中的值改变了，通过调用invalidate(Observable o)方法，监听器得到通知。每个绑定属性都是Observable的实例。  </p><p>可以使用lambda来简化添加监听器的流程。注意处理器使用的是e，监听器使用的是ov。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>*<em>要点提示： *</em>JavaFx中的Animaiton类为所有的动画制作提供了核心功能。</p><p>JavaFX提供了许多Animation的具体子类。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3r5dr678j31ui0rchdt.jpg" alt="image-20200524191335802"></p><p>其中autoReverse是一个Boolean属性，表示下一周期中动画是否要倒转方向。cycleCount表示了该动画的循环次数。使用Tiemline.INDEFINTE表示无限循环。rate定义了动画的速度。一个负的rate值表示动画的相反方向。status是只读属性，表明了动画的状态(Animation.Status.PAUSED、Animation.Status.RUNNING和Animation.Status.STOPPED)。方法pause(),play(),stop()分别表示暂停、播放和终止动画。</p><h3 id="PathTrasition"><a href="#PathTrasition" class="headerlink" title="PathTrasition"></a>PathTrasition</h3><p>PathTrasition类制作一个在给定时间，节点沿着一条路从一个端点到另一个端点的移动动画，PathTransition是Animation的子类型。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3rd7dkj4j31os0u0kjl.jpg" alt="image-20200524192103626"></p><p>Duration类定义了持续事件。它是一个不可更改的类。这个类定义类常量INDEFINTE，ONE，UNKNOW和ZERO来代表一个无限循环、1毫秒、未知以及哦的持续时间。可以使用new Duration(double millis)来创建一个Duration实例，使用add、substract、multiply和divide方法来执行算数操作，还可以使用toHours(),toMinutes(),toSeconds()和tomMillis()来返回持续时间值中的小时数、分钟数、秒钟数和毫秒数。还可以使用comPareTo来比较两个持续时间。</p><p>常量NONE和ORTHOGONAL_TO_TANGET在PathTransiton.OrientationType中定义。后者确定节点在沿着几何路径移动的过程中是否和路径的切线保持垂直。</p><h2 id="FadeTransition"><a href="#FadeTransition" class="headerlink" title="FadeTransition"></a>FadeTransition</h2><p>FadeTransition类在一个给定的时间内，通过改变一个节点的透明度来产生动画。FadeTransition是Animation的子类型。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf53fa5cbdj31tw0tahdt.jpg" alt="image-20200525230347355"></p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>PathTransition和FadeTransition定义类的特定的动画。Timeline类可以通过使用一个或者更多的KeyFrame(关键帧)来编写任意动画。每个KeyFrame在一个给定的时间间隔内顺序执行。Timeline继承自Animation。</p><p>通过new Timeline(KeyFrame… keyframe)来构建一个Timeline。</p><p>一个KeyFrame可以使用以下语句来构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> KeyFrame(Duration duration, EeventHandler&lt;ActionEvent&gt; onFinished)</span><br></pre></td></tr></table></figure><p>处理器onFinished方法当这个关键帧的持续时间结束后被调用。</p><h2 id="示例学习-：弹球"><a href="#示例学习-：弹球" class="headerlink" title="示例学习 ：弹球"></a>示例学习 ：弹球</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-事件驱动编程和动画&quot;&gt;&lt;a href=&quot;#Java-事件驱动编程和动画&quot; class=&quot;headerlink&quot; title=&quot;Java 事件驱动编程和动画&quot;&gt;&lt;/a&gt;Java 事件驱动编程和动画&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/W3Cschool/JavaFX/JavaFX 复选框</title>
    <link href="http://www.nianchu.space/2020/05/20/Java/W3Cschool/JavaFX/JavaFX%20%E5%A4%8D%E9%80%89%E6%A1%86/"/>
    <id>http://www.nianchu.space/2020/05/20/Java/W3Cschool/JavaFX/JavaFX%20%E5%A4%8D%E9%80%89%E6%A1%86/</id>
    <published>2020-05-19T16:40:22.448Z</published>
    <updated>2020-05-19T16:40:22.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C 第二章 对C的扩展</title>
    <link href="http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%B9C%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%B9C%E7%9A%84%E6%89%A9%E5%B1%95/</id>
    <published>2020-05-17T06:05:24.501Z</published>
    <updated>2020-05-17T06:07:01.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对C的扩展"><a href="#对C的扩展" class="headerlink" title="对C的扩展"></a>对C的扩展</h1><h2 id="2-1-最简单的Object-C"><a href="#2-1-最简单的Object-C" class="headerlink" title="2.1 最简单的Object-C"></a>2.1 最简单的Object-C</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对C的扩展&quot;&gt;&lt;a href=&quot;#对C的扩展&quot; class=&quot;headerlink&quot; title=&quot;对C的扩展&quot;&gt;&lt;/a&gt;对C的扩展&lt;/h1&gt;&lt;h2 id=&quot;2-1-最简单的Object-C&quot;&gt;&lt;a href=&quot;#2-1-最简单的Object-C&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C第一章 启程</title>
    <link href="http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%90%AF%E7%A8%8B/"/>
    <id>http://www.nianchu.space/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%90%AF%E7%A8%8B/</id>
    <published>2020-05-17T05:59:05.788Z</published>
    <updated>2020-05-17T06:04:34.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-启程"><a href="#第一章-启程" class="headerlink" title="第一章 启程"></a>第一章 启程</h1><h2 id="1-2-历史背景"><a href="#1-2-历史背景" class="headerlink" title="1.2 历史背景"></a>1.2 历史背景</h2><p>Steve Jobs 成立了NeXT公司。NeXT选择Unix作为其操作系统，创建了NextSTEP。NextSTEP后被命名为Cocoa。</p><h2 id="1-3-内容简介"><a href="#1-3-内容简介" class="headerlink" title="1.3 内容简介"></a>1.3 内容简介</h2><p>oc是C语言的一个扩展集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-启程&quot;&gt;&lt;a href=&quot;#第一章-启程&quot; class=&quot;headerlink&quot; title=&quot;第一章 启程&quot;&gt;&lt;/a&gt;第一章 启程&lt;/h1&gt;&lt;h2 id=&quot;1-2-历史背景&quot;&gt;&lt;a href=&quot;#1-2-历史背景&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Swift/Swift Programming Language Book/Swift初见</title>
    <link href="http://www.nianchu.space/2020/05/16/Swift/Swift%20Programming%20Language%20Book/Swift%E5%88%9D%E8%A7%81/"/>
    <id>http://www.nianchu.space/2020/05/16/Swift/Swift%20Programming%20Language%20Book/Swift%E5%88%9D%E8%A7%81/</id>
    <published>2020-05-15T16:36:44.954Z</published>
    <updated>2020-05-15T16:48:35.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift初见"><a href="#Swift初见" class="headerlink" title="Swift初见"></a>Swift初见</h1><h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>使用let来宣告常数，使用var来宣告变数</p><p>常数或者变数的型别必须和你赋给它们的值一样。但是不一定在声明的时候显示声明类型，因为编译器会自动推断类别。</p><p>如果初始值没有提供足够的资讯(或者没有初始值)，就需要在变数后面宣告类型，用冒号分隔，例如：<br>let implicitDouble = 70.0<br>let explicitDouble: Double = 70</p><p>值永远不会被隐式转换为其他类别。如果需要对值进行转换，需要显示转换 例如：<br>let label = “The width is “<br>let width = 94<br>let widthLabel = label + String(width)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift初见&quot;&gt;&lt;a href=&quot;#Swift初见&quot; class=&quot;headerlink&quot; title=&quot;Swift初见&quot;&gt;&lt;/a&gt;Swift初见&lt;/h1&gt;&lt;h2 id=&quot;简单值&quot;&gt;&lt;a href=&quot;#简单值&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/JavaFX基础</title>
    <link href="http://www.nianchu.space/2020/05/07/Java/JavaFX%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.nianchu.space/2020/05/07/Java/JavaFX%E5%9F%BA%E7%A1%80/</id>
    <published>2020-05-07T00:35:07.899Z</published>
    <updated>2020-05-18T06:49:46.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaFX基础"><a href="#JavaFX基础" class="headerlink" title="JavaFX基础"></a>JavaFX基础</h1><h1 id="javaFX是学习面向对象编程的优秀教学工具"><a href="#javaFX是学习面向对象编程的优秀教学工具" class="headerlink" title="javaFX是学习面向对象编程的优秀教学工具"></a>javaFX是学习面向对象编程的优秀教学工具</h1><h2 id="JavaFX与Swing以及AWT的比较"><a href="#JavaFX与Swing以及AWT的比较" class="headerlink" title="JavaFX与Swing以及AWT的比较"></a>JavaFX与Swing以及AWT的比较</h2><p>要点提示： JavaFX用于开发富因特网应用</p><p>富因特网应用是一种Web应用，可以表现一般桌面应用具有的特点和功能。JavaFX可以无缝地在桌面或者Web浏览器中运行。</p><h2 id="JavaFX程序的基本结构"><a href="#JavaFX程序的基本结构" class="headerlink" title="JavaFX程序的基本结构"></a>JavaFX程序的基本结构</h2><p>要点提示 ： 抽象类 javafx . application . Application 定义编写 JavaFX 程序的基本框架 。</p><h2 id="面板、UI组件以及形状"><a href="#面板、UI组件以及形状" class="headerlink" title="面板、UI组件以及形状"></a>面板、UI组件以及形状</h2><p>要点提示： 面板、UI组件以及形状是Node的子类型<br><img src="media/15888212935424.jpg" alt="-w247"><br>(各个部分的包含情况)</p><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>要点提示： 可以将一个目标对象绑定到源对象中。源对象的修改将自动反应到目标对象中。</p><p>属性绑定： 将一个目标对象和一个源对象绑定。如果源对象中的值改变了，目标对象也将自动改变。目标对象称为绑定对象或者绑定属性，源对象称为可绑定对象或者可观察属性。</p><p>一个属性既可以作为目标，也可以作为源。目标监听源中的变换，一旦源中发生变化，目标将自动更新自身。<br>一个目标采用bind方法和源进行绑定，如下所示：<br>target.bind(source);<br><img src="media/15888260461998.jpg" alt="-w660"><br>绑定的演示：<br><img src="media/15888263948826.jpg" alt="-w667"></p><p><strong><em>双向绑定</em></strong><br>这样，一个属性的改变将反应到另一个对象上，反过来也一样，这样的绑定叫做双向绑定。如果目标和源同时是绑定属性和可观察熟悉你个，他们就可以使用bindBidirectional方法进行双向绑定。</p><h2 id="节点的通用属性和方法"><a href="#节点的通用属性和方法" class="headerlink" title="节点的通用属性和方法"></a>节点的通用属性和方法</h2><p>要点提示： 抽象类Node定义来许多对于节点而言通用的属性和方法<br>节点具有通用属性；<br>JavaFx的样式属性称为JavaFx CSS</p><p>设定样式的语法是styleName:value<br>一个节点的多个属性可以一起设置，通过分号(;)进行分隔。例如：<br>circle.setStyle(“-fx-stroke: black; -fx-fill: red”);<br>它等效于:<br>circle.setStyle(Color.Black);<br>circle.setFill(Color.Red);<br><em>如果使用了一个不正确的JavaFx CSS，程序依然可以编译和运行，但是样式会被忽略</em></p><p>rotate属性可以设定一个以度为单位的角度，让节点围绕它的中心旋转该角度。如果设置的角度是正的，表示顺时针旋转，否则是逆时针旋转<br>例如：将一个按钮旋转80度<br>button.setRotate(80);</p><h2 id="Color类"><a href="#Color类" class="headerlink" title="Color类"></a>Color类</h2><p>要点提示： Color类可以用于创建颜色</p><p>JavaFx定义类抽象类Paint用于绘制节点。Javafx.scene.paint.Color是Paint的具体子类，用于封装颜色信息。具体如下：<br><img src="media/15894177223880.jpg" alt="-w1051"><br>可以通过一下构造方法创建颜色实例：<br>public Color(double r, double g, double b, double opacity);其中的每个double值的范围从0.0到1.0,由浅到深。opacity定义了一个颜色的透明度，也是从0.0到1.0，由完全透明到完全不透明。这称为RGB模型，A表示alpha值，是透明度的意思。</p><p>Color color = new Color(0.25, 0.14, 0.333, 0.51);<br>Color类是不可修改的。当一个Color对象创建后，它的属性就不能再修改。brighter()返回一个具有更大的红、绿、蓝值的新的Color对象，而darker()方法返回一个具有更小的对象，opacity值与原来的Color对象中的值相同。</p><p>采用静态方法color(r,g,b),color(r,g,b,opacity),rgb(r,g,b),rgb(r,g,b,opac ity)来创建一个颜色对象。</p><p>另外一种方法是： 可以采用Color类中定义的许多标准颜色之一，如BEIGE(米色),BLACK,BLUE,CYAN,DARKGRAY,GREEN,LIGHTGRAY,MAGENTA(品红)，NAVY(海军蓝),ORANGE,PINK,SILVER,WHITE,YELLOW</p><h2 id="Font类"><a href="#Font类" class="headerlink" title="Font类"></a>Font类</h2><p>要点提示： Font类描述字体名、粗细和大小<br>可以在渲染文字的时候设置字体信息。javafx.scene.text.Font类用于创建字体<br><img src="media/15894186146809.jpg" alt="-w1156"></p><p>Font类实例可以用它的静态方法或者哦构造方法来创建，Font可以用它的名字、粗细、字体形态和大小来描述。Times,Courier和Arial是字体名字的示例。可以通过调用静态方法getFamilies()获得一个可用的字体系列名字列表。List是一个为列表定义通用方法的接口。ArrayList是List的一个具体实现。</p><p>字体形态是两个常量：FontPosture.ITALTC(意大利文)和FONTPosture.REGULAR.下面语句生成两个字体。<br>Font font1 = new Font(“SansSerif”,16);<br>Font font2 = Font.font(“Times New Roman “,FontWeight.BOlD, FontPosture.ITALIC, 12)<br><strong>StackPane将节点置于中央，节点依次位于最上面</strong></p><h2 id="Image和ImageView类"><a href="#Image和ImageView类" class="headerlink" title="Image和ImageView类"></a>Image和ImageView类</h2><p>要点提示： Image类表示一个图像，ImageView用于显示一个图像。</p><p>javafx.scene.image.Image类表示一个图像，用于从一个特定的文件名或者一个URL载入一个图像。</p><p>javafx.scene.image.ImageView是一个用于显示图像的节点。ImageView可以从一个Image对象产生。例如：以下代码从一个图像文件创建一个ImageView:<br>Image image = new Image(“image/us.gif”);<br>ImageView imageView = new ImageView(image);</p><p>当然，也可以周姐从一个文件或者一个URL来创建一个ImageView</p><p><img src="media/15894210170447.jpg" alt="-w1099"><br><img src="media/15894210336726.jpg" alt="-w1176"></p><p>HOX是一种面板，他将所有的节点排列在水平的一行上。<br>seRoate方法在Node类中定义，可以用于任何节点。<br>Image对象可以被多个节点共享。<br>ImageView这样的节点是不能共享的。不能讲一个ImageView多次放入一个面板或者场景中。<br><strong>注意</strong>，务必将图像文件放在类文件的相同个目录中。</p><p>如果使用URL来定位图像文件，必须提供URL协议http://</p><p>pane.setPadding(new Insets(5, 5 ,5, 5)); // 用于设置节点到边缘的距离</p><h2 id="布局面板"><a href="#布局面板" class="headerlink" title="布局面板"></a>布局面板</h2><p>要点提示：  javafx提供了许多种类型的面板，用于自动地将节点布局在希望的位置和大小。面板的种类有下面这些。</p><p><img src="media/15894387106951.jpg" alt="-w1118"></p><p>Pane通常用作显示形状的画布。</p><p>Pane是所有特定面板的基类。</p><p>特定的面板StackPane。节点放置在StackPane面板的中央。</p><h3 id="FlowPane"><a href="#FlowPane" class="headerlink" title="FlowPane"></a>FlowPane</h3><p> FlowPane 将节点按照加入的次序，从左到右或者从上到下垂直组织。当一行或者一列排满的时候，开始新的一行或者一列。可以使用下面两个常数中的一个来确定节点是水平还是垂直排列：<br> Orientation.HORIZONTAL 或者 Orientation.VERTICAL。（默认是水平的）可以使用像素为单位指定节点之间的距离。FlowPane的类图如图所示：<br> <img src="media/15894392532482.jpg" alt="-w1066"></p><p>其中数据域alignment、oritentation、hap和vgap是绑定属性。JavaFX中的每个绑定属性都有一个获取方法，例如getHgap()返回其值，一个设置方法，如sethGap(double)设置一个值，以及一个获取方法返回属性本身，(如hGapProperty())。对于一个ObjectProperty<T>类型的数据值，值的获取方法返回一个T类型的值，属性获取方法返回一个ObjectProperty<T>类型的属性值。</p><p><strong>文本域这样的节点只能加到一个面板中一次。将一个节点加入到一个面板中多次或者不同面板中将引起运行时错误</strong></p><p>一个节点只能放置在一个面板中。因此，面板和节点的关系是组合关系，使用一个填充的菱形表示。</p><h3 id="GridPane"><a href="#GridPane" class="headerlink" title="GridPane"></a>GridPane</h3><p>GridPane将节点布局在一个网络(矩阵)中。节点放在一个指定的列和行索引中。GridPane的类图如下：<br><img src="media/15894418799041.jpg" alt="-w1203"></p><p><strong>注意</strong><br>场景的大小没有设置时，场景会根据其中节点的大小自动计算。</p><h3 id="BorderPane"><a href="#BorderPane" class="headerlink" title="BorderPane"></a>BorderPane</h3><p>BorderPane可以将节点放置在五个区域： 顶部、底部、左边、右边以及中间，分别使用：<br>setTop(node), setBottom(node),setLeft(node),setRight(node),setCenter(node)<br><img src="media/15895503639516.jpg" alt="-w1077"></p><p><strong>注意</strong><br>面板自己就是一个节点，所以面板可以加入到另一个面板中。<br>如果要将一个节点从顶部区域移除，调用setTop(null);<br>如果一个区域没有被占据，那么不会分配空间给这个区域</p><h3 id="HBox和VBox"><a href="#HBox和VBox" class="headerlink" title="HBox和VBox"></a>HBox和VBox</h3><p>HBox将它的字节点布局在单个水平行中。VBox将它的节点布局在单个垂直列中。<br>和FlowPane想比，HBox和VBox只能将节点布局在一行或者一列中，而不是将它的额节点布局在多行或者多列中。<br><img src="media/15895513038688.jpg" alt="-w1162"><br><img src="media/15895513685595.jpg" alt="-w1110"></p><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p>JavaFx提供了多种形状类，用于绘制文本、直线、圆、矩形、椭圆、弧、多边形以及折线<br>Shape类是一个抽象基类，定义了所有形状的共有属性。这些属性有fill，stroke，strokeWidth。</p><p>fill指定一个填充形状内部区域的颜色<br>stroke指定用于绘制形状边缘的颜色。<br>strokeWidth指定形状边缘的宽度。</p><p><img src="media/15896010726056.jpg" alt="-w761"></p><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>Text类定义类一个节点，用于在一个起始点(x,y)处显示一个字符串。<br>Text对象通常置于一个面板中。</p><p>对于一个面板，左上角是(0,0),右下角是(pane.getWidth(),pane.getHeight())</p><p>一个字符串可以通过\n分隔从而显示在多行。<br>以下是Text的UML图：<br><img src="media/15896012798009.jpg" alt="-w1165"></p><h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><p>一条线通过4个参数(startX, startY, endX, endY)连接两个点。Line类的UML图：<br><img src="media/15896020888659.jpg" alt="-w1116"></p><h3 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h3><p>一个矩形通过参数x, y, width, height, arcWidth以及arcHeight定义。<br>矩形的左上角处于(x,y),参数aw(arcWidth)表示圆角处弧的水平直径，ah(arcHeight)表示圆角处弧的垂直直径。Rectangle的UML图如下：<br><img src="media/15896042504197.jpg" alt="-w1199"></p><h3 id="Circle和Ellipse-椭圆"><a href="#Circle和Ellipse-椭圆" class="headerlink" title="Circle和Ellipse(椭圆)"></a>Circle和Ellipse(椭圆)</h3><p><img src="media/15896958010306.jpg" alt="-w1112"><br>对于Ellipse,其中的radiusX值的是a，radiusY指的是b(椭圆数学定义中的a和b)</p><h3 id="Arc"><a href="#Arc" class="headerlink" title="Arc"></a>Arc</h3><p>一段弧可以认为是椭圆的一部分，由参数centerX, centerY, radiusX, radiusY, startAngle, length以及一个弧的类型(ArcType.OPEN, ArcType.CHORD或者ArcType.ROUND)来确定。 </p><p>其中startAngle是起始角度，length是跨度(即弧所覆盖的角度)。</p><p>角度使用度来作为单位，并且遵循通常的数学约定(即，0度是最东的方向，正的方向表示从最东方向开始顺时针方向的旋转角度)<br><img src="media/15897048959125.jpg" alt="-w1188"><br>单词解释： chord - 弦<br>不同类型弧长如下 ：<br><img src="media/15897049914944.jpg" alt="-w530"></p><p>角度可以是负数。一个负的起始角度从最东的方向顺时针旋转一个角度。一个负的跨度角度从起始角度开始顺时针旋转一个角度<br>（一句话总结： 这里的正负就和数学中一样）</p><h3 id="Polygon-多边形-和polyline-折线"><a href="#Polygon-多边形-和polyline-折线" class="headerlink" title="Polygon(多边形)和polyline(折线)"></a>Polygon(多边形)和polyline(折线)</h3><p>Polygon类定义一个连接一个点序列的多边形，polyline类类似于Polygon类，不同之处是Polyline类不会自动闭合。分别如下图所示：<br><img src="media/15897063079146.jpg" alt="-w1178"></p><p><img src="media/15897063195567.jpg" alt="-w1169"></p><h2 id="示例学习：-ClockPane-类"><a href="#示例学习：-ClockPane-类" class="headerlink" title="示例学习： ClockPane 类"></a>示例学习： ClockPane 类</h2><p>要点提示： 学习开发一个类，在面板中显示一个始终<br>ClockPane的合约图如下<br><img src="media/15897840550956.jpg" alt="-w1058"></p><p>因为一分钟有60s，所以第二个指针的角度是:<br>second * (2*pi/60)<br>包含秒数的确切分钟数是(minute + second / 60)</p><p>因为一小时有60分，因此分针的角度是(minute + second / 60) * (2pi/60)</p><p>由于一个圆被分为12个小时，所以时针的角度是： (hour + minute / 60 + second / (60 + 60)) * (2pi/12)<br><img src="media/15897845812196.jpg" alt="-w1163"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaFX基础&quot;&gt;&lt;a href=&quot;#JavaFX基础&quot; class=&quot;headerlink&quot; title=&quot;JavaFX基础&quot;&gt;&lt;/a&gt;JavaFX基础&lt;/h1&gt;&lt;h1 id=&quot;javaFX是学习面向对象编程的优秀教学工具&quot;&gt;&lt;a href=&quot;#javaFX是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-引用数据类型</title>
    <link href="http://www.nianchu.space/2020/05/04/Java/Java-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.nianchu.space/2020/05/04/Java/Java-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-05-04T14:16:58.434Z</published>
    <updated>2020-05-05T14:13:54.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-引用数据类型与基本数据类型"><a href="#Java-引用数据类型与基本数据类型" class="headerlink" title="Java-引用数据类型与基本数据类型"></a>Java-引用数据类型与基本数据类型</h1><p><img src="media/15886035121002.jpg" alt="-w1012"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-引用数据类型与基本数据类型&quot;&gt;&lt;a href=&quot;#Java-引用数据类型与基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;Java-引用数据类型与基本数据类型&quot;&gt;&lt;/a&gt;Java-引用数据类型与基本数据类型&lt;/h1&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-黑马教程</title>
    <link href="http://www.nianchu.space/2020/04/30/Java/Java-%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/"/>
    <id>http://www.nianchu.space/2020/04/30/Java/Java-%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-30T05:56:40.257Z</published>
    <updated>2020-04-30T08:17:55.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-黑马教程"><a href="#Java-黑马教程" class="headerlink" title="Java-黑马教程"></a>Java-黑马教程</h1><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><p>硬盘： 永久存储<br>内存： 临时存储</p><p>I： input输入，读取<br>O： output输出，写入<br>流： 数据(字符，字节)<br>1字符=2字节=<br>1字节=8个二进制位（即8个byte）</p><p>输入：把硬盘中的数据读取到内存中使用<br>输出 ：把内存中的数据写入到硬盘中保存<br><img src="media/15882264874443.jpg" alt="-w1448"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>一切文件数据（文本、图片、视频）都是以字节方式存储的。<br>所以，字节流可以传输任意文件数据，在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终是二进制数据</p><h4 id="OutputStream-字节输出流"><a href="#OutputStream-字节输出流" class="headerlink" title="OutputStream 字节输出流"></a>OutputStream 字节输出流</h4><p>此抽象类是表示输出字节流的所有类的超类<br>定义了一些子类共性的成员方法。</p><h5 id="FileOutputStream-文件字节输出流"><a href="#FileOutputStream-文件字节输出流" class="headerlink" title="FileOutputStream 文件字节输出流"></a>FileOutputStream 文件字节输出流</h5><p>作用： 把内存中的数据写入到硬盘的文件中</p><p>构造方法： </p><p>FileOutputStream(File file)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(String name)<br>          创建一个向具有指定名称的文件中写入数据的输出文件流。</p><p>参数： 写入数据的目的地<br>string name：目的地是一个文件的路径<br>File file： 目的地是一个文件<br>构造方法的作用： </p><ol><li>创建一个FileOutputStream对象</li><li>会根据构造方法中传递的文件/文件路径，创建一个空的文件</li><li>会把FileOutputStream对象只想创建好的文件</li></ol><h5 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h5><p>原理：如果 内存 -&gt; 硬盘<br>java程序 — JVM（java虚拟机）— OS（操作系统）— OS调用写数据的方法 — 把数据写入到文件</p><p>字节流的使用步骤(重点)</p><ol><li>创建一个FIleOutputStream对象，构造方法中传入数据的目的地</li><li>调用FIleOutputStream对象中的方法write，把数据写入到文件中</li><li>释放资源（这样可以节约内存，因为流的使用会占用一定的内存）</li></ol><p><strong><em>文件存储的原理和记事本打开</em></strong><br>写数据的时候会把十进制的整数转换为二进制的整数</p><p>记事本在打开文件的时候都会查询编码表，把字节转换为字符表示，故如果写入为：<br>0-127 - 查询ASCII表<br>其他值：会查询系统默认码表（中文系统GBK）<br><img src="media/15882290494697.jpg" alt="-w1433"></p><h6 id="一次写多个字节的方法"><a href="#一次写多个字节的方法" class="headerlink" title="一次写多个字节的方法"></a>一次写多个字节的方法</h6><p><img src="media/15882291991446.jpg" alt="-w706"><br>第一个：<br>用于一次写多个字节：</p><ul><li>如果写的第一个字节是正数（0-127），那么显示的时候会查询ASCII表</li><li>如果写的第一个字节是负数，那么第一个字节会和第二个字节，连个字节组成一个中文显示，查询系统默认码表（GBK）</li></ul><p>第二个用来写字节数组的一部分：<br>int off: 数组的开始索引<br>int len: 写几个字节</p><p>另外一种写入字符的方法：<br>使用String类中的方法把字符串，转换为字节数组</p><h6 id="数据的续写和换行写"><a href="#数据的续写和换行写" class="headerlink" title="数据的续写和换行写"></a>数据的续写和换行写</h6><p>续写即追加写</p><p>构造方法：<br>FileOutputStream(String name, boolean append)<br>          创建一个向具有指定 name 的文件中写入数据的输出文件流。<br>          FileOutputStream(File file, boolean append)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</p><p>参数：<br>String name，File file ： 写入数据的目的地<br>boolean append： 续写开关</p><ul><li>true： 继续在文件末尾续写数据</li><li>false： 创建一个新文件，覆盖</li></ul><p>换行写，写完数据之后写上换行符号</p><h4 id="InputStream-字节输入流"><a href="#InputStream-字节输入流" class="headerlink" title="InputStream 字节输入流"></a>InputStream 字节输入流</h4><p>方法：<br>    int read()<br>          从此输入流中读取下一个数据字节。<br>int    read(byte[] b)<br>从此输入流中将 byte.length 个字节的数据读入一个 byte 数组中。<br>void    close()<br>          关闭此输入流并释放与此流关联的所有系统资源。</p><h5 id="FileinputStream-文件字节输入流"><a href="#FileinputStream-文件字节输入流" class="headerlink" title="FileinputStream 文件字节输入流"></a>FileinputStream 文件字节输入流</h5><p><img src="media/15882331045281.jpg" alt="-w354"></p><p>作用： 把硬盘文件中的数据，读取到内存中使用</p><p>构造方法：<br><img src="media/15882332509769.jpg" alt="-w1110"></p><p>参数：<br>读取文件的数据源<br>String name:文件的路径<br>File file: 文件<br>构造方法的作用：</p><ol><li><p>会创建一个FileInputStream对象</p></li><li><p>会把FileInputStream对象指向构造方法中要读取的文件</p><p>读取数据的原理：<br>原理：如果 硬盘 -&gt; 内存<br>java程序 — JVM（java虚拟机）— OS（操作系统）— OS调用读数据的方法 — 读入文件<br>使用步骤：</p><ol><li>创建一个FileInputStream对象，构造方法中绑定要读取的数据</li><li>使用FileInputStream对象中的方法read，读取文件<br>int read()读取文件中的一个字节并返回，读取到文件的末尾返回-1</li><li>释放资源</li></ol></li></ol><p><strong><em>注意</em></strong><br>不知道文件中有多少字节，使用while循环<br>boolean表达式：while((len = fis.read())!= -1){<br>}<br>实际过程：<br>int len;<br>len = fis.read();<br>len = fis.read())!= -1</p><p>而不能写成：<br>while((fis.read())!= -1){<br>System.out.println(fis.read())<br>}</p><p> <strong><em>方法</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-黑马教程&quot;&gt;&lt;a href=&quot;#Java-黑马教程&quot; class=&quot;headerlink&quot; title=&quot;Java-黑马教程&quot;&gt;&lt;/a&gt;Java-黑马教程&lt;/h1&gt;&lt;h2 id=&quot;I-O&quot;&gt;&lt;a href=&quot;#I-O&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-郑莉版输入输出流课件</title>
    <link href="http://www.nianchu.space/2020/04/30/Java/Java-%E9%83%91%E8%8E%89%E7%89%88%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E8%AF%BE%E4%BB%B6/"/>
    <id>http://www.nianchu.space/2020/04/30/Java/Java-%E9%83%91%E8%8E%89%E7%89%88%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E8%AF%BE%E4%BB%B6/</id>
    <published>2020-04-30T01:36:46.332Z</published>
    <updated>2020-04-30T05:50:27.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="郑莉版输入输出流课件"><a href="#郑莉版输入输出流课件" class="headerlink" title="郑莉版输入输出流课件"></a>郑莉版输入输出流课件</h1><p>在Java中将信息的输入与输出过程抽象为I/O流<br>I/O流一旦被创建就会自动打开<br>通过调用close方法，可以显式关闭任何一个流<br>如果流对象不再被引用，Java的回收机制也会隐式地关闭它<br><img src="media/15882111044109.jpg" alt="-w687"></p><h2 id="读写数据的方法"><a href="#读写数据的方法" class="headerlink" title="读写数据的方法"></a>读写数据的方法</h2><p>不论数据从哪来，到哪去，也不论数据本身是何种类型，读写数据分方法大体上都是一样的<br><img src="media/15882113259367.jpg" alt="-w524"></p><h2 id="I-O流的分类"><a href="#I-O流的分类" class="headerlink" title="I/O流的分类"></a>I/O流的分类</h2><ul><li>从流的方向划分</li></ul><ul><li>输入流</li><li>输出流</li></ul><ul><li>从流的分工划分</li></ul><ul><li>节点流</li><li>处理流</li></ul><ul><li>从流的内容划分</li></ul><ul><li>面向字符的流</li><li>面向字节的流</li></ul><p><strong><em>自己补充了解：</em></strong><br>节点流和处理流的区别<br><img src="media/15882115576182.jpg" alt="-w568"></p><h2 id="java-io-包的顶级层次结构"><a href="#java-io-包的顶级层次结构" class="headerlink" title="java.io 包的顶级层次结构"></a>java.io 包的顶级层次结构</h2><p>面向字符的流： 专门用于字符数据<br>面向字节的流： 用于一般目的<br><img src="media/15882126043831.jpg" alt="-w586"></p><h2 id="面向字符的流"><a href="#面向字符的流" class="headerlink" title="面向字符的流"></a>面向字符的流</h2><ul><li>针对字符数据的特点进行过优化，提供一些面向字符的有用特性</li><li>源或目标通常是文本文件<h3 id="实现内部格式和文本文件中的外部格式之间的转换"><a href="#实现内部格式和文本文件中的外部格式之间的转换" class="headerlink" title="实现内部格式和文本文件中的外部格式之间的转换"></a>实现内部格式和文本文件中的外部格式之间的转换</h3><img src="media/15882130366292.jpg" alt="-w684"><h3 id="面向字符的抽象类Read和Writer"><a href="#面向字符的抽象类Read和Writer" class="headerlink" title="面向字符的抽象类Read和Writer"></a>面向字符的抽象类Read和Writer</h3></li><li>java.io包中所有流的抽象基类</li><li>Reader提供了输入字符的API</li><li>Writer提供了输出字符的API</li><li>它们的子类又分为两大类</li></ul><ul><li>节点流： 从数据源读入数据或往目的地写出数据</li><li>处理流： 对数据执行某种处理</li></ul><ul><li>多数程序使用这两个抽象类的一系列子类来读入/写出文本信息</li></ul><ul><li>例如： FileRader/FileWriter用来读写文本文件</li></ul><p>处理流和节点流一览：<br><img src="media/15882256079774.jpg" alt="-w670"></p><h2 id="面向字节的流"><a href="#面向字节的流" class="headerlink" title="面向字节的流"></a>面向字节的流</h2><ul><li>数据源或目标中含有非字符数据，必须用字节流来输入/输出。</li><li>通常被用来读写诸如图片、声音之类的二进制数据</li><li>绝大多数数据是被存储为二进制文件的，世界上的文本大约只能占到2%，通常二进制文件比含有相同数据量的文本文件小得多。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;郑莉版输入输出流课件&quot;&gt;&lt;a href=&quot;#郑莉版输入输出流课件&quot; class=&quot;headerlink&quot; title=&quot;郑莉版输入输出流课件&quot;&gt;&lt;/a&gt;郑莉版输入输出流课件&lt;/h1&gt;&lt;p&gt;在Java中将信息的输入与输出过程抽象为I/O流&lt;br&gt;I/O流一旦被创建就
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/java-抽象类和接口</title>
    <link href="http://www.nianchu.space/2020/04/16/Java/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://www.nianchu.space/2020/04/16/Java/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-04-16T00:48:24.569Z</published>
    <updated>2020-04-22T14:46:28.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>要点提示： 父类中定义了相关子类的共同行为。接口可以拥有定义类的共同行为(包括非相关的类)</p><h2 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h2><p>要点提示： 抽象类不可以用于创建对象。抽象类可以包含抽象方法，这些方法将在具体的子类中实现。</p><ul><li><p>抽象类定义： 类的设计应该确保父类包含它的子类的共同特征。有时候，一个父类设计得非常抽象，以至于它都没任何具体的实例。这样的类称为抽象类。</p></li><li><p>抽象方法：<br><img src="media/15869985945845.jpg" alt="-w1084"></p></li><li><p>抽象类和常规类很像，但是不能使用new操作符创建它的实例。抽象方法只有定义而没有实现。他的实现由子类实现。一个包含对象方法的类的必须声明为抽象类。</p></li><li><p>抽象类的沟造方法定义为protected，它只能被子类使用。创建一个具体的子类的实例时，它的父类的构造方法被调用以初始化父类中定义的数据域。</p></li></ul><h3 id="为何要使用抽象方法"><a href="#为何要使用抽象方法" class="headerlink" title="为何要使用抽象方法"></a>为何要使用抽象方法</h3><p>使用抽象方法以后，JVM在运行时可以根据对象的类型动态地决定调用哪一个方法。</p><h3 id="抽象类的几点说明"><a href="#抽象类的几点说明" class="headerlink" title="抽象类的几点说明"></a>抽象类的几点说明</h3><ul><li>抽象方法不能包含在非抽象类中。如果抽象父类的子类不能实现所有的抽象方法，那么子类也必须定义为抽象的。即在抽象类扩展的非抽象子类中，必须实现所有的抽象方法。另外，抽象方法是<em>非静态</em>的。</li><li>抽象类不能使用new关键字来初始化。但是仍然可以定义它的构造方法，这个构造方法在它的子类的构造方法中调用。</li><li>抽象方法的类必须是抽象的。但是，可以定义一个不包含抽象方法的抽象类。这种情况下，不能使用new创建该类的实例。这种类是用来定义新子类的基类的。</li><li>子类可以覆盖分类的方法并将它定义为abstract。</li><li>即使子类的父类是具体的，这个子类也可以是抽象的。</li><li>不能使用new从一个抽象类创建一个实例。但是抽象类可以用作一种数据类型。<br>下面语句用来创建一个元素是GeometricObject类型的数组：<br>GeometricObject[] objects = new GeometricObject[10];<br>然后可以创建一个GeometricObject的实例，并将它的引用赋值给数组。<br>object[0] = new Circle();// Circle是GeometricObject的子类</li></ul><h2 id="示例学习：-抽象的Number类"><a href="#示例学习：-抽象的Number类" class="headerlink" title="示例学习： 抽象的Number类"></a>示例学习： 抽象的Number类</h2><p>要点提示： Number类是数值包装类、BigInteger以及BigDecimal的父类。</p><h2 id="示例学习：-Calendar和GregorianCalendar"><a href="#示例学习：-Calendar和GregorianCalendar" class="headerlink" title="示例学习： Calendar和GregorianCalendar"></a>示例学习： Calendar和GregorianCalendar</h2><p>要点提示： GregorianCalendar是抽象类Calendar的一个具体子类。</p><p>一个Date的实例表示以毫秒为精度的特定时刻。Calendar是一个抽象的基类，可以提取出详细的日历信息。例如： 年、月、日、小时、分钟和秒。<br>GregorianCalendar是一个支持公历的类。<br>Calendar类中的add方法是抽象的，因为它的实现依赖于某个具体的日历系统。</p><p>可以使用new GregorianCalendar()利用当前时间构造一个默认的GregorianCalendar对象，可以使用GregorianCalendar(year, month, date)利用指定的year、month和date(日)构造一个GregorianCalendar对象。参数month是基于0的，即0代表1月</p><p>在Calendar类中定义的get(int field)方法在从Calendar类中提取日期和时间信息方面是很有用的。日期和时间域都被定义为常量。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>要点提示： 接口是一种与类相似的结构，只包含常量和抽象方法</p><p>接口在很多方面都与抽象类很相似，但是它的目的是指明相关或者不相关类的多个对象的共同行为。例如，使用正确的接口，可以指明这些对象是可比较的、可食用的，以及可克隆的。<br>定义接口：<br><img src="media/15870270601472.jpg" alt="-w975"></p><p>在java中，接口被看作是一种特殊的类。就像常规类一样，每个接口都被编译为独立的字节码文件。使用接口或多或少有点像使用抽象类。即：</p><ul><li>可以使用接口作为引用变量的数据类型或类型转换的结果。</li><li>不能使用new操作符创建接口的实例。</li></ul><p>可以使用Edible接口来明确一个对象是否是可食用的。这需要使用implements关键字让对象的类实现这个接口来完成。</p><h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p>要点提示： Comparable接口定义了compoareTo方法，用于比较对象。<br>接口的定义如下：<br>// Interface for comparing objects, defined in java.lang<br>package java.lang;<br>public interface Comparable<E><br>{ public int compareTo(E o);<br>}</p><p>Comparable 方法判断这个对象相对于给定对象o的<em>顺序</em>，并且当这个对象小于、等于或大于给定对象o时，分别返回负整数、0或正整数。</p><p>Comparable接口是一个泛型接口。在实现该接口时，泛型类型E被替换成一种具体的类型。</p><p>由于所有Comparable对象都有compareTo方法，如果对象是Comparable接口类型的实例的话，Java API中的java.util.Arrays.sort(Object[])方法就可以使用compareTo方法对数组中的对象进行比较和排序。</p><h2 id="Cloneable接口"><a href="#Cloneable接口" class="headerlink" title="Cloneable接口"></a>Cloneable接口</h2><p>要点提示： Cloneable接口给出了一个可克隆的对象。</p><p>经常会出现需要创建一个对象拷贝的情况。为了实现这个目的，需要使用clone方法并理解Cloneable接口。</p><p>接口通常包括常量和抽象方法，但是Cloneable接口是一个特殊情况。在java.lang包中的Cloneable接口的定义如下：<br>package java.lang;<br>public interface Cloneable {<br>}</p><p>也就是说，这个接口是空的。<br>一个带空体的接口被称为标记接口(maker interface).一个标记接口及不包括常量也不包括方法。它用来表示一个类拥有某种特定的属性。实现Cloneable接口的类标记为可克隆的，而且它的对象可以使用在Object类中定义的clone()类方法。</p><p>Java库中的很多类（例如，Date、Calendar和ArrayList）实现Cloneable。这样这些类的实例可以被克隆。</p><p>为了定义一个自定义类来实现Cloneable接口，这个类必须覆盖Object类中的clone()方法。</p><h3 id="浅复制、-深复制"><a href="#浅复制、-深复制" class="headerlink" title="浅复制、 深复制"></a>浅复制、 深复制</h3><p>意思是：<br>Object类中的clone方法将原始对象的每个数据域赋值给目标对象。如果一个数据域是基本类型，复制的就是它的值，例如，area(double 类型)的值从house1复制到house2.如果一个数据域是对象，复制的就只是该域的引用。例如，域whenBuilt是Date类，所以，它的引用被复制给house2。<br>因此，尽管，house1==house2为假，但是house1.whenBuilt==house2.whenBuilt为真。这称为浅复制(shallow copy)而不是深复制(deep copy),这意味着如果数据域是对象类型，那么复制的是对象的引用，而不是它的内容。</p><h2 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h2><p>要点提示：一个类可以实现多个接口，但是只能继承一个父类。<br>接口的使用和抽象类的使用基本相似，但是，定义一个接口与定义一个抽象类有所不同。<br><img src="media/15870516633639.jpg" alt="-w1096"></p><p>利用关键字extands，接口可以继承其他接口。这样的接口称为子接口(subinterface)。</p><p>接口可以扩展其他接口而不是类。一个类可以扩展它的父类同时实现多个接口。</p><p>所有的类共享一个根类Object，但是接口没有共同的根。<em>与此类似，接口也可以定义一种类型。一个接口类型的变量可以引用实现该接口的类的实例</em>。如果一个类实现了一个接口，那么这个接口就类似于该类的一个父类。可以将接口当作一种数据类型使用，将接口类型的变量转换为它的子类，反过来也可以。</p><p>注意：类名是一个名词。接口名可以是形容词或者名词。</p><p>设计指南：<br><img src="media/15870522012115.jpg" alt="-w1131"></p><p>通常，推荐使用接口而非抽象类，因为接口可以定义非相关类共有的父类型。接口比类更灵活。</p><h2 id="实例学习：-Rational类"><a href="#实例学习：-Rational类" class="headerlink" title="实例学习： Rational类"></a>实例学习： Rational类</h2><p>设计一个Rational类，用于表示和处理有理数。</p><h2 id="类的设计原则"><a href="#类的设计原则" class="headerlink" title="类的设计原则"></a>类的设计原则</h2><p>要点提示： 类的设计原则有助于设计出合理的类</p><h3 id="内聚性"><a href="#内聚性" class="headerlink" title="内聚性"></a>内聚性</h3><p>类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，只吃一个一致的目的。</p><p>如果一个实体担负太多的职责，就应该按各自的职责分成几个类</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>遵循标准Java程序设计风格和命名习惯。为类、数据域和方法选取具有信息的名字。通常的风格是将数据声明至于构造方法之前，并且将构造方法置于方法之前。</p><p>选择名字要保持一致。给类似的操作选择不同的名字并非良好的实践。</p><p>一般来说，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。如果一个类不支持无参的构造方法，要用文档写出原因。如果没有显式定义构造方法，即假定有一个空方法体的公共默认无参构造方法。</p><p>如果不想用户创建类的对象，可以在类中声明一个私有的构造方法，Match类就是如此</p><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>一个类应该使用private修饰符隐藏其数据，以免用户直接访问它。这使类更易于维护。</p><p><strong>只在</strong>希望数据域可读的情况下，才提供get方法；也只希望数据域可更新的情况下，才提供set方法。</p><h3 id="清晰性"><a href="#清晰性" class="headerlink" title="清晰性"></a>清晰性</h3><p>类应该有一个很清晰的合约，从而易于解释和理解。</p><p>用户可以以各种不同组合、顺序，以及在各种环境中结合使用多个类。因此，在设计一个类时，这个类不应该限制用户如何以及何时使用该类；以一种方式设计属性，以容许用户按值的任何顺序和任何组合来设置；设计方法应该使得实现的功能与它们出现的顺序无关。</p><p>不应该声明一个来自其他数据域的数据域。<br>例如：<br><img src="media/15875645623585.jpg" alt="-w1122"></p><h3 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h3><p>类是为许多不同用户的使用而设计的。为了能在一个广泛的应用中使用，一个类应该通过属性和方法提供多种方案以适应用户的不同需求。</p><h3 id="实例和静态"><a href="#实例和静态" class="headerlink" title="实例和静态"></a>实例和静态</h3><p>依赖于类的具体实例的变量或方法必须是一个实例变量或方法。</p><p>如果一个变量被类的所有实例所共享，那就应该将它声明为静态的。</p><p>如果方法 不依赖于某个具体的实例，那就应该将它声明为静态方法。</p><p>应该总是使用类名(而不是引用变量)引用静态变量和方法，以增强可读性并避免错误。</p><p>不要从构造方法中传入参数初始化<em>静态</em>数据。最好使用set方法改变静态数据域。</p><p>实例和静态是面向对象程序设计不可或缺的部分。数据域或方法要么是实例的，要么是静态的。不要错误地忽视了静态数据域或方法。</p><p>构造方法永远都是实例方法，因为它是用来创建具体实例的。一个静态变量或方法可以从实例中调用，但是不能从静态方法中调用实例变量或方法。</p><h3 id="继承和聚合"><a href="#继承和聚合" class="headerlink" title="继承和聚合"></a>继承和聚合</h3><p>继承和聚合之间的差异，就是is-a(是一种)和has-a(具有)之间的关系。<br>这里解释一下后者：<br>人具有名字，因此，可以使用<em>聚合</em>来对Person类和Name类之间的关系建模。</p><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>接口和抽象类都可以用于为对象指定共同的行为。</p><p>如何决定是采用接口还是抽象类？<br>同常，比较强的is-a关系清晰地描述了父子关系，应该采用类的继承关系来建模。弱的is-a关系，也称为is-kind-of(是一类)关系，表明一个对象拥有某种属性。弱的is-a关系可以使用接口来建模。</p><p>接口比抽象类更灵活，因为一个子类只能继承一个父类，但是却可以实现任意个数的接口。然而，接口不能具有具体的方法。可以结合接口和抽象类的优点，创建一个接口，使用一个抽象类来实现它。可以视其方便使用接口或抽象类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h1&gt;&lt;p&gt;要点提示： 父类中定义了相关子类的共同行为。接口可以拥有定义类的共同行为(包括非相关的类)&lt;/p&gt;
&lt;h2 id=&quot;抽象类-1&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-有关重写的问题</title>
    <link href="http://www.nianchu.space/2020/04/12/Java/Java-%E6%9C%89%E5%85%B3%E9%87%8D%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.nianchu.space/2020/04/12/Java/Java-%E6%9C%89%E5%85%B3%E9%87%8D%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-12T10:25:11.513Z</published>
    <updated>2020-04-12T14:25:38.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关重写的问题"><a href="#有关重写的问题" class="headerlink" title="有关重写的问题"></a>有关重写的问题</h1><h2 id="重写和覆盖的关系"><a href="#重写和覆盖的关系" class="headerlink" title="重写和覆盖的关系"></a>重写和覆盖的关系</h2><p><strong>* 重写就是覆盖 *</strong></p><h3 id="需要注意的几点："><a href="#需要注意的几点：" class="headerlink" title="需要注意的几点："></a>需要注意的几点：</h3><ul><li>仅当实例方法是可访问时，它才能被覆盖。因为私有方法在它的类本身以外是不能访问的，所以它不能被覆盖。如果子类中定义的方法在父类中是私有的，那么这两个方法完全没有关系。</li><li>与实例方法一样，静态方法也能被继承。但是，静态方法不能被覆盖。如果父类中定义的静态方法在子类中重新被定义，那么在父类中定义的静态方法将被禁藏。可以使用语法: 父类名.静态方法名(superClassName.staticMethodName)调用隐藏的静态方法。<h3 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h3>不允许在子类中的一个方法具有和它父类中的方法完全相同的方法签名，但是返回值类型不同。这样会导致语法错误。</li></ul><p>子类中与其父类中的方法同名但具有不同参数类型的方法被称为重载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有关重写的问题&quot;&gt;&lt;a href=&quot;#有关重写的问题&quot; class=&quot;headerlink&quot; title=&quot;有关重写的问题&quot;&gt;&lt;/a&gt;有关重写的问题&lt;/h1&gt;&lt;h2 id=&quot;重写和覆盖的关系&quot;&gt;&lt;a href=&quot;#重写和覆盖的关系&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-ArrayList类</title>
    <link href="http://www.nianchu.space/2020/04/11/Java/Java-ArrayList%E7%B1%BB/"/>
    <id>http://www.nianchu.space/2020/04/11/Java/Java-ArrayList%E7%B1%BB/</id>
    <published>2020-04-11T06:04:19.112Z</published>
    <updated>2020-04-11T07:07:54.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><p>要点提示：ArrayList 对象可以用于存储一个对象列表</p><h2 id="用数组存储对象"><a href="#用数组存储对象" class="headerlink" title="用数组存储对象"></a>用数组存储对象</h2><p>数组可以用于存储一个一组对象，但是这个数组一旦创建，它的大小就固定了。Java提供ArrayList类来存锤不限定个数的对象。</p><h2 id="ArrayList类-1"><a href="#ArrayList类-1" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><p>ArrayList是一种泛型类，具有一个泛型类型E。创建一个ArrayList时，可以指定一个具体的类型来替换E。<br>ArrayList类详细：<br><img src="media/15865854188912.jpg" alt="-w1127"></p><p>创建一个ArrayList，并且将其引用赋值给变量cities。该ArrayList对象可以用于存储字符串。例如：<br>ArrayList<String> cities = new ArrayList<String>();</p><p>创建一个ArrayList并且将其引用赋值给变量dates。该ArrayList对象可以用于存储日期。<br>ArrayList<Date> dates = new ArrayList<Date>();</p><p><strong>* 更新说明 *</strong><br><img src="media/15865856170194.jpg" alt="-w1039"></p><h2 id="ArrayList和数组之间的异同"><a href="#ArrayList和数组之间的异同" class="headerlink" title="ArrayList和数组之间的异同"></a>ArrayList和数组之间的异同</h2><p><img src="media/15865871383307.jpg" alt="-w1171"><br><img src="media/15865871488543.jpg" alt="-w1169"></p><p>分别对数组和ArrayList进行排序：<br><img src="media/15865888719004.jpg" alt="-w1133"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ArrayList类&quot;&gt;&lt;a href=&quot;#ArrayList类&quot; class=&quot;headerlink&quot; title=&quot;ArrayList类&quot;&gt;&lt;/a&gt;ArrayList类&lt;/h1&gt;&lt;p&gt;要点提示：ArrayList 对象可以用于存储一个对象列表&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java-对象转换和instanceof</title>
    <link href="http://www.nianchu.space/2020/04/11/Java/Java-%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%92%8Cinstanceof/"/>
    <id>http://www.nianchu.space/2020/04/11/Java/Java-%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%92%8Cinstanceof/</id>
    <published>2020-04-11T03:12:04.583Z</published>
    <updated>2020-04-11T06:02:39.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-对象转换和instanceof"><a href="#Java-对象转换和instanceof" class="headerlink" title="Java-对象转换和instanceof"></a>Java-对象转换和instanceof</h1><p>要点提示：对象的引用可以类型转换为另外一种对象的引用，这称为对象转换。</p><h2 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h2><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>Object o = new Student();<br>Student类是Object类的一个子类</p><h3 id="向上转换-upcasting"><a href="#向上转换-upcasting" class="headerlink" title="向上转换(upcasting)"></a>向上转换(upcasting)</h3><p>总是可以将一个子类的实例转换为一个父类的变脸，称为向上转换，因为子类的实例永远是它的父类的实例。(不需要使用转换记号”(子类名)”)</p><h3 id="向下转换-downcasting"><a href="#向下转换-downcasting" class="headerlink" title="向下转换(downcasting)"></a>向下转换(downcasting)</h3><p>当把一个父类的实例转换为它的子类变量(称为向下转换)时，必须使用转换记号”(子类名)”进行显式转换，向编译器表明意图。</p><p>为使转换成功，必须确保要转换的对象是子类的一个实例。如果父类对象不是子类的一个实例，就会出现一个运行异常ClassCastException.</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 是java中的关键字</p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>(A和B都是对象)<br>A instanceof B //用来确定A是不是B的一个实例</p><h3 id="⚠️"><a href="#⚠️" class="headerlink" title="⚠️"></a>⚠️</h3><p><strong>*注意 *</strong><br>对象成员访问运算符(.)优先于类型转换运算符。所以使用圆括号保证在点运算符(.)之前进行转换，例如：<br>((Circle)object).getArea();</p><p>另外，对基本类型值进行转换不同于对对象引用进行转换。转换基本类型值返回一个新的值，例如：<br>int age = 45;<br>byte newAge = (byte)age;// A new value is assigned to newAge</p><p>而转换一个对象引用不会创建一个新的对象。例如：<br>Object o = new Circle();<br>Circle c = (Circle)o; // No new object is created<br>现在，引用变量o和c指向同一个对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-对象转换和instanceof&quot;&gt;&lt;a href=&quot;#Java-对象转换和instanceof&quot; class=&quot;headerlink&quot; title=&quot;Java-对象转换和instanceof&quot;&gt;&lt;/a&gt;Java-对象转换和instanceof&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java_instanceof</title>
    <link href="http://www.nianchu.space/2020/04/09/Java/Java_instanceof/"/>
    <id>http://www.nianchu.space/2020/04/09/Java/Java_instanceof/</id>
    <published>2020-04-09T01:22:47.193Z</published>
    <updated>2020-04-09T01:24:33.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="instanceof关键字用法"><a href="#instanceof关键字用法" class="headerlink" title="instanceof关键字用法"></a>instanceof关键字用法</h1><p>instanceof 是java的一个二元操作符，类似于==，&gt;,&lt;等操作符。<br>instanceof 是java的保留关键字，它的作用是测试它左边的对象是否是它右边的类的实例 ，返回boolean的数据类型</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;instanceof关键字用法&quot;&gt;&lt;a href=&quot;#instanceof关键字用法&quot; class=&quot;headerlink&quot; title=&quot;instanceof关键字用法&quot;&gt;&lt;/a&gt;instanceof关键字用法&lt;/h1&gt;&lt;p&gt;instanceof 是java的一
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java/Java_多态</title>
    <link href="http://www.nianchu.space/2020/04/09/Java/Java_%E5%A4%9A%E6%80%81/"/>
    <id>http://www.nianchu.space/2020/04/09/Java/Java_%E5%A4%9A%E6%80%81/</id>
    <published>2020-04-09T00:59:35.526Z</published>
    <updated>2020-04-09T01:32:34.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java_多态"></a>Java_多态</h1><p>多态是同一个行为具有不同表现形式或形态的能力<br>多态就是同一个接口，使用不同的实例而执行不同的操作。</p><h2 id="多态性的优点"><a href="#多态性的优点" class="headerlink" title="多态性的优点"></a>多态性的优点</h2><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>借口性</li><li>灵活性</li><li>简化性<h2 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h2></li><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>当使用多态方式调用方法时，首先检测父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。<br>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class DuoTai &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        show(new Cat()); // 以Cat对象调用show方法</span><br><span class="line">        show(new Dog()); // 以Dog对象调用show方法</span><br><span class="line"></span><br><span class="line">        Animal a = new Cat(); // 向上转型</span><br><span class="line">        a.eat();               // 调用的是Cat的eat</span><br><span class="line">        Cat c = (Cat)a;         // 向下转型</span><br><span class="line">        c.work();               // 调用的是Cat的work</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void show(Animal a)&#123;</span><br><span class="line">        a.eat();</span><br><span class="line">        if (a instanceof Cat)&#123; // 猫做的事情</span><br><span class="line">            Cat c = (Cat)a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (a instanceof Dog)&#123;  // 狗做的事情</span><br><span class="line">            Dog c = (Dog) a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Animal&#123;</span><br><span class="line">    abstract void eat();</span><br><span class="line">&#125;</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃鱼&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;抓老鼠&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;看家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>虚函数的存在是为了多态<br>Java中其实并没有虚函数的概念，它的普通函数就相当于C++的虚函数，动态绑定是Java的默认行为。如果Java中不希望某个函数具有虚函数特性，可以加上final关键字编程非虚函数</p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>也就是子类能够重写父类的方法。<br>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。<br>要想调用父类中被重写的方法，则必须使用关键字super。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-多态&quot;&gt;&lt;a href=&quot;#Java-多态&quot; class=&quot;headerlink&quot; title=&quot;Java_多态&quot;&gt;&lt;/a&gt;Java_多态&lt;/h1&gt;&lt;p&gt;多态是同一个行为具有不同表现形式或形态的能力&lt;br&gt;多态就是同一个接口，使用不同的实例而执行不同的操
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
