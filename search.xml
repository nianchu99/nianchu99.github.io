<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java/递归</title>
    <url>/2020/06/03/Java/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h1 id="第18章-递归"><a href="#第18章-递归" class="headerlink" title="第18章 递归"></a>第18章 递归</h1><h2 id="18-1-引言"><a href="#18-1-引言" class="headerlink" title="18.1 引言"></a>18.1 引言</h2><p>*<em>要点提示： *</em>递归是一种针对使用简单的循环难以编程实现的问题，提供优雅解决方案的技术</p>
<p>有关H-树的知识： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffgrtd6h3j31eo0kk4k7.jpg" alt="image-20200603222118178"></p>
<p>使用递归就是使用递归方法编程，递归方法就是直接或间接调用自身的方法。递归是一个很有用的程序技术。</p>
<h2 id="18-2-示例学习：-计算阶乘"><a href="#18-2-示例学习：-计算阶乘" class="headerlink" title="18.2 示例学习： 计算阶乘"></a>18.2 示例学习： 计算阶乘</h2><p>一个递归调用可以导致更多的递归调用，因为这个方法继续把每个子问题分解成新的子问题。要终止一个递归方法，问题最后必须达到一个终止条件。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffhrsxlzfj315y0u01kx.jpg" alt="image-20200603225556923"></p>
<p><strong>如果递归不能使问题简化并最终收敛到基础情况，就有可能出现无限递归。</strong></p>
<h2 id="18-3-示例学习：-计算斐波那契数"><a href="#18-3-示例学习：-计算斐波那契数" class="headerlink" title="18.3 示例学习： 计算斐波那契数"></a>18.3 示例学习： 计算斐波那契数</h2>]]></content>
  </entry>
  <entry>
    <title>HTML/21天学通HTML+CSS+JavaScript Web开发</title>
    <url>/2020/06/01/HTML/21%E5%A4%A9%E5%AD%A6%E9%80%9AHTML+CSS+JavaScript%20Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>##第1章 何为Web发布</p>
<h3 id="1-1-像Web发布者一样思考"><a href="#1-1-像Web发布者一样思考" class="headerlink" title="1.1 像Web发布者一样思考"></a>1.1 像Web发布者一样思考</h3><p>Web是： </p>
<ul>
<li>一个超文本信息系统</li>
<li>跨平台的</li>
<li>分布式的</li>
<li>交互式的</li>
</ul>
<h4 id="1-1-1-Web是一个超文本信息系统"><a href="#1-1-1-Web是一个超文本信息系统" class="headerlink" title="1.1.1 Web是一个超文本信息系统"></a>1.1.1 Web是一个超文本信息系统</h4><p>超文本的含义： 不像看书那样以线性方式阅读，而是可以轻松从一个地方跳到另一个地方： 可以获取更详细的信息，再回过去阅读、跳到其他主题或者根据兴趣阅读。</p>
<p>术语超文本，可以理解为链接。链接也可称为超链接。</p>
<h4 id="1-1-2-Web是跨平台的"><a href="#1-1-2-Web是跨平台的" class="headerlink" title="1.1.2 Web是跨平台的"></a>1.1.2 Web是跨平台的</h4><p>跨平台意味着不管使用什么计算机硬件，也不管运行的是什么操作系统，装备的是什么显示器，都可以一样地访问Web信息。</p>
<p>下面是书中提供的一个很有意思的观点： </p>
<p>*<em>跨平台是一种理想： *</em></p>
<p>随着众多特殊功能、技术和媒体类型的推出，Web的跨平台性特征遭到了损害，Web发布者可以使用很多非标准特性，如Flash，但这样做将缩小其网站的受众范围，如果考虑到越来越多的人转而使用智能手机和移动设备来访问Web，Web发布者还必须做出如下选择： 专门创建用于移动设备的应用程序，还是打造跨平台兼容性更强的Web应用程序。该不该为特定平台提供更强大的功能而降低跨平台的灵活性呢？</p>
<h4 id="1-1-3-Web是分布式的"><a href="#1-1-3-Web是分布式的" class="headerlink" title="1.1.3 Web是分布式的"></a>1.1.3 Web是分布式的</h4><p>Web为什么能成功地提供海量信息呢？因为这些信息分布在全球的数百万个网站中，而每个网站都分别存储其发布的信息。每个网站驻留在一台或者多台被称为Web服务器的计算机上。Web服务器也是计算机，只是负责侦听并相映Web浏览器的请求。我们使用Web浏览器时，请求服务器提供资源以便查看它。我们只是将浏览器指向网站，其他什么都没有做。</p>
<p>网站是Web上一个发布信息的位置。您浏览网页时，浏览器连接到网络以获取该网页。每个网站、网站的每个 网页乃至每项信息都有独一无二的地址，这个地址被称为 ：统一资源定位符(URL).</p>
<h4 id="1-1-4-Web是动态的"><a href="#1-1-4-Web是动态的" class="headerlink" title="1.1.4 Web是动态的"></a>1.1.4 Web是动态的</h4><p>重启浏览器可以获取Web上更新的信息</p>
<p>当前，甚至都无须重新加载网页就能看到最新的信息。通过使用JavaScript可以实时地更新网页的内容。</p>
<h4 id="1-1-5-Web是交互式的"><a href="#1-1-5-Web是交互式的" class="headerlink" title="1.1.5 Web是交互式的"></a>1.1.5 Web是交互式的</h4><p>Web的交互性是通过单击链接跳到其他网页实现的。除此之外，Web还可以让用户同发布者和其他用户交流。</p>
<h3 id="1-2-Web浏览器"><a href="#1-2-Web浏览器" class="headerlink" title="1.2 Web浏览器"></a>1.2 Web浏览器</h3><p><strong>注意：</strong>仅当您确定只有使用特定浏览器的用户访问您的网站时，选择针对该浏览器进行开发才是合适的。</p>
<h4 id="1-2-1-Web浏览器的作用"><a href="#1-2-1-Web浏览器的作用" class="headerlink" title="1.2.1 Web浏览器的作用"></a>1.2.1 Web浏览器的作用</h4><p>Web浏览器的核心作用是连接到We服务器并请求文档，再妥善地设置这些文档的格式并显示它们。</p>
<p>Web浏览器还可显示本地计算机中的文件、下载并非用于显示的文件，甚至让用户能够发送和接受电子邮件。</p>
<p>所有网页都是使用超文本标记语言HTML编写的，这种语言指定网页包含的文本、描述网页的结构、指定到其他文档和图像等多媒体。</p>
<p>即使是同一个文件，不同浏览器设置其格式和显示的方式也可能不同，这取决于系统的功能以及浏览器的配置。</p>
<h4 id="1-2-2-概述一些流行的Web浏览器"><a href="#1-2-2-概述一些流行的Web浏览器" class="headerlink" title="1.2.2 概述一些流行的Web浏览器"></a>1.2.2 概述一些流行的Web浏览器</h4><p><em>Google Chrome</em></p>
<p>和Apple Safari使用的是一个HTML引擎——开源引擎WebKit.</p>
<p><strong>注意：</strong></p>
<p>如果要检查跨平台兼容性问题，请从IE 和 Firefox开始，再将Chrome也囊括进来。</p>
<p><em>Firfox</em></p>
<p>Firfox得以流行是因为它不存在困扰IE的安全问题。</p>
<h3 id="1-3-Web服务器"><a href="#1-3-Web服务器" class="headerlink" title="1.3 Web服务器"></a>1.3 Web服务器</h3><p>要将网页发布到Web上，需要一个Web服务器。</p>
<p>Web服务器是在计算机上运行的程序，负责响应Web浏览器的请求——向它提供URL指定的内容。运行服务器程序的计算机也被称为服务器。</p>
<p><strong>您使用浏览器请求网页时，浏览器使用HTTP建立一条到服务器的Web连接。服务器接受连接，发送请求的文件，再关闭连接。接下来，浏览器对从服务器获取的信息设置格式。</strong></p>
<p>在服务器端，可能有很多不同的浏览器连接到同一个服务器，该服务器负责处理所有这些请求。</p>
<p>Web服务器还负责管理表单输入以及将表单和浏览器关联到运行在服务器上的数据库等程序。</p>
<h3 id="1-4-统一资源定位符"><a href="#1-4-统一资源定位符" class="headerlink" title="1.4 统一资源定位符"></a>1.4 统一资源定位符</h3><p>URL为查找并访问信息提供了统一而一致的方法。</p>
<p>还可以使用URL在文档中创建到另一个文档中的超文本链接。</p>
<p>*<em>URL包含有关如下方面的信息： *</em></p>
<ul>
<li><p>如何获取信息(使用哪种协议： FTP,HTTP还是file)；</p>
</li>
<li><p>该信息所在计算机的Internet主机名(<a href="http://www.ncsa.uiuc.edu)等" target="_blank" rel="noopener">www.ncsa.uiuc.edu)等</a></p>
</li>
<li><p>该信息位于网站的哪个目录或位置</p>
</li>
</ul>
<p>  还可以使用特殊的URL来完成发送邮件和运行JavaScript代码等任务</p>
<h3 id="1-5-广义的Web发布"><a href="#1-5-广义的Web发布" class="headerlink" title="1.5 广义的Web发布"></a>1.5 广义的Web发布</h3><p>一般而言，网页都是根据别人创建的模版生成的，通常可以设置内容的格式——使用图形编辑器或让您能够避免使用HTML的简化标记。</p>
<p>如果，发布的内容看起来不妥，要修复问题就必须懂HTML。</p>
<p>需要区分由您控制的页面部分和您使用发布应用程序生成的部分。</p>
<h3 id="1-7-作业"><a href="#1-7-作业" class="headerlink" title="1.7 作业"></a>1.7 作业</h3><h4 id="1-7-1-问与答"><a href="#1-7-1-问与答" class="headerlink" title="1.7.1 问与答"></a>1.7.1 问与答</h4><p>问： Web由谁负责运营？这些协议都是由谁控制的？这一切都是由谁管理的？</p>
<p>万维网并非由某个组织拥有或控制。<strong>有两类组织给Web的外观和发展方向带来了重大影响：</strong></p>
<ol>
<li><p>万维网联盟(W3C)： 负责制定万维网标准和实施相关的规则，网址为：<a href="http://www.w3.org" target="_blank" rel="noopener">www.w3.org</a></p>
</li>
<li><p>浏览器开发商 ：一些关心Web未来的个人和公司成立了一个名为WHATWG——超文本应用技术工作组。HTML5规范就是WHATWG和W3C一起制定的。</p>
<p>从现在开谁，WHATWG放弃了给HTML规范制定版本号，相反，HTML是一个“流动的标准”，将涵盖实验性功能和得到广泛支持的功能，旨在确保该规范紧跟发展步伐，涵盖浏览器开发商一致同意在其浏览器中添加的功能。</p>
<h2 id="第2章-准备好工具"><a href="#第2章-准备好工具" class="headerlink" title="第2章 准备好工具"></a>第2章 准备好工具</h2><h3 id="2-1-网站剖析"><a href="#2-1-网站剖析" class="headerlink" title="2.1  网站剖析"></a>2.1  网站剖析</h3><ul>
<li>网站： 一个或多个网页，它们以有意义的方式组织起来，一起描述了一项信息或者营造出一种效果。</li>
<li>Web服务器： Internet或内联网中的计算机，在收到浏览器的请求时提供网页或其他文件(内联网是Internet协议但不对公众开放的网络)</li>
<li>网页 ：网站上的入口页面，可链接到当前网站或者其他网站的页面。</li>
<li>主页： 网站的入口页面，可链接到当前网站或者其他网站的页面。</li>
</ul>
</li>
</ol>
<p>网站都由Web服务器托管。</p>
<p>网页有时也被称为Web文档。</p>
<p>网页由HTML文档和其他部分组成。</p>
<h3 id="2-2-为发布到Web准备好计算机"><a href="#2-2-为发布到Web准备好计算机" class="headerlink" title="2.2 为发布到Web准备好计算机"></a>2.2 为发布到Web准备好计算机</h3><p>学习如何从空白开始创建网站，就需要配置计算机，以便能够在本地创建和查看网页</p>
<p>尝试Web发布，只有两款工具是必不可少的，就是文本编辑器和Web浏览器。</p>
<h4 id="2-2-1-文本编辑器"><a href="#2-2-1-文本编辑器" class="headerlink" title="2.2.1 文本编辑器"></a>2.2.1 文本编辑器</h4><p>HTML属于纯文本文件，应使用处理纯文本的工具对其进行编辑。</p>
<h4 id="2-2-2-Web浏览器"><a href="#2-2-2-Web浏览器" class="headerlink" title="2.2.2 Web浏览器"></a>2.2.2 Web浏览器</h4><p>下载Google Chrome</p>
<p>###2.3 使用Google Chrome 开发者工具</p>
<p>打开开发者工具的快捷键 ：</p>
<ul>
<li>Windows中为ctrl  + Shift + I</li>
<li>Mac OS 中： Command + Option + I </li>
</ul>
<p>开发者工具是查看源代码这种概念的扩展，功能更加强大。</p>
<p>开发者工具中包含很多选项卡，默认显示的是Element，其中包含的内容类似于网页的源代码。浏览器下载网页的时候，将其进行转换，让设置HTML格式并显示它的引擎能够明白。</p>
<p>Element选项卡显示的是浏览器看到的HTML，而“查看源代码”显示的是浏览器下载的HTML。这两者有几个不同的地方。</p>
<p>将鼠标指向Element选项卡中的元素，相应的网页部分将呈高亮显示，由此可以知道网页各部分与HTML源代码的对应关系。</p>
<h3 id="2-4-您要在Web上做什么"><a href="#2-4-您要在Web上做什么" class="headerlink" title="2.4 您要在Web上做什么"></a>2.4 您要在Web上做什么</h3><p>对于要发布到Web上的东西，我在本书中称之为内容。</p>
<h3 id="2-5-绘制网站线框图"><a href="#2-5-绘制网站线框图" class="headerlink" title="2.5 绘制网站线框图"></a>2.5 绘制网站线框图</h3><p>网络规划的下一步是确定如何在网页之间分配内容，并制定在网页之间导航的方案。</p>
<h4 id="2-5-1-线框图是什么，为何需要绘制线框图"><a href="#2-5-1-线框图是什么，为何需要绘制线框图" class="headerlink" title="2.5.1 线框图是什么，为何需要绘制线框图"></a>2.5.1 线框图是什么，为何需要绘制线框图</h4><p>线框图是网站完成后的大致轮廓，指出了内容在网页之间的分配情况以及内容是如何彼此关联起来的。</p>
<p>对于复杂的大型网站，线框图可节省大量的时间，避免众多的弯路。</p>
<p>线框图，一般而言，是成组的文档或图像，每组表示网站中一种特定类型的网页。文档包含网页的粗略示意图指出了网页各各部分处于什么位置、占据多大空间以及将发挥的作用</p>
<h4 id="2-5-2-线框图绘制小贴士"><a href="#2-5-2-线框图绘制小贴士" class="headerlink" title="2.5.2 线框图绘制小贴士"></a>2.5.2 线框图绘制小贴士</h4><ul>
<li><p>如何在网页之间分配主题</p>
<p>最佳的做法是，让每个页面都包含一个主题的信息。如果页面有好几屏长，也许该奖相应的主题按逻辑分成多个子主题。</p>
<ul>
<li>在网页之间导航的主要方式是什么？ </li>
</ul>
<p>需要链接。这些是文档中的主链接，让访客能够实现您确定的目标。向前、向后、向上的链接以及到主页的链接都属于主要的导航方式。</p>
<ul>
<li>要提供其他哪些导航方式</li>
</ul>
<p>除了简单的导航链接外，还可以包含与主要Web内容平行的额外信息，如术语表</p>
<p>按字母顺序排列的概念索引、版权信息或职员页面。</p>
<ul>
<li>要在主页上放置哪些内容？</li>
</ul>
<p>主页上的内容应该有足够的吸引力，让目标受众留下来</p>
<ul>
<li>如何让访问内部网页的用户知道他身处何方？</li>
</ul>
<p>可以通过设计和导航实现这个目标。</p>
<ul>
<li>您的目标是什么？</li>
</ul>
<p>注意聚焦于你的目标</p>
<h3 id="2-6-Web托管"><a href="#2-6-Web托管" class="headerlink" title="2.6 Web托管"></a>2.6 Web托管</h3><p>迟早需要将本地计算机上创建的网站放到Internet上，最简单的方法，是获取一个这样的Web托管账户，即让您能够将HTML文件、图像、样式和其他Web内容上传到一台Web服务器。</p>
<h4 id="2-6-1-使用内容管理应用程序"><a href="#2-6-1-使用内容管理应用程序" class="headerlink" title="2.6.1 使用内容管理应用程序"></a>2.6.1 使用内容管理应用程序</h4><p>使用应用程序将内容发布到Web上：</p>
<ul>
<li>博客网站</li>
<li>一些在线工具可以建立格式比博客更开放、更专业的网站</li>
</ul>
</li>
</ul>
<p>上述两种方式，通常只需填写表单并为网站选择URL和主题，然后就可以通过表单输入内容。</p>
<h4 id="2-6-2-设置Web托管"><a href="#2-6-2-设置Web托管" class="headerlink" title="2.6.2 设置Web托管"></a>2.6.2 设置Web托管</h4><p>注册托管账户以便将网页发布到Web上的步骤如下： </p>
<ol>
<li>注册一个域名。</li>
<li>选择一家Web托管公司并注册账户。</li>
<li>将注册的域名同新创建的网站关联起来。</li>
<li>开始上传内容。</li>
</ol>
<h2 id="第3章-HTML-和-CSS简介"><a href="#第3章-HTML-和-CSS简介" class="headerlink" title="第3章 HTML 和 CSS简介"></a>第3章 HTML 和 CSS简介</h2><h3 id="3-1-HTML是什么"><a href="#3-1-HTML是什么" class="headerlink" title="3.1 HTML是什么"></a>3.1 HTML是什么</h3><p>HTML指的是超文本标记语言</p>
<h4 id="3-1-1-HTML定义了网页的结构"><a href="#3-1-1-HTML定义了网页的结构" class="headerlink" title="3.1.1 HTML定义了网页的结构"></a>3.1.1 HTML定义了网页的结构</h4><p>是一种描述文档结构而非实际呈现效果的语言。</p>
<h4 id="3-1-2-HTML未定义网页的布局"><a href="#3-1-2-HTML未定义网页的布局" class="headerlink" title="3.1.2 HTML未定义网页的布局"></a>3.1.2 HTML未定义网页的布局</h4><p>HTML规范对页面的外观都未置一言。HTML标签只是指出元素是标题或列表，没有说明该如何设置标题或列表的格式。</p>
<p><strong>注意：</strong>级联样式表(CSS)能够将复杂的格式设置应用于HTML标签。</p>
<p><strong>应用于标签的视觉样式的发展历程</strong>：</p>
<p>链接应该带有下划线并显示为蓝色，访问过的链接为紫色，要突出的文本为斜体……</p>
<h4 id="3-1-3-HTML为何以这样的方式工作"><a href="#3-1-3-HTML为何以这样的方式工作" class="headerlink" title="3.1.3 HTML为何以这样的方式工作"></a>3.1.3 HTML为何以这样的方式工作</h4><p>设计原则： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfdmjruij4j31ac0927ip.jpg" alt="image-20200602081006343"></p>
<h4 id="3-1-4-标记的工作原理"><a href="#3-1-4-标记的工作原理" class="headerlink" title="3.1.4 标记的工作原理"></a>3.1.4 标记的工作原理</h4><p>HTML是一种标记语言。</p>
<p>HTML包含一组可供使用的预处理标签，不能编造标签来创建新样式或功能。</p>
<p>不同的浏览器支持不同的标签。</p>
<h3 id="3-2-HTML文件怎么样"><a href="#3-2-HTML文件怎么样" class="headerlink" title="3.2 HTML文件怎么样"></a>3.2 HTML文件怎么样</h3><p>HTM文件包含的以下内容： </p>
<ul>
<li>页面本身的内容</li>
<li>HTML标签</li>
</ul>
<p><strong>HTML中在结束标签中出现的是”/“而不是反斜杠</strong></p>
<p>有些标签只有起始标签或者结束标签；</p>
<p>有些标签是荣国旗，在&lt;&gt;内包含额外的信息和文本；</p>
<p>有些标签内部有额外的文本，提供了有关签名的额外信息。这些文本被称为属性，通常以name=value的形式定义的，位于标签名后面，并用一个空格与标签名分隔开。</p>
<p><strong>HTML标签不区分大小写。</strong></p>
<h4 id="3-2-1-文本格式设置和HTML"><a href="#3-2-1-文本格式设置和HTML" class="headerlink" title="3.2.1 文本格式设置和HTML"></a>3.2.1 文本格式设置和HTML</h4><p>分析HTML页面时，浏览器会忽略您为设置格式而添加的所有空白字符，包括多余的空格、制表符、换行符等</p>
<p>在HTML中设置格式的唯一途径就是使用HTML标签。(此规则有两个例外，它们是标签<pre>和CSS属性pre)</p>
<h3 id="3-3-HTML-属性"><a href="#3-3-HTML-属性" class="headerlink" title="3.3 HTML 属性"></a>3.3 HTML 属性</h3><p>可使用属性来修改HTML元素。属性是在元素的起始标签中指定的。</p>
<p>很多元素有其特有的属性，<strong>也有适用于所有元素的全局元素。例如： ID属性指定一个标识符，用于唯一地标识页面元素。</strong></p>
<p><strong>这些标识符主要供JavaScript和级联样式表使用。</strong></p>
<p>class是一个全局属性，可用于建立元素编组。可给多个元素指定相同的class属性，以便在CSS或JavaScript中将这些元素作为一个编组来饮用它们。</p>
<p>第三个全局属性是style</p>
<h3 id="3-4-使用属性style"><a href="#3-4-使用属性style" class="headerlink" title="3.4 使用属性style"></a>3.4 使用属性style</h3><p>级联样式表告诉浏览器如何渲染HTML元素。</p>
<p>CSS的优点在于，可以各种方式使用它。</p>
<h4 id="3-4-1-在标签中指定样式"><a href="#3-4-1-在标签中指定样式" class="headerlink" title="3.4.1 在标签中指定样式"></a>3.4.1 在标签中指定样式</h4><h3 id="3-5-HTML标准简史"><a href="#3-5-HTML标准简史" class="headerlink" title="3.5 HTML标准简史"></a>3.5 HTML标准简史</h3><h4 id="3-5-1-XHTML"><a href="#3-5-1-XHTML" class="headerlink" title="3.5.1 XHTML"></a>3.5.1 XHTML</h4><p>XHTML文档必须是有效的XML。<strong>下面是规则：</strong></p>
<ul>
<li>所有标签小写</li>
<li>没有结束标签的标签，必须在其标签后面加上反斜杠，例如<br> -> <br/></li>
<li>所有属性都必须有值。如果某些属性没有与之相关联的值，XHTML要求将其值设置为属性名，即采用格式attribute = "attribute"</li>
</ul>
<h3 id="3-6-不断发展的最新标准HTML5"><a href="#3-6-不断发展的最新标准HTML5" class="headerlink" title="3.6 不断发展的最新标准HTML5"></a>3.6 不断发展的最新标准HTML5</h3><p>访问<a href="http://caniuse.com/" target="_blank" rel="noopener">http://caniuse.com/</a> ，查看HTML5的各项功能、支持该功能的浏览器版本以及其浏览器支持该功能的用户所占的百分比。</p>
<h3 id="3-8-问与答"><a href="#3-8-问与答" class="headerlink" title="3.8  问与答"></a>3.8  问与答</h3><h4 id="3-8-1-可以使用HTML设置文本格式吗？"><a href="#3-8-1-可以使用HTML设置文本格式吗？" class="headerlink" title="3.8.1 可以使用HTML设置文本格式吗？"></a>3.8.1 可以使用HTML设置文本格式吗？</h4><p>可以对字符串设置一些格式。大多数设置文本格式的标签都已被CSS取代，但浏览器依然支持较旧的文本格式设置元素。</p>
<h2 id="第4章-HTML基础知识"><a href="#第4章-HTML基础知识" class="headerlink" title="第4章 HTML基础知识"></a>第4章 HTML基础知识</h2><h4 id="4-1-定义页面的总体结构"><a href="#4-1-定义页面的总体结构" class="headerlink" title="4.1 定义页面的总体结构"></a>4.1 定义页面的总体结构</h4><p>HTML定义了三个用于定义页面总体结构以及提供简单标题信息的标签——<html>,<head>,<body></p>
<p><strong>DOCTYPE标识符</strong>：</p>
<p>它不是网页结构的标签，但是XHTML和HTML5都要求网页必须包含它。</p>
<h4 id="4-1-1-标签"><a href="#4-1-1-标签" class="headerlink" title="4.1.1 标签"></a>4.1.1 标签<html></h4><p>网页的所有文本和HTML元素都必须放在起始和结束<html>标签之间。</p>
<p>如果省略它，浏览器将会替你添加。</p>
<h4 id="4-1-2-标签"><a href="#4-1-2-标签" class="headerlink" title="4.1.2 标签"></a>4.1.2 标签<head></h4><p>是一个容器，包含所有提供有关网页的信息的标签，但不包含将显示在网页中的信息。</p>
<h4 id="4-1-3-标签"><a href="#4-1-3-标签" class="headerlink" title="4.1.3 标签"></a>4.1.3 标签<body></h4><p>结束HTML标签时，务必确保结束的时最近的未结束标签。</p>
<h3 id="4-2-名称"><a href="#4-2-名称" class="headerlink" title="4.2 名称"></a>4.2 名称</h3><p>每个HTML页面都需要一个名称，它指出页面描述的是什么。用户浏览网页时，这个名称出现在浏览器的标题栏中。这个名称被浏览器用来创建书签；还被搜索引擎用来建立页面索引。</p>
<p><strong>使用<title>标签指定名称</strong></p>
<p><strong>将<title>标签放在<head>中</strong></p>
<p><strong><title>不能包含其他标签</strong></p>
<h3 id="4-3-标题"><a href="#4-3-标题" class="headerlink" title="4.3 标题"></a>4.3 标题</h3><p>HTML定义了6级标题</p>
<p>在HTML文档中，缩进可以更好地展示层次结构。但是在展示的页面中，不会缩进。浏览器对缩进置若罔闻。</p>
<p>*<em>警告： *</em>不要为了将文本显示为粗体或突出网页的某些部分而使用标题，这样做虽然会获得想要的效果，但标记表示的将不再是网页的结构。这样会影响搜索引擎、便利性和有些浏览器。</p>
<p><strong>提示：</strong>从视觉效果来看，4-6级标题不是很有用，但是从文档结构的角度看，很有意义。另外，使用4-6级标题可以使用样式来获得想要的效果。</p>
<h3 id="4-4-段落"><a href="#4-4-段落" class="headerlink" title="4.4 段落"></a>4.4 段落</h3></p>虽然并非 必不可少，但是对CSS确定段落的内容至关重要。

<h3 id="4-5-注释"><a href="#4-5-注释" class="headerlink" title="4.5 注释"></a>4.5 注释</h3><p>分析HTML文件时，会忽略注释中的文本。但是，在浏览器中，用户可以使用“查看源代码”功能来查看注释，因此，对于不希望用户看到的东西，请不要将其放在注释中。</p>
<p>格式： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is comment --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-7-问与答"><a href="#4-7-问与答" class="headerlink" title="4.7 问与答"></a>4.7 问与答</h3><h4 id="4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？"><a href="#4-7-1-有些网页没有使用结构页面标签-、、-。那真的是必须包含它们吗？" class="headerlink" title="4.7.1 有些网页没有使用结构页面标签(、、)。那真的是必须包含它们吗？"></a>4.7.1 有些网页没有使用结构页面标签(<html>、<head>、<body>)。那真的是必须包含它们吗？</h4><p>除了<title>以外可以不包括，但是最好养成使用结构标签的习惯。</p>
<h4 id="4-7-2-标签是用于添加网页内容的通用标签吗？"><a href="#4-7-2-标签是用于添加网页内容的通用标签吗？" class="headerlink" title="4.7.2 标签是用于添加网页内容的通用标签吗？"></a>4.7.2 标签<p>是用于添加网页内容的通用标签吗？</h4><p>不是，标签<div>才是用于添加网页内容的通用标签。标签<p>专用于在网页中添加文本段落。包括<div>在内的很多标签都不能放在标签<p>里面。</p>
<h4 id="4-7-3-注释可以包含HTML标签"><a href="#4-7-3-注释可以包含HTML标签" class="headerlink" title="4.7.3 注释可以包含HTML标签"></a>4.7.3 注释可以包含HTML标签</h4><p>可以在注释中包含HTML标签，但是浏览器不会显示它们。使用注释来隐藏页面的某部分是一种常见的做法，通常这种做法叫做“注释掉”。</p>
<h2 id="第5章-使用列表组织信息"><a href="#第5章-使用列表组织信息" class="headerlink" title="第5章 使用列表组织信息"></a>第5章 使用列表组织信息</h2><p><strong>知识导航：</strong></p>
<ul>
<li>如何创建编号列表</li>
<li>如何创建项目列表</li>
<li>如何创建定义列表(definition list)</li>
<li>与列表相关的级联样式表(CSS)属性</li>
</ul>
<h3 id="5-1-列表概述"><a href="#5-1-列表概述" class="headerlink" title="5.1 列表概述"></a>5.1 列表概述</h3><p>列表分为： </p>
<ul>
<li>有序列表</li>
<li>无序列表</li>
<li>定义列表</li>
</ul>
<p>所有的列表标签都有如下特征 ：</p>
<ul>
<li>列表有指定类型的外部元素。<ul></ul>表示无序列表,<ol></ol>表示有序列表,<dl></dl>表示定义列表。</li>
<li>每个列表项都有自己的标签：在词汇列表中为<dt>和<dd>.在其他列表中为<li></li>
</ul>
<h3 id="5-2-带编号的列表"><a href="#5-2-带编号的列表" class="headerlink" title="5.2 带编号的列表"></a>5.2 带编号的列表</h3><p>带编号的列表是<ol></ol>定义的，而其中的列表行是使用标签<li>和</li>定义的。</p>
<p>显示有序列表时，列览器会缩进列表并编号。</p>
<p><strong>仅当列表项的顺序很重要时，才应使用带编号的列表。</strong></p>
<h4 id="5-2-1-定制有序列表"><a href="#5-2-1-定制有序列表" class="headerlink" title="5.2.1 定制有序列表"></a>5.2.1 定制有序列表</h4><p>定制的方法有两种： </p>
<ul>
<li><p>修改列表的编号样式(1.使用CSS属性list-style-type;2.使用属性[attribute]type——在html5中已经被舍弃)</p>
</li>
<li><p>修改编号本身。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfeu2l0967j31by0gugx1.jpg" alt="image-20200603091556411"></p>
</li>
</ul>
<p>要指定列表使用的起始编号或字母，可使用属性start.不管指定的编号形式是什么，属性start的值必须时十进制数字。</p>
<p>在任何列表项都可以添加一个value值以重新开始从这个列表项开始的序号。</p>
<h3 id="5-3-无序列表"><a href="#5-3-无序列表" class="headerlink" title="5.3 无序列表"></a>5.3 无序列表</h3><p>无序列表通常称为项目符号列表，其中每个列表项都使用相同的项目符号，而不是编号。</p>
<p>对于无序列表，各个浏览器标记每个列表项时默认使用的项目符号相同，但文本浏览器通常使用星号。</p>
<h4 id="5-3-1-定制无序列表"><a href="#5-3-1-定制无序列表" class="headerlink" title="5.3.1 定制无序列表"></a>5.3.1 定制无序列表</h4><p>项目符号样式如下： </p>
<ul>
<li>disc: 圆盘，这是默认样式</li>
<li>square:实心正方形</li>
<li>circle:生成空心圆</li>
</ul>
<p>可以使用一幅画来自定义项目符号样式，例如： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-image: url(/bullet.gif)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用如下方式实现后续行与项目符号或列表符号对齐： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-position: inside"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时修改多个与列表相关的属性，可以像下面这样，同时指定三个值： 列表样式类型、列表样式位置和用作项目符号图像的url： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style: circle inside url("</span>")"&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-定义列表"><a href="#5-4-定义列表" class="headerlink" title="5.4 定义列表"></a>5.4 定义列表</h3><p>定义列表包含两部分： </p>
<ul>
<li>术语</li>
<li>术语的定义</li>
</ul>
<p>定义列表的每部分都有其标签： 术语标签为<dt></dt>,定义标签<dd><dd>。它们往往成对存在。</p>
<p>整个定义列表是使用标签<dl></dl>定义的。</p>
<p>在浏览器中显示定义列表时，通常术语和定义是分开的并缩进定义。</p>
<h3 id="5-5-嵌套列表"><a href="#5-5-嵌套列表" class="headerlink" title="5.5 嵌套列表"></a>5.5 嵌套列表</h3><p>在一个列表中放置另一个列表。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffis1mo3gj31ey0esaos.jpg" alt="image-20200603233039568"></p>
<h3 id="5-6-列表的其他用途"><a href="#5-6-列表的其他用途" class="headerlink" title="5.6 列表的其他用途"></a>5.6 列表的其他用途</h3><p>列表远不是简单的项目符号列表。很多常见的Web设计元素的结构都类似于列表。</p>
<h3 id="5-8-作业"><a href="#5-8-作业" class="headerlink" title="5.8  作业"></a>5.8  作业</h3><h4 id="5-8-1-可修改列表项的缩进程度或让它们不缩进吗？"><a href="#5-8-1-可修改列表项的缩进程度或让它们不缩进吗？" class="headerlink" title="5.8.1 可修改列表项的缩进程度或让它们不缩进吗？"></a>5.8.1 可修改列表项的缩进程度或让它们不缩进吗？</h4><p>用于控制列表缩进程度的属性是 ：margin-left和padding-left，有些浏览器使用前者，有些浏览器使用后者。</p>
<p>为了让文本按照特定的方式对齐，可以将边距(margin)设置为负值。</p>
<h2 id="第6章-使用链接"><a href="#第6章-使用链接" class="headerlink" title="第6章 使用链接"></a>第6章 使用链接</h2><h3 id="6-1-创建链接"><a href="#6-1-创建链接" class="headerlink" title="6.1 创建链接"></a>6.1 创建链接</h3><p>使用URL创建链接，需要： </p>
<ul>
<li>要链接到的文件名(或者URL)</li>
<li>用作可单击链接的文本</li>
</ul>
<p>在链接标签中，只有文本是在网页上可见的；单击链接时，浏览器将加载相关联的URL。</p>
<h4 id="6-1-1-链接标签"><a href="#6-1-1-链接标签" class="headerlink" title="6.1.1 链接标签"></a>6.1.1 链接标签<a></h4><p><a></a>也被称为锚标签，因为它也可用于创建锚。链接标签最常用的用途是，用于创建到其他网页的链接。</p>
<p>标签<a>必须包含一些属性。</p>
<p>在链接标签中，最常见的属性是herf，它表示超文本引用，可以使用它来指定链接指向的文件名或URL。</p>
<p>*<em>注意： *</em>在HTML5中，没有任何属性的<a>也是合法的，这种链接称为占位符链接，可将其与CSS和脚本结合起来使用。</p>
<p>关于具体如何使用链接： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffz85iunhj31di0g6grd.jpg" alt="image-20200604085951473"></p>
<p>在链接中，文件名是区分大小写的，但是url不区分。</p>
<p>有关标签嵌套的提醒： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzmcfesnj31au0bob0c.jpg" alt="image-20200604091329375"></p>
<h3 id="6-2-使用相对和绝对路径链接到本地页面"><a href="#6-2-使用相对和绝对路径链接到本地页面" class="headerlink" title="6.2 使用相对和绝对路径链接到本地页面"></a>6.2 使用相对和绝对路径链接到本地页面</h3><p>*<em>注意： *</em>文件夹和目录说的是一码事，具体使用哪个取决于的是操作系统。</p>
<p>要在链接中指定相对路径名，必须使用UNIX式路径，而不管使用的是什么操作系统。即，</p>
<p>使用斜杠(/)来分隔目录名，并使用两点(..)来表示当前目录的父目录。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzrke0vmj31bk0ic7ip.jpg" alt="image-20200604091831046"></p>
<h4 id="6-2-1-绝对路径名"><a href="#6-2-1-绝对路径名" class="headerlink" title="6.2.1 绝对路径名"></a>6.2.1 绝对路径名</h4><p>相对路径名通过指定相对于当前页面的位置来指定要链接到的页面，而绝对路径名，从顶级目录出发，要经过哪些目录才能到达这个文件。</p>
<p>绝对路径总是以斜杠打头，以便与当前目录区分开来。斜杠后面从顶级目录出发，前往链接到的文件需要经过的所有目录。</p>
<p>*<em>注意： *</em></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzv91xspj31ey0o0qnz.jpg" alt="image-20200604092202966"></p>
<h4 id="6-2-2-该使用相对路径还是使用绝对路径"><a href="#6-2-2-该使用相对路径还是使用绝对路径" class="headerlink" title="6.2.2 该使用相对路径还是使用绝对路径"></a>6.2.2 该使用相对路径还是使用绝对路径</h4><p>合理混合使用这两种链接是最佳的选择。经验规则是： </p>
<p>如果链接的页面属于同一个集合，就使用相对路径，否则，使用绝对路径。</p>
<h3 id="6-3-链接到Web上的其他文档"><a href="#6-3-链接到Web上的其他文档" class="headerlink" title="6.3 链接到Web上的其他文档"></a>6.3 链接到Web上的其他文档</h3><p>要链接到Internet上的其他页面(远程页面)，也可以使用链接标签。</p>
<p>使用<em></em>可以将字体设置为斜体。</p>
<h3 id="6-4-链接到文档的特定位置"><a href="#6-4-链接到文档的特定位置" class="headerlink" title="6.4 链接到文档的特定位置"></a>6.4 链接到文档的特定位置</h3><p>要链接到另一个页面的特定位置，只需在链接的URL中指定要链接的元素的ID。</p>
<p>也可以使用链接跳到网页中的特定元素。</p>
<p>ID属性可用于页面的任何元素，唯一的要求是，每个ID在当前页面中是独一无二的。</p>
<p>Id还可用于设置页面的样式。</p>
<h4 id="6-4-1-创建链接和锚"><a href="#6-4-1-创建链接和锚" class="headerlink" title="6.4.1 创建链接和锚"></a>6.4.1 创建链接和锚</h4><p>创建一个锚的例子： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"part4"</span>&gt;</span>Part Four: Grapefruit from Heaven <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在链接中指向一个锚： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mybgdoc.html#part"</span>&gt;</span>Go to part 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中#后面是id</p>
<h4 id="6-4-2-标签的name属性"><a href="#6-4-2-标签的name属性" class="headerlink" title="6..4.2 标签的name属性"></a>6..4.2 标签<a>的name属性</h4><p>使用标签<a>创建锚时，不是使用属性herf来链接到特定的页面，而使用属性name来指出这是一个可链接的锚。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span>&gt;</span> name="part4"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>Part Four : Grapefruit from Heaven </span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建议不要不用属性name来创建锚链接，而是使用ID。ID属性适用于任何HTML元素，但是name只支持<a>标签。</p>
]]></content>
  </entry>
  <entry>
    <title>HTML/HTML</title>
    <url>/2020/06/01/HTML/HTML/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>全称： 超文本标记语言(HyperText Markup Language)</p>
<p>##HTML文件的后缀： </p>
<ul>
<li>.html</li>
<li>htm</li>
</ul>
<p>以上两种没有任何区别</p>
]]></content>
  </entry>
  <entry>
    <title>Java/二进制IO</title>
    <url>/2020/05/31/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6IO/</url>
    <content><![CDATA[<h1 id="二进制I-O"><a href="#二进制I-O" class="headerlink" title="二进制I/O"></a>二进制I/O</h1><h2 id="17-1-引言"><a href="#17-1-引言" class="headerlink" title="17.1 引言"></a>17.1 引言</h2><p><strong>文件分类：</strong> </p>
<p>可以使用文本编辑器进行处理(读取、创建或者修改)的文件被称为文本文件。所有</p>
<p>所有其他的文件都被称为二进制文件。</p>
<p>不能使用文本编辑器来读取二进制文件——它们是为让程序来读取而设计的。就像，Java源程序存储在文本文件中，可以使用文本编辑器读取，而Java类是二进制文件，由Java虚拟机读取。</p>
<p>可以简单的认为： 文本文件是由字符序列构成的，而二进制是由位bit序列构成的。</p>
<p>二进制文件的优势在于它的处理效率比文本文件高。</p>
<h2 id="17-2-在Java中如何处理文本I-O"><a href="#17-2-在Java中如何处理文本I-O" class="headerlink" title="17.2 在Java中如何处理文本I/O"></a>17.2 在Java中如何处理文本I/O</h2><p>要点提示： 使用Scanner类读取文本数据，使用PrintWriter类写文本数据。</p>
<p>File类： 封装了文件或路径属性，但是不包含从/向文件读/写数据的方法。</p>
<p>I/O类： 包含从/向文件读/写数据的方法。</p>
<p>输出对象： 输出流</p>
<p>输入对象： 输入流</p>
<h2 id="17-3-文本I-O与二进制I-O"><a href="#17-3-文本I-O与二进制I-O" class="headerlink" title="17.3 文本I/O与二进制I/O"></a>17.3 文本I/O与二进制I/O</h2><p><strong>要点提示 ：</strong>二进制I/O不涉及编码和解码，所以更高效</p>
<p>计算机并不区分二进制文件和文本文件。所有的文件都是以二进制形式来存储的，从本质上来说，所有的文件都是二进制的。</p>
<p>文本I/O能提供一层抽象，用于字符串层次的编码和解码。对于文本I/O，编码和解码是自动进行的。</p>
<p>对于文本编辑器或文本输出程序创建的文件，应该使用文本输入来读取，对于Java二进制输出程序创建的文件，应该使用二进制输入来读取。</p>
<p>二进制I/O不需要编码和解码，所以它的效率更高。同时，由于二进制文件与主机的编码方案无关，因此，它是可移植的。这也是Java的类文件存储为二进制文件的原因。</p>
<h2 id="17-4-二进制I-O类"><a href="#17-4-二进制I-O类" class="headerlink" title="17.4 二进制I/O类"></a>17.4 二进制I/O类</h2><p>*<em>要点提示： *</em>抽象类InputStream是读取二进制数据的根类，抽象类是OutputStream是写入二进制数据的根类。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5k8kqkj31dy0k6k5z.jpg" alt="image-20200531193633640"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbv5x8lkdj31cy0ny1kx.jpg" alt="image-20200531193655448"></p>
<p>注意： 二进制I/O类中所有方法都声明为抛出java.io.IOException或java.io.IOException的子类</p>
<p>![image-20200531193942861](/Users/bowenkei/Library/Application Support/typora-user-images/image-20200531193942861.png)</p>
<h3 id="17-4-1-FileInputStream和FileOutputStream"><a href="#17-4-1-FileInputStream和FileOutputStream" class="headerlink" title="17.4.1 FileInputStream和FileOutputStream"></a>17.4.1 FileInputStream和FileOutputStream</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbvanos7bj318s0do4a6.jpg" alt="image-20200531194126051"></p>
<p>如果为一个不存在的文件创建一个FileInputStream对象，将会发生java.io.FileNotFountException异常</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfbveid9yij31ce0e819x.jpg" alt="image-20200531194506941"></p>
<p>使用FileOutputStream构造方法创建对象时，如果这个文件不存在，就会创建一个新的文件</p>
<p>当文件已存在的时候，使用以下两个方法将会删除点文件中已经存在的内容： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream(file: File)</span><br><span class="line">  FileOutputStream(filename: String)</span><br></pre></td></tr></table></figure>

<p>为了既保留文件现有内容又可以给文件追加新数据，可以在创建一个FileOutputStream对象时，添加append参数，并将其值设置为true。</p>
<p>几乎所有的I/O类都会抛出java.io.IOException。所以，必须在方法中声明会抛出java.io.IOException异常，或者将代码放到try-catch块中。</p>
<p><strong>程序清单17-1使用二进制I/O将从1到10的10个字节值写入一个名为temp.dat的文件，再把他们从文件中读出来。</strong></p>
<p>使用try-with-resource来声明和创建输入输出流，从而在使用后可以自动关闭。</p>
<p>java.io.InputStream和java.io.OutputStream实现了AutoClosable接口。</p>
<p>AutoClosable接口定义了close()方法，用来个关闭资源。任何AutoClosable类型的对象可以用于try-with-resources语法中，实现自动关闭。</p>
<p>二进制文件可以从程序中读取它，但是不能用文本编辑器阅读它。</p>
<p><strong>提示：</strong>当流不再使用时，记得使用close()方法将其关闭，或者使用try-with-resource语句自动关闭。不关闭流可能会在输出文件中造成数据受损，或导致其他的程序设计错误。</p>
<p>*<em>注意： *</em>FileInputStream类的实例可以作为参数去构造一个Scanner=对象， FileOutputStream类的实例可以作为参数构造一个Printerwriter对象。可以创建一个PrintWriter对象来向文件中追加文本。如果xx.txt不存在，就会创建这个文件。如果xx.txt文件已经存在，就将新数据追加到该文件中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Printer(<span class="keyword">new</span> FileOutputStream(<span class="string">"xx.txt"</span>, <span class="keyword">true</span>));</span><br></pre></td></tr></table></figure>

<h3 id="FileterInputStream-和-FilterOutputStream"><a href="#FileterInputStream-和-FilterOutputStream" class="headerlink" title="FileterInputStream 和 FilterOutputStream"></a>FileterInputStream 和 FilterOutputStream</h3><p>过滤器数据流(file stream)是为某种目的过滤字节的数据流。读取整数值、双精度值和字符串，那就需要一个过滤类来包装字节输入流。使用过滤器类就可以读取整数值、双精度值和字符串，而不是字节或字符。</p>
<p>FileterInputStream 和 FilterOutputStream是过滤数据的基类。需要处理基本数值类型时，就是用DataInputStream和DataOutputStream类来过滤字节。</p>
<p>###DataInputStream和DataOutputStream </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fe1k2fj31b80l27r0.jpg" alt="image-20200601195913906"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1fnrp7jj31cw0monow.jpg" alt="image-20200601195934714"></p>
<p>基本类型的值不需要做任何转化就可以从内存复制到输出数据流。字符串的字符可以写成多种形式 ：</p>
<ol>
<li>二进制I/O中的字符与字符串</li>
</ol>
<p>一个统一码由两个字节构成。writerChar(char c )方法将字符c的统一码写入输出流。writerChars(String s )方法将字符串s中的所有字符的统一码写到输出流中。writeBytes(String s )方法将字符串s中的每个字符的统一码的低字节写入到输出流。统一码的高字节被抛弃。</p>
<p>writeBytes(String s )方法适用于由ASCII码构成的字符串，ASCII码仅存储统一码的低字节。如果毕业字符串包含非ASCII码的字符，就必须使用writeChars方法实现写入这个字符串。</p>
<p>writeUTF(String s )方法将两个字节的长度信息写入输入流，后面紧跟着的是字符串s中的每个字符的改进版UTF-8的形式。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfd1uojv8pj30u00zcb2a.jpg" alt="image-20200601201352901"></p>
<p>*<em>警告： *</em></p>
<p>应该按存储的顺序和格式读取文件中的数据。</p>
<ol start="3">
<li>检测文件的末尾</li>
</ol>
<p>如果达到InputStream的末尾之后还继续从中读取数据，就会发生EOFException异常。这个异常可以用来检查是否已经到达文件末尾。</p>
<h3 id="BufferedInputStream-和-BufferedOutputStream"><a href="#BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="BufferedInputStream 和 BufferedOutputStream"></a>BufferedInputStream 和 BufferedOutputStream</h3><p>BufferedInputStream 和 BufferedOutputStream没有包含新的方法，它们的方法都是从InputStream 和OutputStream继承而来的。它们在后来管理了一个缓冲区，根据要求自动从磁盘中读取数据和写入数据。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0eogrfpj31bm0i8dvx.jpg" alt="image-20200602160930843"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe0fug543j31c80pukca.jpg" alt="image-20200602161036165"></p>
<p>缓冲区指定大小是512字节。</p>
<p>*<em>提示： *</em>应该总是使用缓冲区I/O来加速输入和输出。</p>
<h2 id="17-5-示例学习：-复制文件"><a href="#17-5-示例学习：-复制文件" class="headerlink" title="17.5 示例学习： 复制文件"></a>17.5 示例学习： 复制文件</h2><h2 id="17-6-对象I-O"><a href="#17-6-对象I-O" class="headerlink" title="17.6 对象I/O"></a>17.6 对象I/O</h2><p><strong>要点提示：</strong>ObjectInputStream 和ObjectOutputStream类可以用于读/写可序列化的对象。</p>
<p>ObjectInputStream 和ObjectOutputStream类除了实现基本数据类型与字符串的输入和输出之外，还可以实现对象的输入和输出。因而，可以使用ObjectInputStream 和ObjectOutputStream类代替DataInputStream和DataOutputStream。</p>
<p>读取时为了得到所需的数据类型，必须使用Java安全的类型转换。例如： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = (Date)(inputStream.readObject());</span><br></pre></td></tr></table></figure>

<p>readObject()方法可能会抛出ClassNotFoundException.注意使用时要抛出它</p>
<h3 id="17-6-1-Serializable-接口"><a href="#17-6-1-Serializable-接口" class="headerlink" title="17.6.1 Serializable 接口"></a>17.6.1 Serializable 接口</h3><p>可以写入到输出流中的对象被称为可序化的。</p>
<p>可序化对象的类必须实现Serializable接口。</p>
<p>Serializable是一个标记接口。它没有方法，不需要在类中为实现Serializable接口增加额外的代码。实现这个接口可以启动Java的序列化机制，自动完成存储对象和数组的过程。</p>
<p>Java提供一个内在机制自动完成写对象的过程。这个过程称为对象序列化(object serialization),它是在ObjectOutputStream中实现的。相反，读取对象的过程称作反对象序列化(object deserialization),它是在ObjectInputStream中实现的。</p>
<p>试图存储一个不支持Serializable接口的对象会引起一个NotSerializableexception异常。</p>
<p>当存储一个可序列化对象时，会对该对象的类进行编码。编码包括类名、类的签名、对象实例变量的值以及该对象引用的任何其他对象的闭团，但是不存储对象静态变量的值。</p>
<p><strong>注意： 非序列化的数据域</strong></p>
<p>如果一个对象是Serializable的实例，但它包含了非序列化的实例数据域，那么就不可以序列化这个对象。为了使该对象是可序列化的，需要给这些数据域加上关键字transient,告诉Java虚拟机将对象写入流时忽略这些数据域。看下面的例子： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfe7lzpgqtj31bi0e4ak6.jpg" alt="image-20200602201849302"></p>
<p><strong>注意： 重复的对象</strong></p>
<p>如果一个对象不止一次写入对象流，不会存储对象的多分副本。第一次写入一个对象时，就会为它创建一个序列号。Java虚拟机将对象的所有内容和序列号一起写入对象流。以后每次存储时，如果再写入相同的对象，就只存储序列号。读出这些对象时，它们的引用相同，因为在内存中实际上存储的只是一个对象。</p>
<h3 id="17-6-2-序列化数组"><a href="#17-6-2-序列化数组" class="headerlink" title="17.6.2 序列化数组"></a>17.6.2 序列化数组</h3><p>如果数组中所有元素都是可序列化的，那这个数组就是可序列化的。一个完整的数组可以使用writeObject方法写入文件，随后使用readObject方法恢复。</p>
<h2 id="17-7-随机访问文件"><a href="#17-7-随机访问文件" class="headerlink" title="17.7 随机访问文件"></a>17.7 随机访问文件</h2><p>*<em>要点提示： *</em>Java提供了RandomAccessFile类，允许从文件的任何位置进行数据的读写。</p>
<p>只读的流或者只写的流被称为顺序(sequential)流。使用顺序流打开的文件被称为顺序访问文件。顺序访问文件的内容不能更新。</p>
<p>使用RandomAccessFile类打开的文件称为随机访问文件。</p>
<p>RandomAccessFile类实现了DateInput和DataOutput接口。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexci82n0j31bc0u07wh.jpg" alt="image-20200603110915507"></p>
<p>创建一个RandomAccessFile时，可以指定两种模式(“r”，“rw”)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.dat"</span>, <span class="string">"rw"</span>);</span><br></pre></td></tr></table></figure>

<p>如果test.dat 已经存在，则创建raf以便访问这个文件，否则就创建一个名为test.dat的新文件，再创建raf以便访问这个文件。raf.length()返回给定时刻文件test.dat中的字节数。向文件中追加数据，raf.length就会增加。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfexlt416tj310r0u0b29.jpg" alt="image-20200603111803022"></p>
<p>在RandomAccessFile中使用setLength(0)方法将文件长度设置为0。这样做的效果是将文件的原有内容删除。</p>
]]></content>
  </entry>
  <entry>
    <title>JavaFx UI组件和多媒体</title>
    <url>/2020/05/22/Java/JavaFx%20UI%E7%BB%84%E4%BB%B6%E5%92%8C%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
    <content><![CDATA[<h1 id="JavaFx-UI组件和多媒体"><a href="#JavaFx-UI组件和多媒体" class="headerlink" title="JavaFx UI组件和多媒体"></a>JavaFx UI组件和多媒体</h1><h2 id="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"><a href="#引言JavaFX提供了许多UI组件，用于开发全面的用户界面" class="headerlink" title="引言JavaFX提供了许多UI组件，用于开发全面的用户界面"></a>引言JavaFX提供了许多UI组件，用于开发全面的用户界面</h2><p>Oracle公司提供了可视化设计和开发GUI的工具。这使得程序员可以用最少的编码快速将图形用户界面(GUI)元素组装在一起，然而，任何工具都不是万能的。有时需要修改这些工具生成的程序。所以，理解JavaFx GUI程序设计的一些基本概念非常有必要。</p>
<p><img src="media/15898826720171.jpg" alt="-w1120"></p>
<p><img src="media/15898827040254.jpg" alt="-w1154"></p>
<h2 id="Labeled和Label"><a href="#Labeled和Label" class="headerlink" title="Labeled和Label"></a>Labeled和Label</h2><p>要点提示 ：JavaFX提供了许多组件，用于开发全面的用户界面</p>
<p>标签(label)是一个显示小段文字、一个节点或同时显示两者的区域。它通常用来给其他组件(通常是文本域)做标签。</p>
<p>标签和按钮共享许多共同的属性。这些属性定义在Labeled类中。<br><img src="media/15898830157493.jpg" alt="-w1144"></p>
<p>Label可以使用下面三种构造方法的其中之一进行构建，如图：<br><img src="media/15898830571137.jpg" alt="-w1080"></p>
<p>Graphic属性可以是任何一个节点，比如一个形状、一个图像或者一个组件。</p>
<p>*<em>注意： *</em><br>使用ContentDisplay()用于设置的不是标签相对于图像节点的位置，而是图像节点相对于标签的位置<br>HBox将所有节点放在水平线上</p>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>button是单击时触发动作时间的组件。JavaFx提供了常规按钮、开关按钮、复选框按钮和单选按钮。这些按钮的共同特性在ButtonBase和Label类中定义。</p>
<p>按钮与标签非常相似，除了按钮具有定义在ButtonBase类中的onAction属性，该属性设置一个用于处理按钮动作的处理器。<br><img src="media/15898859183657.jpg" alt="-w1128"></p>
<p>*<em>注意： *</em><br>BorderPane是这样一个面板： 将节点放置在顶部、右边、底部、左边以及中间区域</p>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>复选框用于提供给用户进行选择。<br>复选框提供了selected属性用于表明一个复选框是否被选中。 </p>
<p><img src="media/15899068142632.jpg" alt="-w1113"></p>
<p>VBox: 节点放在单列里<br>HBox： 节点放在单行里</p>
<h2 id="单选按钮-radio-button"><a href="#单选按钮-radio-button" class="headerlink" title="单选按钮 radio button"></a>单选按钮 radio button</h2><p>又称为选项按钮，用于让用户从一组选项中选择一个单一的条目。</p>
<p>外观上单选按钮类似于复选框<br>复选框是方形的，可以选中或者不选中<br>单选按钮显示一个圆，或是填充的或是空白的。分别对应选中和未选中<br>RadioButton是ToggleButton的子类。单选按钮和开关按钮的不同之处是，单选按钮显示一个圆，而开关按钮渲染成类似按钮<br><img src="media/15899400921265.jpg" alt="-w1142"></p>
<p><img src="media/15899403065993.jpg" alt="-w1132"></p>
<h2 id="文本域-text-filed"><a href="#文本域-text-filed" class="headerlink" title="文本域 text filed"></a>文本域 text filed</h2><p>可以用于输入或者显示一个字符串。<br>TextField是TextInputControl的子类。<br><img src="media/15899411471024.jpg" alt="-w1150"><br><em><em>注意： *</em><br>如果一个文本域用于输入密码，使用PasswordField来替代TextFiled。PasswordField继承自TextField，将输入文本隐藏为回显字符</em>…..</p>
<h2 id="文本区域-TextArea"><a href="#文本区域-TextArea" class="headerlink" title="文本区域 TextArea"></a>文本区域 TextArea</h2><p>要点提示： TextArea允许用户输入多行文本<br>如果需要让用户输入多行文本，可以创建多个TextField的实例。<strong>或者</strong>选择使用TextArea，它允许用户输入多行文本<br><img src="media/15899420441135.jpg" alt="-w1120"></p>
<p>TextArea提供滚动支持，但是通常而言，创建一个ScrollPane对象来包含一个TextArea的实例，并且让ScrolPane处理TextArea的滚动会更加方便。<br><em>提示</em>： 可以将任何节点放置在ScrollPane中。如果空间太大以至于不能在显示区域内完整显示，ScrollPane提供了垂直和水平方向的自动滚动支持</p>
<h2 id="组合框-combo-box"><a href="#组合框-combo-box" class="headerlink" title="组合框 combo box"></a>组合框 combo box</h2><p>要点提示 ：组合框也称为选择列表(choice list)或下拉式列表(drop-down),他包含一个条目列表，用户能够从中进行选择。</p>
<p>组合框可以限制用户的选择范围，并避免对输入数据有效性进行繁琐的检查。以下为ComBox类中的一些常用的属性和构造方法。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gezavug3g1j31m50u0wlt.jpg" alt="image-20200520224822234"></p>
<p>ComboBox定义为一个泛型类。泛型T为保存在一个组合框中的元素指定元素类型。</p>
<p>ComBox继承自ComBoxBase。ComBox可以触发一个ActionEvent事件。当一个条目被选中后，一个ActionEvent事件被触发。</p>
<p><strong>ObservableList是Java.util.List的子接口,因此你可以将定义在List中的所用方法应用于ObservableList。</strong></p>
<p><strong>JavaFX提供了一个静态方法FXCollections.observableArrayList(arrayOfElements)来从一个元素数组中创建一个ObservableList。</strong></p>
<h2 id="列表视图-ListView"><a href="#列表视图-ListView" class="headerlink" title="列表视图 ListView"></a>列表视图 ListView</h2><p>ListView是一个泛型类。泛型T为存储在一个列表视图中的元素指定了元素类型。</p>
<p>如下是： ListView的详细： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf07xiv2vrj31rq0og7wh.jpg" alt="image-20200521175156890"></p>
<p>getSelectionModel()方法返回一个SelectionModel实例，该实例包含了设置选择模式以及获得被选中的索引值和条目的方法。</p>
<p>选择模式由以下连个常量之一定义，分别是SelectionMode.MULTIPLE和SelectionMode.SINGLE。它们表明可以选择单个还是多个条目。默认为SINGLE.</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf085neu1bj31qm0toquu.jpg" alt="image-20200521175948759"></p>
<p><strong>注意⚠️</strong>：</p>
<p>程序代码运行之后，在列表视图中具体实现多选需要结合特定的按键。例如在mac os上，按住command的同时，用鼠标多选项目即可。</p>
<h2 id="滚动条-ScrollBar"><a href="#滚动条-ScrollBar" class="headerlink" title="滚动条 ScrollBar"></a>滚动条 ScrollBar</h2><p>要点提示： ScrollBar是一个允许用户从一个范围的值中进行选择的组件</p>
<p>用户可以通过鼠标操作改变滚动条的值。</p>
<p>ScrollBar的属性如下： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0fjj5m5dj31qz0u0hdt.jpg" alt="image-20200521221513304"></p>
<p><strong>注意：</strong> 滚动条的轨道宽度对应于max + visibleAmount。当一个滚动条设置为它的最大值时，块的左侧位于max，右侧位于max + visibleAmount。</p>
<p><strong>实际操作中的经验：</strong> 想要实现拖动滑动条移动Text的位置，必须将文本放在一个面板中，然后面板置于边框面板的中央。如果文本直接放在边框面板的中央，不能通过重设它的x和y属性改变文本的位置。</p>
<h2 id="滑动条-Slider"><a href="#滑动条-Slider" class="headerlink" title="滑动条 Slider"></a>滑动条 Slider</h2><p>要点提示 ：Slider与ScrollBar类似，但是Slider有更多属性，并且可以以多种形式显示。Slider允许用户通过在一个有界的区间中滑动滑块，从而以图形方式选择一个值。滑动条可以显示区间中的主刻度以及次刻度。刻度之间的像素值是由majorTickUnit和minorTickUnit属性指定的，分别表示主像素和次要像素。</p>
<p>滑块可以水平显示也可以垂直显示，可以带刻度可以不带刻度。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf0ysa4it8j31qi0t8hdt.jpg" alt="image-20200522092106948"></p>
<p><strong>注意</strong>：垂直滚动条的值从上向下是增加的，但是垂直滑动条的值从上到下是减少的。</p>
<h2 id="示例学习：-开发一个井字游戏"><a href="#示例学习：-开发一个井字游戏" class="headerlink" title="示例学习： 开发一个井字游戏"></a>示例学习： 开发一个井字游戏</h2><p>*<em>注意： *</em>在开发和测试一个Java项目时，可以采用渐进的方法。</p>
<h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><p>*<em>要点提示： *</em>使用Media来获得媒体源，使用MediaPlayer类来播放和控制媒体，使用MediaView来显示视频。</p>
<p>媒体(视频和音频)对于开发富因特网应用是必要的。</p>
<p>JavaFX支持MP3、AIFF、WAV以及MPEG-4音频格式以及FLV和MPEG-4视频格式。</p>
<p>Media类代表了一个媒体源，具有duration、width以及height属性。</p>
<p>可以从一个Internet URL字符串中创建以一个Media对象。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71dgaeehj31se0lk1kx.jpg" alt="image-20200527152400018"></p>
<p>MediaPlayer类播放媒体，并通过一些属性来控制媒体播放，比如autoPlay、currentCount、cycleCount、mute、volume和totalDuration。可以从一个媒体对象来构建一个MediaPlayer对象，并使用pause()、play()方法来暂停和继续播放。</p>
<p>MediaView类是Node的子类，提供MediaPlayer播放的Media视图。MediaView类提供了一些属性用于观看媒体。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf71h25jqkj31mh0u0hdt.jpg" alt="image-20200527152730968"></p>
<p>Media,MediaPlayer,MediaView的关系如下：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf72el0r5cj31py08ygth.jpg" alt="image-20200527155944537"></p>
<p>一个Media对象支持实时流媒体。一个Media对象可以被多个播放器共享，并且不同的视图可以使用同一个MediaPlayer对象。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java/事件驱动编程和动画</title>
    <url>/2020/05/22/Java/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E5%92%8C%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="Java-事件驱动编程和动画"><a href="#Java-事件驱动编程和动画" class="headerlink" title="Java 事件驱动编程和动画"></a>Java 事件驱动编程和动画</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>要点提示： 可以编写代码以处理诸如单击按钮、鼠标移动以及按键盘之类的时间。</p>
<p>为了响应一个按钮单击事件，你需要编写代码来处理按钮单击动作。按钮是一个事件源对象，即动作起源的地方。需要创建一个能对一个按钮动作事件进行处理的对象，即事件处理器。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf10yxo1j2j31h00ccn5y.jpg" alt="image-20200522103644432"></p>
<p>不是多有对象都可以成为一个动作事件的处理器。要成为一个动作事件的处理器，必须满足两个要求： </p>
<ol>
<li>该对象必须是EventHandler<T extends Event>接口的一个示例。接口定义了所有处理器的共同行为。T extends Event是一个Event子类型的泛型。</li>
<li>EventHandler对象handler必须使用方法source.setOnAction(handler)和事件源对象注册</li>
<li>EventHandler <ActionEvent> 接口包含了 handle ( ActionEvent ) 方法用于处理动作事件。你的处理器类必须覆盖这个方法来响应事件 。 15 ActionEvent 事件的代码 。</li>
</ol>
<h2 id="事件和事件源"><a href="#事件和事件源" class="headerlink" title="事件和事件源"></a>事件和事件源</h2><p>要点提示： 事件是从一个事件源上产生的对象。触发一个事件意味着产生一个事件并委托处理器处理该事件。</p>
<p>事件驱动编程： 当运行一个Java GUI程序的时候，程序和用户进行交互，并且事件驱动它的执行。这称为事件驱动编程。 </p>
<p>事件可以被定义为一个告知程序某件事发生的信号。</p>
<p>事件由外部的用户动作，比如鼠标的移动、单击和键盘按键所触发。</p>
<p>事件源对象： 产生一个事件并且出发它的组件称为事件源对象，或称为源对象或者源组件。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11rhaq5ej31go0ictj7.jpg" alt="image-20200522110409887"></p>
<p><strong>注意</strong>：如果一个组件可以触发一个事件，那么这个组件的任何子类都可以触发同样类型的事件。比如，每个JavaFX形状、布局面板和组件都可以触发MouseEvent和KeyEvent事件，因为Node是形状、布局面板和组件的超类。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf11uy6ln2j31i20u0qv5.jpg" alt="image-20200522110728861"></p>
<h2 id="注册处理器和处理事件"><a href="#注册处理器和处理事件" class="headerlink" title="注册处理器和处理事件"></a>注册处理器和处理事件</h2><p><strong>要点提示</strong>： 处理器是一个对象，<strong>它必须通过一个事件源对象进行注册，并且它必须是一个恰当的事件处理接口的实例。</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf124m0abdj31so0is7vo.jpg" alt="image-20200522111645923"></p>
<p><strong>技巧：</strong>设计一个类来建模一个包含了支持方法的面板是一个好的策略，这样相关的方法和面板都耦在一个对象中来。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>要点提示： 内部类，或者称为嵌套类，是一个定义在另外一个类范围中的类。内部类对于定义处理器非常有用。</p>
<p>一个内部类可以如常规类一样使用。通常，在一个类只被它的外部类所使用的时候，才将它定义为内部类。</p>
<p>一个内部类具有下面的特征：</p>
<ul>
<li>一个内部类被被编译为OuterClassName$InnerClassName的类。</li>
<li>一个内部类可以引用定义在它所在的外部类中的数据和方法。所以，没有必要将外部类对象的引用传递给内部类的构造方法。内部类可以使程序更加精简。</li>
<li>一个内部类可以使用可见性修饰符所定义，和应用于一个类中的成员的可见性规则一样</li>
<li>一个内部类可以被定义为static。一个static的内部类可以使用外部类的名字所访问。一个static的内部类不能访问外部类中非静态成员。</li>
<li>内部类对象通常在外部类中所创建。也可以从另外一个类中来创建一个内部类的对象。如果内部类是非静态的，你必须先创建一个外部类的实例，然后使用以下语法来创建一个内部类的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = outerObject.<span class="keyword">new</span> InnerClass();</span><br></pre></td></tr></table></figure>

<ul>
<li>如果内部类是静态的，使用以下语法来创建一个内部类对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = <span class="keyword">new</span> OuterClass.InnerClass();</span><br></pre></td></tr></table></figure>

<p>内部类的用途： </p>
<ul>
<li>将相互依赖的类结合到一个主类中</li>
<li>避免类名的冲突</li>
</ul>
<p>一个处理器类被设计为针对一个GUI组件创建一个处理器对象(比如，一个按钮)。处理器类不会被其他应用所共享，所以将它定义在主类里面作为一个内部类是恰如其分的。</p>
<h2 id="匿名内部类处理器"><a href="#匿名内部类处理器" class="headerlink" title="匿名内部类处理器"></a>匿名内部类处理器</h2><p><strong>要点提示</strong>：一个匿名内部类是一个没有名字的内部类。它将进一步实现定义一个内部类以及创建一个内部类的实例。</p>
<p>下面是一个内部类被匿名内部类替代的示例： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf1a0ynvklj31sm0m81c4.jpg" alt="image-20200522154958242"></p>
<p>匿名内部类的语法如下所示： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> superClassName/InterfaceName()&#123;</span><br><span class="line"><span class="comment">// Implement or override methods in superclass or interface</span></span><br><span class="line"><span class="comment">// Other methods if necessary</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>匿名内部类是一种特殊类型的内部类，它被当作一个内部类对待，同时具有下面的特征： </p>
<ul>
<li>一个匿名内部类必须总是从一个父类继承或者实现一个接口，但是它不能有显式的extends或者implements子句</li>
<li>一个匿名内部类必须实现父类或者接口中的所有抽象方法</li>
<li>一个匿名内部类总是使用它父类的无参构造方法来创建一个实例。如果一个匿名内部类实现一个接口，构造方法是Object().</li>
<li>一个匿名内部类被编译成一个名为OuterClassName$n.class。</li>
</ul>
<p>例如如果外部类Test有两个匿名的内部类，它们将被编译成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 使用lambda表达式简化事件处理</span><br><span class="line"></span><br><span class="line">要点提示： lambda表达式可以用于极大简化事件处理器的代码编写.</span><br><span class="line"></span><br><span class="line">lambda表达式可以被看作使用精简语法的匿名内部类。</span><br><span class="line"></span><br><span class="line">如图是将匿名内部类用lambda表达式代替的一个例子：</span><br><span class="line"></span><br><span class="line">![image-20200524001209498](https://tva1.sinaimg.cn/large/007S8ZIlly1gf2u5ud8zgj31qq0kmdrp.jpg)</span><br><span class="line"></span><br><span class="line">一个lambda表达式的基础语法是： </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">(type1 parm1, type2 parm2, ...) -&gt; expression</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(type1 parm1, type2 parm2, ...) -&gt; &#123;statements;&#125;</span><br></pre></td></tr></table></figure>

<p>一个参数的数据类型既可以显式声明，也可以由编译器隐式推断。如果只有一个参数，并且没有显示的数据类型，圆括号可以被省略。</p>
<p>因而上面(截图)的例子可以表示为： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">e -&gt; &#123;</span><br><span class="line">  <span class="comment">// Code for processing event e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3fxuqocej31v00l04qp.jpg" alt="image-20200524124547574"></p>
<h2 id="示例学习：-贷款计算器"><a href="#示例学习：-贷款计算器" class="headerlink" title="示例学习： 贷款计算器"></a>示例学习： 贷款计算器</h2><h2 id="示例学习-鼠标事件"><a href="#示例学习-鼠标事件" class="headerlink" title="示例学习: 鼠标事件"></a>示例学习: 鼠标事件</h2><p><strong>要点提示：</strong>当一个鼠标按键在一个节点或者一个场景中被按下、释放、单击、移动或者拖动时，一个MouseEvent事件被触发。</p>
<p>MouseEvent对象捕捉事件，例如和它相关的单击数、鼠标位置或者那个叫鼠标按键被按下： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3kcgren1j31so0u0n49.jpg" alt="image-20200524151800627"></p>
<p>四个常数——PRIMARY,SECONDARY,MIDDLE和None在MouseEvent中被定义，表明鼠标的左、右、中以及无按钮。shiyonggetButton()方法来探测哪个按钮被按下。</p>
<p>在任何节点和场景都可触发鼠标事件。</p>
<h2 id="键盘事件-KeyEvent"><a href="#键盘事件-KeyEvent" class="headerlink" title="键盘事件 KeyEvent"></a>键盘事件 KeyEvent</h2><p><strong>要点提示:</strong>在一个节点或者一个场景上面只要按下、释放或者敲击键盘，就会触发一个KeyEvent事件。</p>
<p>键盘事件使得可以采用键盘来控制和执行动作，或者从键盘获得输入。KeyEvent对象描述了事件的性质(即，一个按键被按下释放或者敲击)以及键值。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l1fsp2ej31ni0k4b11.jpg" alt="image-20200524154213607"></p>
<p>每个键盘事件有一个相关的编码，可以通过KeyEvent的getCode()方法返回。键的编码是定义在KeyCode中的常量。KeyCode是一个enum类型的变量。</p>
<p>对于按下键和释放键的事件，getCode()返回表中的值， getText()返回一个描述键的代码的字符串， getCharacter()返回一个空字符串。对于敲击键额事件，geCode()返回UNDEFINED, getcCharacter()返回相应的Unicode字符或者和敲击事件相关的一个字符序列。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7ne7h0j31us0gu4e3.jpg" alt="image-20200524154812371"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3l7uwigwj31ue0ho18h.jpg" alt="image-20200524154825125"></p>
<p><strong>注意</strong></p>
<p>在一个枚举类型值的switch语句中，case后面跟的是枚举常量。常量是不受限制的(unqalified)即无须加KeyCode等类限定。例如： 在case子句中使用keyCode.DOWN将出现错误。</p>
<p>只有一个被拒交的节点可以接受KeyEvent事件。在一个text上调用requestFocus()使得text可以接受键盘输入。<strong>这个方法必须在舞台被显示后调用。</strong></p>
<p><strong>注意：</strong> 单击一个按钮之后，circlePane将不再被聚焦，为了修复这个问题，可以在每次按钮被单击后，在circlePane上再次调用requestFocus()。</p>
<h2 id="可观察对象的监听器"><a href="#可观察对象的监听器" class="headerlink" title="可观察对象的监听器"></a>可观察对象的监听器</h2><p>*<em>要点提示： *</em>可以通过添加一个监听器来处理可观察对象中的值的变化</p>
<p>一个Observable类的实例被认为是一个可观察对象，它包含了一个addListener(InvalidationListener listener)方法用于添加监听器。监听器类必须实现InvalidationListenr接口以重写invalidate(Observable o)方法，从而可以处理值的改变。一旦observable中的值改变了，通过调用invalidate(Observable o)方法，监听器得到通知。每个绑定属性都是Observable的实例。  </p>
<p>可以使用lambda来简化添加监听器的流程。注意处理器使用的是e，监听器使用的是ov。</p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>*<em>要点提示： *</em>JavaFx中的Animaiton类为所有的动画制作提供了核心功能。</p>
<p>JavaFX提供了许多Animation的具体子类。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3r5dr678j31ui0rchdt.jpg" alt="image-20200524191335802"></p>
<p>其中autoReverse是一个Boolean属性，表示下一周期中动画是否要倒转方向。cycleCount表示了该动画的循环次数。使用Tiemline.INDEFINTE表示无限循环。rate定义了动画的速度。一个负的rate值表示动画的相反方向。status是只读属性，表明了动画的状态(Animation.Status.PAUSED、Animation.Status.RUNNING和Animation.Status.STOPPED)。方法pause(),play(),stop()分别表示暂停、播放和终止动画。</p>
<h3 id="PathTrasition"><a href="#PathTrasition" class="headerlink" title="PathTrasition"></a>PathTrasition</h3><p>PathTrasition类制作一个在给定时间，节点沿着一条路从一个端点到另一个端点的移动动画，PathTransition是Animation的子类型。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf3rd7dkj4j31os0u0kjl.jpg" alt="image-20200524192103626"></p>
<p>Duration类定义了持续事件。它是一个不可更改的类。这个类定义类常量INDEFINTE，ONE，UNKNOW和ZERO来代表一个无限循环、1毫秒、未知以及哦的持续时间。可以使用new Duration(double millis)来创建一个Duration实例，使用add、substract、multiply和divide方法来执行算数操作，还可以使用toHours(),toMinutes(),toSeconds()和tomMillis()来返回持续时间值中的小时数、分钟数、秒钟数和毫秒数。还可以使用comPareTo来比较两个持续时间。</p>
<p>常量NONE和ORTHOGONAL_TO_TANGET在PathTransiton.OrientationType中定义。后者确定节点在沿着几何路径移动的过程中是否和路径的切线保持垂直。</p>
<h2 id="FadeTransition"><a href="#FadeTransition" class="headerlink" title="FadeTransition"></a>FadeTransition</h2><p>FadeTransition类在一个给定的时间内，通过改变一个节点的透明度来产生动画。FadeTransition是Animation的子类型。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf53fa5cbdj31tw0tahdt.jpg" alt="image-20200525230347355"></p>
<h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>PathTransition和FadeTransition定义类的特定的动画。Timeline类可以通过使用一个或者更多的KeyFrame(关键帧)来编写任意动画。每个KeyFrame在一个给定的时间间隔内顺序执行。Timeline继承自Animation。</p>
<p>通过new Timeline(KeyFrame… keyframe)来构建一个Timeline。</p>
<p>一个KeyFrame可以使用以下语句来构建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> KeyFrame(Duration duration, EeventHandler&lt;ActionEvent&gt; onFinished)</span><br></pre></td></tr></table></figure>

<p>处理器onFinished方法当这个关键帧的持续时间结束后被调用。</p>
<h2 id="示例学习-：弹球"><a href="#示例学习-：弹球" class="headerlink" title="示例学习 ：弹球"></a>示例学习 ：弹球</h2>]]></content>
  </entry>
  <entry>
    <title>Java/W3Cschool/JavaFX/JavaFX 复选框</title>
    <url>/2020/05/20/Java/W3Cschool/JavaFX/JavaFX%20%E5%A4%8D%E9%80%89%E6%A1%86/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
  </entry>
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C 第二章 对C的扩展</title>
    <url>/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%AF%B9C%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="对C的扩展"><a href="#对C的扩展" class="headerlink" title="对C的扩展"></a>对C的扩展</h1><h2 id="2-1-最简单的Object-C"><a href="#2-1-最简单的Object-C" class="headerlink" title="2.1 最简单的Object-C"></a>2.1 最简单的Object-C</h2>]]></content>
  </entry>
  <entry>
    <title>Objective-C/Objective-C基础教程/O-C第一章 启程</title>
    <url>/2020/05/17/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/O-C%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%90%AF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="第一章-启程"><a href="#第一章-启程" class="headerlink" title="第一章 启程"></a>第一章 启程</h1><h2 id="1-2-历史背景"><a href="#1-2-历史背景" class="headerlink" title="1.2 历史背景"></a>1.2 历史背景</h2><p>Steve Jobs 成立了NeXT公司。NeXT选择Unix作为其操作系统，创建了NextSTEP。NextSTEP后被命名为Cocoa。</p>
<h2 id="1-3-内容简介"><a href="#1-3-内容简介" class="headerlink" title="1.3 内容简介"></a>1.3 内容简介</h2><p>oc是C语言的一个扩展集。</p>
]]></content>
  </entry>
  <entry>
    <title>Swift/Swift Programming Language Book/Swift初见</title>
    <url>/2020/05/16/Swift/Swift%20Programming%20Language%20Book/Swift%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<h1 id="Swift初见"><a href="#Swift初见" class="headerlink" title="Swift初见"></a>Swift初见</h1><h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>使用let来宣告常数，使用var来宣告变数</p>
<p>常数或者变数的型别必须和你赋给它们的值一样。但是不一定在声明的时候显示声明类型，因为编译器会自动推断类别。</p>
<p>如果初始值没有提供足够的资讯(或者没有初始值)，就需要在变数后面宣告类型，用冒号分隔，例如：<br>let implicitDouble = 70.0<br>let explicitDouble: Double = 70</p>
<p>值永远不会被隐式转换为其他类别。如果需要对值进行转换，需要显示转换 例如：<br>let label = “The width is “<br>let width = 94<br>let widthLabel = label + String(width)</p>
]]></content>
  </entry>
  <entry>
    <title>Java/JavaFX基础</title>
    <url>/2020/05/07/Java/JavaFX%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="JavaFX基础"><a href="#JavaFX基础" class="headerlink" title="JavaFX基础"></a>JavaFX基础</h1><h1 id="javaFX是学习面向对象编程的优秀教学工具"><a href="#javaFX是学习面向对象编程的优秀教学工具" class="headerlink" title="javaFX是学习面向对象编程的优秀教学工具"></a>javaFX是学习面向对象编程的优秀教学工具</h1><h2 id="JavaFX与Swing以及AWT的比较"><a href="#JavaFX与Swing以及AWT的比较" class="headerlink" title="JavaFX与Swing以及AWT的比较"></a>JavaFX与Swing以及AWT的比较</h2><p>要点提示： JavaFX用于开发富因特网应用</p>
<p>富因特网应用是一种Web应用，可以表现一般桌面应用具有的特点和功能。JavaFX可以无缝地在桌面或者Web浏览器中运行。</p>
<h2 id="JavaFX程序的基本结构"><a href="#JavaFX程序的基本结构" class="headerlink" title="JavaFX程序的基本结构"></a>JavaFX程序的基本结构</h2><p>要点提示 ： 抽象类 javafx . application . Application 定义编写 JavaFX 程序的基本框架 。</p>
<h2 id="面板、UI组件以及形状"><a href="#面板、UI组件以及形状" class="headerlink" title="面板、UI组件以及形状"></a>面板、UI组件以及形状</h2><p>要点提示： 面板、UI组件以及形状是Node的子类型<br><img src="media/15888212935424.jpg" alt="-w247"><br>(各个部分的包含情况)</p>
<h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>要点提示： 可以将一个目标对象绑定到源对象中。源对象的修改将自动反应到目标对象中。</p>
<p>属性绑定： 将一个目标对象和一个源对象绑定。如果源对象中的值改变了，目标对象也将自动改变。目标对象称为绑定对象或者绑定属性，源对象称为可绑定对象或者可观察属性。</p>
<p>一个属性既可以作为目标，也可以作为源。目标监听源中的变换，一旦源中发生变化，目标将自动更新自身。<br>一个目标采用bind方法和源进行绑定，如下所示：<br>target.bind(source);<br><img src="media/15888260461998.jpg" alt="-w660"><br>绑定的演示：<br><img src="media/15888263948826.jpg" alt="-w667"></p>
<p><strong><em>双向绑定</em></strong><br>这样，一个属性的改变将反应到另一个对象上，反过来也一样，这样的绑定叫做双向绑定。如果目标和源同时是绑定属性和可观察熟悉你个，他们就可以使用bindBidirectional方法进行双向绑定。</p>
<h2 id="节点的通用属性和方法"><a href="#节点的通用属性和方法" class="headerlink" title="节点的通用属性和方法"></a>节点的通用属性和方法</h2><p>要点提示： 抽象类Node定义来许多对于节点而言通用的属性和方法<br>节点具有通用属性；<br>JavaFx的样式属性称为JavaFx CSS</p>
<p>设定样式的语法是styleName:value<br>一个节点的多个属性可以一起设置，通过分号(;)进行分隔。例如：<br>circle.setStyle(“-fx-stroke: black; -fx-fill: red”);<br>它等效于:<br>circle.setStyle(Color.Black);<br>circle.setFill(Color.Red);<br><em>如果使用了一个不正确的JavaFx CSS，程序依然可以编译和运行，但是样式会被忽略</em></p>
<p>rotate属性可以设定一个以度为单位的角度，让节点围绕它的中心旋转该角度。如果设置的角度是正的，表示顺时针旋转，否则是逆时针旋转<br>例如：将一个按钮旋转80度<br>button.setRotate(80);</p>
<h2 id="Color类"><a href="#Color类" class="headerlink" title="Color类"></a>Color类</h2><p>要点提示： Color类可以用于创建颜色</p>
<p>JavaFx定义类抽象类Paint用于绘制节点。Javafx.scene.paint.Color是Paint的具体子类，用于封装颜色信息。具体如下：<br><img src="media/15894177223880.jpg" alt="-w1051"><br>可以通过一下构造方法创建颜色实例：<br>public Color(double r, double g, double b, double opacity);其中的每个double值的范围从0.0到1.0,由浅到深。opacity定义了一个颜色的透明度，也是从0.0到1.0，由完全透明到完全不透明。这称为RGB模型，A表示alpha值，是透明度的意思。</p>
<p>Color color = new Color(0.25, 0.14, 0.333, 0.51);<br>Color类是不可修改的。当一个Color对象创建后，它的属性就不能再修改。brighter()返回一个具有更大的红、绿、蓝值的新的Color对象，而darker()方法返回一个具有更小的对象，opacity值与原来的Color对象中的值相同。</p>
<p>采用静态方法color(r,g,b),color(r,g,b,opacity),rgb(r,g,b),rgb(r,g,b,opac ity)来创建一个颜色对象。</p>
<p>另外一种方法是： 可以采用Color类中定义的许多标准颜色之一，如BEIGE(米色),BLACK,BLUE,CYAN,DARKGRAY,GREEN,LIGHTGRAY,MAGENTA(品红)，NAVY(海军蓝),ORANGE,PINK,SILVER,WHITE,YELLOW</p>
<h2 id="Font类"><a href="#Font类" class="headerlink" title="Font类"></a>Font类</h2><p>要点提示： Font类描述字体名、粗细和大小<br>可以在渲染文字的时候设置字体信息。javafx.scene.text.Font类用于创建字体<br><img src="media/15894186146809.jpg" alt="-w1156"></p>
<p>Font类实例可以用它的静态方法或者哦构造方法来创建，Font可以用它的名字、粗细、字体形态和大小来描述。Times,Courier和Arial是字体名字的示例。可以通过调用静态方法getFamilies()获得一个可用的字体系列名字列表。List是一个为列表定义通用方法的接口。ArrayList是List的一个具体实现。</p>
<p>字体形态是两个常量：FontPosture.ITALTC(意大利文)和FONTPosture.REGULAR.下面语句生成两个字体。<br>Font font1 = new Font(“SansSerif”,16);<br>Font font2 = Font.font(“Times New Roman “,FontWeight.BOlD, FontPosture.ITALIC, 12)<br><strong>StackPane将节点置于中央，节点依次位于最上面</strong></p>
<h2 id="Image和ImageView类"><a href="#Image和ImageView类" class="headerlink" title="Image和ImageView类"></a>Image和ImageView类</h2><p>要点提示： Image类表示一个图像，ImageView用于显示一个图像。</p>
<p>javafx.scene.image.Image类表示一个图像，用于从一个特定的文件名或者一个URL载入一个图像。</p>
<p>javafx.scene.image.ImageView是一个用于显示图像的节点。ImageView可以从一个Image对象产生。例如：以下代码从一个图像文件创建一个ImageView:<br>Image image = new Image(“image/us.gif”);<br>ImageView imageView = new ImageView(image);</p>
<p>当然，也可以周姐从一个文件或者一个URL来创建一个ImageView</p>
<p><img src="media/15894210170447.jpg" alt="-w1099"><br><img src="media/15894210336726.jpg" alt="-w1176"></p>
<p>HOX是一种面板，他将所有的节点排列在水平的一行上。<br>seRoate方法在Node类中定义，可以用于任何节点。<br>Image对象可以被多个节点共享。<br>ImageView这样的节点是不能共享的。不能讲一个ImageView多次放入一个面板或者场景中。<br><strong>注意</strong>，务必将图像文件放在类文件的相同个目录中。</p>
<p>如果使用URL来定位图像文件，必须提供URL协议http://</p>
<p>pane.setPadding(new Insets(5, 5 ,5, 5)); // 用于设置节点到边缘的距离</p>
<h2 id="布局面板"><a href="#布局面板" class="headerlink" title="布局面板"></a>布局面板</h2><p>要点提示：  javafx提供了许多种类型的面板，用于自动地将节点布局在希望的位置和大小。面板的种类有下面这些。</p>
<p><img src="media/15894387106951.jpg" alt="-w1118"></p>
<p>Pane通常用作显示形状的画布。</p>
<p>Pane是所有特定面板的基类。</p>
<p>特定的面板StackPane。节点放置在StackPane面板的中央。</p>
<h3 id="FlowPane"><a href="#FlowPane" class="headerlink" title="FlowPane"></a>FlowPane</h3><p> FlowPane 将节点按照加入的次序，从左到右或者从上到下垂直组织。当一行或者一列排满的时候，开始新的一行或者一列。可以使用下面两个常数中的一个来确定节点是水平还是垂直排列：<br> Orientation.HORIZONTAL 或者 Orientation.VERTICAL。（默认是水平的）可以使用像素为单位指定节点之间的距离。FlowPane的类图如图所示：<br> <img src="media/15894392532482.jpg" alt="-w1066"></p>
<p>其中数据域alignment、oritentation、hap和vgap是绑定属性。JavaFX中的每个绑定属性都有一个获取方法，例如getHgap()返回其值，一个设置方法，如sethGap(double)设置一个值，以及一个获取方法返回属性本身，(如hGapProperty())。对于一个ObjectProperty<T>类型的数据值，值的获取方法返回一个T类型的值，属性获取方法返回一个ObjectProperty<T>类型的属性值。</p>
<p><strong>文本域这样的节点只能加到一个面板中一次。将一个节点加入到一个面板中多次或者不同面板中将引起运行时错误</strong></p>
<p>一个节点只能放置在一个面板中。因此，面板和节点的关系是组合关系，使用一个填充的菱形表示。</p>
<h3 id="GridPane"><a href="#GridPane" class="headerlink" title="GridPane"></a>GridPane</h3><p>GridPane将节点布局在一个网络(矩阵)中。节点放在一个指定的列和行索引中。GridPane的类图如下：<br><img src="media/15894418799041.jpg" alt="-w1203"></p>
<p><strong>注意</strong><br>场景的大小没有设置时，场景会根据其中节点的大小自动计算。</p>
<h3 id="BorderPane"><a href="#BorderPane" class="headerlink" title="BorderPane"></a>BorderPane</h3><p>BorderPane可以将节点放置在五个区域： 顶部、底部、左边、右边以及中间，分别使用：<br>setTop(node), setBottom(node),setLeft(node),setRight(node),setCenter(node)<br><img src="media/15895503639516.jpg" alt="-w1077"></p>
<p><strong>注意</strong><br>面板自己就是一个节点，所以面板可以加入到另一个面板中。<br>如果要将一个节点从顶部区域移除，调用setTop(null);<br>如果一个区域没有被占据，那么不会分配空间给这个区域</p>
<h3 id="HBox和VBox"><a href="#HBox和VBox" class="headerlink" title="HBox和VBox"></a>HBox和VBox</h3><p>HBox将它的字节点布局在单个水平行中。VBox将它的节点布局在单个垂直列中。<br>和FlowPane想比，HBox和VBox只能将节点布局在一行或者一列中，而不是将它的额节点布局在多行或者多列中。<br><img src="media/15895513038688.jpg" alt="-w1162"><br><img src="media/15895513685595.jpg" alt="-w1110"></p>
<h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p>JavaFx提供了多种形状类，用于绘制文本、直线、圆、矩形、椭圆、弧、多边形以及折线<br>Shape类是一个抽象基类，定义了所有形状的共有属性。这些属性有fill，stroke，strokeWidth。</p>
<p>fill指定一个填充形状内部区域的颜色<br>stroke指定用于绘制形状边缘的颜色。<br>strokeWidth指定形状边缘的宽度。</p>
<p><img src="media/15896010726056.jpg" alt="-w761"></p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>Text类定义类一个节点，用于在一个起始点(x,y)处显示一个字符串。<br>Text对象通常置于一个面板中。</p>
<p>对于一个面板，左上角是(0,0),右下角是(pane.getWidth(),pane.getHeight())</p>
<p>一个字符串可以通过\n分隔从而显示在多行。<br>以下是Text的UML图：<br><img src="media/15896012798009.jpg" alt="-w1165"></p>
<h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><p>一条线通过4个参数(startX, startY, endX, endY)连接两个点。Line类的UML图：<br><img src="media/15896020888659.jpg" alt="-w1116"></p>
<h3 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h3><p>一个矩形通过参数x, y, width, height, arcWidth以及arcHeight定义。<br>矩形的左上角处于(x,y),参数aw(arcWidth)表示圆角处弧的水平直径，ah(arcHeight)表示圆角处弧的垂直直径。Rectangle的UML图如下：<br><img src="media/15896042504197.jpg" alt="-w1199"></p>
<h3 id="Circle和Ellipse-椭圆"><a href="#Circle和Ellipse-椭圆" class="headerlink" title="Circle和Ellipse(椭圆)"></a>Circle和Ellipse(椭圆)</h3><p><img src="media/15896958010306.jpg" alt="-w1112"><br>对于Ellipse,其中的radiusX值的是a，radiusY指的是b(椭圆数学定义中的a和b)</p>
<h3 id="Arc"><a href="#Arc" class="headerlink" title="Arc"></a>Arc</h3><p>一段弧可以认为是椭圆的一部分，由参数centerX, centerY, radiusX, radiusY, startAngle, length以及一个弧的类型(ArcType.OPEN, ArcType.CHORD或者ArcType.ROUND)来确定。 </p>
<p>其中startAngle是起始角度，length是跨度(即弧所覆盖的角度)。</p>
<p>角度使用度来作为单位，并且遵循通常的数学约定(即，0度是最东的方向，正的方向表示从最东方向开始顺时针方向的旋转角度)<br><img src="media/15897048959125.jpg" alt="-w1188"><br>单词解释： chord - 弦<br>不同类型弧长如下 ：<br><img src="media/15897049914944.jpg" alt="-w530"></p>
<p>角度可以是负数。一个负的起始角度从最东的方向顺时针旋转一个角度。一个负的跨度角度从起始角度开始顺时针旋转一个角度<br>（一句话总结： 这里的正负就和数学中一样）</p>
<h3 id="Polygon-多边形-和polyline-折线"><a href="#Polygon-多边形-和polyline-折线" class="headerlink" title="Polygon(多边形)和polyline(折线)"></a>Polygon(多边形)和polyline(折线)</h3><p>Polygon类定义一个连接一个点序列的多边形，polyline类类似于Polygon类，不同之处是Polyline类不会自动闭合。分别如下图所示：<br><img src="media/15897063079146.jpg" alt="-w1178"></p>
<p><img src="media/15897063195567.jpg" alt="-w1169"></p>
<h2 id="示例学习：-ClockPane-类"><a href="#示例学习：-ClockPane-类" class="headerlink" title="示例学习： ClockPane 类"></a>示例学习： ClockPane 类</h2><p>要点提示： 学习开发一个类，在面板中显示一个始终<br>ClockPane的合约图如下<br><img src="media/15897840550956.jpg" alt="-w1058"></p>
<p>因为一分钟有60s，所以第二个指针的角度是:<br>second * (2*pi/60)<br>包含秒数的确切分钟数是(minute + second / 60)</p>
<p>因为一小时有60分，因此分针的角度是(minute + second / 60) * (2pi/60)</p>
<p>由于一个圆被分为12个小时，所以时针的角度是： (hour + minute / 60 + second / (60 + 60)) * (2pi/12)<br><img src="media/15897845812196.jpg" alt="-w1163"></p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-引用数据类型</title>
    <url>/2020/05/04/Java/Java-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Java-引用数据类型与基本数据类型"><a href="#Java-引用数据类型与基本数据类型" class="headerlink" title="Java-引用数据类型与基本数据类型"></a>Java-引用数据类型与基本数据类型</h1><p><img src="media/15886035121002.jpg" alt="-w1012"></p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-黑马教程</title>
    <url>/2020/04/30/Java/Java-%E9%BB%91%E9%A9%AC%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java-黑马教程"><a href="#Java-黑马教程" class="headerlink" title="Java-黑马教程"></a>Java-黑马教程</h1><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><p>硬盘： 永久存储<br>内存： 临时存储</p>
<p>I： input输入，读取<br>O： output输出，写入<br>流： 数据(字符，字节)<br>1字符=2字节=<br>1字节=8个二进制位（即8个byte）</p>
<p>输入：把硬盘中的数据读取到内存中使用<br>输出 ：把内存中的数据写入到硬盘中保存<br><img src="media/15882264874443.jpg" alt="-w1448"></p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>一切文件数据（文本、图片、视频）都是以字节方式存储的。<br>所以，字节流可以传输任意文件数据，在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终是二进制数据</p>
<h4 id="OutputStream-字节输出流"><a href="#OutputStream-字节输出流" class="headerlink" title="OutputStream 字节输出流"></a>OutputStream 字节输出流</h4><p>此抽象类是表示输出字节流的所有类的超类<br>定义了一些子类共性的成员方法。</p>
<h5 id="FileOutputStream-文件字节输出流"><a href="#FileOutputStream-文件字节输出流" class="headerlink" title="FileOutputStream 文件字节输出流"></a>FileOutputStream 文件字节输出流</h5><p>作用： 把内存中的数据写入到硬盘的文件中</p>
<p>构造方法： </p>
<p>FileOutputStream(File file)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(String name)<br>          创建一个向具有指定名称的文件中写入数据的输出文件流。</p>
<p>参数： 写入数据的目的地<br>string name：目的地是一个文件的路径<br>File file： 目的地是一个文件<br>构造方法的作用： </p>
<ol>
<li>创建一个FileOutputStream对象</li>
<li>会根据构造方法中传递的文件/文件路径，创建一个空的文件</li>
<li>会把FileOutputStream对象只想创建好的文件</li>
</ol>
<h5 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h5><p>原理：如果 内存 -&gt; 硬盘<br>java程序 — JVM（java虚拟机）— OS（操作系统）— OS调用写数据的方法 — 把数据写入到文件</p>
<p>字节流的使用步骤(重点)</p>
<ol>
<li>创建一个FIleOutputStream对象，构造方法中传入数据的目的地</li>
<li>调用FIleOutputStream对象中的方法write，把数据写入到文件中</li>
<li>释放资源（这样可以节约内存，因为流的使用会占用一定的内存）</li>
</ol>
<p><strong><em>文件存储的原理和记事本打开</em></strong><br>写数据的时候会把十进制的整数转换为二进制的整数</p>
<p>记事本在打开文件的时候都会查询编码表，把字节转换为字符表示，故如果写入为：<br>0-127 - 查询ASCII表<br>其他值：会查询系统默认码表（中文系统GBK）<br><img src="media/15882290494697.jpg" alt="-w1433"></p>
<h6 id="一次写多个字节的方法"><a href="#一次写多个字节的方法" class="headerlink" title="一次写多个字节的方法"></a>一次写多个字节的方法</h6><p><img src="media/15882291991446.jpg" alt="-w706"><br>第一个：<br>用于一次写多个字节：</p>
<ul>
<li>如果写的第一个字节是正数（0-127），那么显示的时候会查询ASCII表</li>
<li>如果写的第一个字节是负数，那么第一个字节会和第二个字节，连个字节组成一个中文显示，查询系统默认码表（GBK）</li>
</ul>
<p>第二个用来写字节数组的一部分：<br>int off: 数组的开始索引<br>int len: 写几个字节</p>
<p>另外一种写入字符的方法：<br>使用String类中的方法把字符串，转换为字节数组</p>
<h6 id="数据的续写和换行写"><a href="#数据的续写和换行写" class="headerlink" title="数据的续写和换行写"></a>数据的续写和换行写</h6><p>续写即追加写</p>
<p>构造方法：<br>FileOutputStream(String name, boolean append)<br>          创建一个向具有指定 name 的文件中写入数据的输出文件流。<br>          FileOutputStream(File file, boolean append)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</p>
<p>参数：<br>String name，File file ： 写入数据的目的地<br>boolean append： 续写开关</p>
<ul>
<li>true： 继续在文件末尾续写数据</li>
<li>false： 创建一个新文件，覆盖</li>
</ul>
<p>换行写，写完数据之后写上换行符号</p>
<h4 id="InputStream-字节输入流"><a href="#InputStream-字节输入流" class="headerlink" title="InputStream 字节输入流"></a>InputStream 字节输入流</h4><p>方法：<br>    int read()<br>          从此输入流中读取下一个数据字节。<br>int    read(byte[] b)<br>从此输入流中将 byte.length 个字节的数据读入一个 byte 数组中。<br>void    close()<br>          关闭此输入流并释放与此流关联的所有系统资源。</p>
<h5 id="FileinputStream-文件字节输入流"><a href="#FileinputStream-文件字节输入流" class="headerlink" title="FileinputStream 文件字节输入流"></a>FileinputStream 文件字节输入流</h5><p><img src="media/15882331045281.jpg" alt="-w354"></p>
<p>作用： 把硬盘文件中的数据，读取到内存中使用</p>
<p>构造方法：<br><img src="media/15882332509769.jpg" alt="-w1110"></p>
<p>参数：<br>读取文件的数据源<br>String name:文件的路径<br>File file: 文件<br>构造方法的作用：</p>
<ol>
<li><p>会创建一个FileInputStream对象</p>
</li>
<li><p>会把FileInputStream对象指向构造方法中要读取的文件</p>
<p>读取数据的原理：<br>原理：如果 硬盘 -&gt; 内存<br>java程序 — JVM（java虚拟机）— OS（操作系统）— OS调用读数据的方法 — 读入文件<br>使用步骤：</p>
<ol>
<li>创建一个FileInputStream对象，构造方法中绑定要读取的数据</li>
<li>使用FileInputStream对象中的方法read，读取文件<br>int read()读取文件中的一个字节并返回，读取到文件的末尾返回-1</li>
<li>释放资源</li>
</ol>
</li>
</ol>
<p><strong><em>注意</em></strong><br>不知道文件中有多少字节，使用while循环<br>boolean表达式：while((len = fis.read())!= -1){<br>}<br>实际过程：<br>int len;<br>len = fis.read();<br>len = fis.read())!= -1</p>
<p>而不能写成：<br>while((fis.read())!= -1){<br>System.out.println(fis.read())<br>}</p>
<p> <strong><em>方法</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-郑莉版输入输出流课件</title>
    <url>/2020/04/30/Java/Java-%E9%83%91%E8%8E%89%E7%89%88%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E8%AF%BE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="郑莉版输入输出流课件"><a href="#郑莉版输入输出流课件" class="headerlink" title="郑莉版输入输出流课件"></a>郑莉版输入输出流课件</h1><p>在Java中将信息的输入与输出过程抽象为I/O流<br>I/O流一旦被创建就会自动打开<br>通过调用close方法，可以显式关闭任何一个流<br>如果流对象不再被引用，Java的回收机制也会隐式地关闭它<br><img src="media/15882111044109.jpg" alt="-w687"></p>
<h2 id="读写数据的方法"><a href="#读写数据的方法" class="headerlink" title="读写数据的方法"></a>读写数据的方法</h2><p>不论数据从哪来，到哪去，也不论数据本身是何种类型，读写数据分方法大体上都是一样的<br><img src="media/15882113259367.jpg" alt="-w524"></p>
<h2 id="I-O流的分类"><a href="#I-O流的分类" class="headerlink" title="I/O流的分类"></a>I/O流的分类</h2><ul>
<li>从流的方向划分</li>
</ul>
<ul>
<li>输入流</li>
<li>输出流</li>
</ul>
<ul>
<li>从流的分工划分</li>
</ul>
<ul>
<li>节点流</li>
<li>处理流</li>
</ul>
<ul>
<li>从流的内容划分</li>
</ul>
<ul>
<li>面向字符的流</li>
<li>面向字节的流</li>
</ul>
<p><strong><em>自己补充了解：</em></strong><br>节点流和处理流的区别<br><img src="media/15882115576182.jpg" alt="-w568"></p>
<h2 id="java-io-包的顶级层次结构"><a href="#java-io-包的顶级层次结构" class="headerlink" title="java.io 包的顶级层次结构"></a>java.io 包的顶级层次结构</h2><p>面向字符的流： 专门用于字符数据<br>面向字节的流： 用于一般目的<br><img src="media/15882126043831.jpg" alt="-w586"></p>
<h2 id="面向字符的流"><a href="#面向字符的流" class="headerlink" title="面向字符的流"></a>面向字符的流</h2><ul>
<li>针对字符数据的特点进行过优化，提供一些面向字符的有用特性</li>
<li>源或目标通常是文本文件<h3 id="实现内部格式和文本文件中的外部格式之间的转换"><a href="#实现内部格式和文本文件中的外部格式之间的转换" class="headerlink" title="实现内部格式和文本文件中的外部格式之间的转换"></a>实现内部格式和文本文件中的外部格式之间的转换</h3><img src="media/15882130366292.jpg" alt="-w684"><h3 id="面向字符的抽象类Read和Writer"><a href="#面向字符的抽象类Read和Writer" class="headerlink" title="面向字符的抽象类Read和Writer"></a>面向字符的抽象类Read和Writer</h3></li>
<li>java.io包中所有流的抽象基类</li>
<li>Reader提供了输入字符的API</li>
<li>Writer提供了输出字符的API</li>
<li>它们的子类又分为两大类</li>
</ul>
<ul>
<li>节点流： 从数据源读入数据或往目的地写出数据</li>
<li>处理流： 对数据执行某种处理</li>
</ul>
<ul>
<li>多数程序使用这两个抽象类的一系列子类来读入/写出文本信息</li>
</ul>
<ul>
<li>例如： FileRader/FileWriter用来读写文本文件</li>
</ul>
<p>处理流和节点流一览：<br><img src="media/15882256079774.jpg" alt="-w670"></p>
<h2 id="面向字节的流"><a href="#面向字节的流" class="headerlink" title="面向字节的流"></a>面向字节的流</h2><ul>
<li>数据源或目标中含有非字符数据，必须用字节流来输入/输出。</li>
<li>通常被用来读写诸如图片、声音之类的二进制数据</li>
<li>绝大多数数据是被存储为二进制文件的，世界上的文本大约只能占到2%，通常二进制文件比含有相同数据量的文本文件小得多。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java/java-抽象类和接口</title>
    <url>/2020/04/16/Java/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>要点提示： 父类中定义了相关子类的共同行为。接口可以拥有定义类的共同行为(包括非相关的类)</p>
<h2 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h2><p>要点提示： 抽象类不可以用于创建对象。抽象类可以包含抽象方法，这些方法将在具体的子类中实现。</p>
<ul>
<li><p>抽象类定义： 类的设计应该确保父类包含它的子类的共同特征。有时候，一个父类设计得非常抽象，以至于它都没任何具体的实例。这样的类称为抽象类。</p>
</li>
<li><p>抽象方法：<br><img src="media/15869985945845.jpg" alt="-w1084"></p>
</li>
<li><p>抽象类和常规类很像，但是不能使用new操作符创建它的实例。抽象方法只有定义而没有实现。他的实现由子类实现。一个包含对象方法的类的必须声明为抽象类。</p>
</li>
<li><p>抽象类的沟造方法定义为protected，它只能被子类使用。创建一个具体的子类的实例时，它的父类的构造方法被调用以初始化父类中定义的数据域。</p>
</li>
</ul>
<h3 id="为何要使用抽象方法"><a href="#为何要使用抽象方法" class="headerlink" title="为何要使用抽象方法"></a>为何要使用抽象方法</h3><p>使用抽象方法以后，JVM在运行时可以根据对象的类型动态地决定调用哪一个方法。</p>
<h3 id="抽象类的几点说明"><a href="#抽象类的几点说明" class="headerlink" title="抽象类的几点说明"></a>抽象类的几点说明</h3><ul>
<li>抽象方法不能包含在非抽象类中。如果抽象父类的子类不能实现所有的抽象方法，那么子类也必须定义为抽象的。即在抽象类扩展的非抽象子类中，必须实现所有的抽象方法。另外，抽象方法是<em>非静态</em>的。</li>
<li>抽象类不能使用new关键字来初始化。但是仍然可以定义它的构造方法，这个构造方法在它的子类的构造方法中调用。</li>
<li>抽象方法的类必须是抽象的。但是，可以定义一个不包含抽象方法的抽象类。这种情况下，不能使用new创建该类的实例。这种类是用来定义新子类的基类的。</li>
<li>子类可以覆盖分类的方法并将它定义为abstract。</li>
<li>即使子类的父类是具体的，这个子类也可以是抽象的。</li>
<li>不能使用new从一个抽象类创建一个实例。但是抽象类可以用作一种数据类型。<br>下面语句用来创建一个元素是GeometricObject类型的数组：<br>GeometricObject[] objects = new GeometricObject[10];<br>然后可以创建一个GeometricObject的实例，并将它的引用赋值给数组。<br>object[0] = new Circle();// Circle是GeometricObject的子类</li>
</ul>
<h2 id="示例学习：-抽象的Number类"><a href="#示例学习：-抽象的Number类" class="headerlink" title="示例学习： 抽象的Number类"></a>示例学习： 抽象的Number类</h2><p>要点提示： Number类是数值包装类、BigInteger以及BigDecimal的父类。</p>
<h2 id="示例学习：-Calendar和GregorianCalendar"><a href="#示例学习：-Calendar和GregorianCalendar" class="headerlink" title="示例学习： Calendar和GregorianCalendar"></a>示例学习： Calendar和GregorianCalendar</h2><p>要点提示： GregorianCalendar是抽象类Calendar的一个具体子类。</p>
<p>一个Date的实例表示以毫秒为精度的特定时刻。Calendar是一个抽象的基类，可以提取出详细的日历信息。例如： 年、月、日、小时、分钟和秒。<br>GregorianCalendar是一个支持公历的类。<br>Calendar类中的add方法是抽象的，因为它的实现依赖于某个具体的日历系统。</p>
<p>可以使用new GregorianCalendar()利用当前时间构造一个默认的GregorianCalendar对象，可以使用GregorianCalendar(year, month, date)利用指定的year、month和date(日)构造一个GregorianCalendar对象。参数month是基于0的，即0代表1月</p>
<p>在Calendar类中定义的get(int field)方法在从Calendar类中提取日期和时间信息方面是很有用的。日期和时间域都被定义为常量。</p>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>要点提示： 接口是一种与类相似的结构，只包含常量和抽象方法</p>
<p>接口在很多方面都与抽象类很相似，但是它的目的是指明相关或者不相关类的多个对象的共同行为。例如，使用正确的接口，可以指明这些对象是可比较的、可食用的，以及可克隆的。<br>定义接口：<br><img src="media/15870270601472.jpg" alt="-w975"></p>
<p>在java中，接口被看作是一种特殊的类。就像常规类一样，每个接口都被编译为独立的字节码文件。使用接口或多或少有点像使用抽象类。即：</p>
<ul>
<li>可以使用接口作为引用变量的数据类型或类型转换的结果。</li>
<li>不能使用new操作符创建接口的实例。</li>
</ul>
<p>可以使用Edible接口来明确一个对象是否是可食用的。这需要使用implements关键字让对象的类实现这个接口来完成。</p>
<h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p>要点提示： Comparable接口定义了compoareTo方法，用于比较对象。<br>接口的定义如下：<br>// Interface for comparing objects, defined in java.lang<br>package java.lang;<br>public interface Comparable<E><br>{ public int compareTo(E o);<br>}</p>
<p>Comparable 方法判断这个对象相对于给定对象o的<em>顺序</em>，并且当这个对象小于、等于或大于给定对象o时，分别返回负整数、0或正整数。</p>
<p>Comparable接口是一个泛型接口。在实现该接口时，泛型类型E被替换成一种具体的类型。</p>
<p>由于所有Comparable对象都有compareTo方法，如果对象是Comparable接口类型的实例的话，Java API中的java.util.Arrays.sort(Object[])方法就可以使用compareTo方法对数组中的对象进行比较和排序。</p>
<h2 id="Cloneable接口"><a href="#Cloneable接口" class="headerlink" title="Cloneable接口"></a>Cloneable接口</h2><p>要点提示： Cloneable接口给出了一个可克隆的对象。</p>
<p>经常会出现需要创建一个对象拷贝的情况。为了实现这个目的，需要使用clone方法并理解Cloneable接口。</p>
<p>接口通常包括常量和抽象方法，但是Cloneable接口是一个特殊情况。在java.lang包中的Cloneable接口的定义如下：<br>package java.lang;<br>public interface Cloneable {<br>}</p>
<p>也就是说，这个接口是空的。<br>一个带空体的接口被称为标记接口(maker interface).一个标记接口及不包括常量也不包括方法。它用来表示一个类拥有某种特定的属性。实现Cloneable接口的类标记为可克隆的，而且它的对象可以使用在Object类中定义的clone()类方法。</p>
<p>Java库中的很多类（例如，Date、Calendar和ArrayList）实现Cloneable。这样这些类的实例可以被克隆。</p>
<p>为了定义一个自定义类来实现Cloneable接口，这个类必须覆盖Object类中的clone()方法。</p>
<h3 id="浅复制、-深复制"><a href="#浅复制、-深复制" class="headerlink" title="浅复制、 深复制"></a>浅复制、 深复制</h3><p>意思是：<br>Object类中的clone方法将原始对象的每个数据域赋值给目标对象。如果一个数据域是基本类型，复制的就是它的值，例如，area(double 类型)的值从house1复制到house2.如果一个数据域是对象，复制的就只是该域的引用。例如，域whenBuilt是Date类，所以，它的引用被复制给house2。<br>因此，尽管，house1==house2为假，但是house1.whenBuilt==house2.whenBuilt为真。这称为浅复制(shallow copy)而不是深复制(deep copy),这意味着如果数据域是对象类型，那么复制的是对象的引用，而不是它的内容。</p>
<h2 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h2><p>要点提示：一个类可以实现多个接口，但是只能继承一个父类。<br>接口的使用和抽象类的使用基本相似，但是，定义一个接口与定义一个抽象类有所不同。<br><img src="media/15870516633639.jpg" alt="-w1096"></p>
<p>利用关键字extands，接口可以继承其他接口。这样的接口称为子接口(subinterface)。</p>
<p>接口可以扩展其他接口而不是类。一个类可以扩展它的父类同时实现多个接口。</p>
<p>所有的类共享一个根类Object，但是接口没有共同的根。<em>与此类似，接口也可以定义一种类型。一个接口类型的变量可以引用实现该接口的类的实例</em>。如果一个类实现了一个接口，那么这个接口就类似于该类的一个父类。可以将接口当作一种数据类型使用，将接口类型的变量转换为它的子类，反过来也可以。</p>
<p>注意：类名是一个名词。接口名可以是形容词或者名词。</p>
<p>设计指南：<br><img src="media/15870522012115.jpg" alt="-w1131"></p>
<p>通常，推荐使用接口而非抽象类，因为接口可以定义非相关类共有的父类型。接口比类更灵活。</p>
<h2 id="实例学习：-Rational类"><a href="#实例学习：-Rational类" class="headerlink" title="实例学习： Rational类"></a>实例学习： Rational类</h2><p>设计一个Rational类，用于表示和处理有理数。</p>
<h2 id="类的设计原则"><a href="#类的设计原则" class="headerlink" title="类的设计原则"></a>类的设计原则</h2><p>要点提示： 类的设计原则有助于设计出合理的类</p>
<h3 id="内聚性"><a href="#内聚性" class="headerlink" title="内聚性"></a>内聚性</h3><p>类应该描述一个单一的实体，而所有的类操作应该在逻辑上互相配合，只吃一个一致的目的。</p>
<p>如果一个实体担负太多的职责，就应该按各自的职责分成几个类</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>遵循标准Java程序设计风格和命名习惯。为类、数据域和方法选取具有信息的名字。通常的风格是将数据声明至于构造方法之前，并且将构造方法置于方法之前。</p>
<p>选择名字要保持一致。给类似的操作选择不同的名字并非良好的实践。</p>
<p>一般来说，应该具有一致性地提供一个公共无参构造方法，用于构建默认实例。如果一个类不支持无参的构造方法，要用文档写出原因。如果没有显式定义构造方法，即假定有一个空方法体的公共默认无参构造方法。</p>
<p>如果不想用户创建类的对象，可以在类中声明一个私有的构造方法，Match类就是如此</p>
<h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>一个类应该使用private修饰符隐藏其数据，以免用户直接访问它。这使类更易于维护。</p>
<p><strong>只在</strong>希望数据域可读的情况下，才提供get方法；也只希望数据域可更新的情况下，才提供set方法。</p>
<h3 id="清晰性"><a href="#清晰性" class="headerlink" title="清晰性"></a>清晰性</h3><p>类应该有一个很清晰的合约，从而易于解释和理解。</p>
<p>用户可以以各种不同组合、顺序，以及在各种环境中结合使用多个类。因此，在设计一个类时，这个类不应该限制用户如何以及何时使用该类；以一种方式设计属性，以容许用户按值的任何顺序和任何组合来设置；设计方法应该使得实现的功能与它们出现的顺序无关。</p>
<p>不应该声明一个来自其他数据域的数据域。<br>例如：<br><img src="media/15875645623585.jpg" alt="-w1122"></p>
<h3 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h3><p>类是为许多不同用户的使用而设计的。为了能在一个广泛的应用中使用，一个类应该通过属性和方法提供多种方案以适应用户的不同需求。</p>
<h3 id="实例和静态"><a href="#实例和静态" class="headerlink" title="实例和静态"></a>实例和静态</h3><p>依赖于类的具体实例的变量或方法必须是一个实例变量或方法。</p>
<p>如果一个变量被类的所有实例所共享，那就应该将它声明为静态的。</p>
<p>如果方法 不依赖于某个具体的实例，那就应该将它声明为静态方法。</p>
<p>应该总是使用类名(而不是引用变量)引用静态变量和方法，以增强可读性并避免错误。</p>
<p>不要从构造方法中传入参数初始化<em>静态</em>数据。最好使用set方法改变静态数据域。</p>
<p>实例和静态是面向对象程序设计不可或缺的部分。数据域或方法要么是实例的，要么是静态的。不要错误地忽视了静态数据域或方法。</p>
<p>构造方法永远都是实例方法，因为它是用来创建具体实例的。一个静态变量或方法可以从实例中调用，但是不能从静态方法中调用实例变量或方法。</p>
<h3 id="继承和聚合"><a href="#继承和聚合" class="headerlink" title="继承和聚合"></a>继承和聚合</h3><p>继承和聚合之间的差异，就是is-a(是一种)和has-a(具有)之间的关系。<br>这里解释一下后者：<br>人具有名字，因此，可以使用<em>聚合</em>来对Person类和Name类之间的关系建模。</p>
<h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>接口和抽象类都可以用于为对象指定共同的行为。</p>
<p>如何决定是采用接口还是抽象类？<br>同常，比较强的is-a关系清晰地描述了父子关系，应该采用类的继承关系来建模。弱的is-a关系，也称为is-kind-of(是一类)关系，表明一个对象拥有某种属性。弱的is-a关系可以使用接口来建模。</p>
<p>接口比抽象类更灵活，因为一个子类只能继承一个父类，但是却可以实现任意个数的接口。然而，接口不能具有具体的方法。可以结合接口和抽象类的优点，创建一个接口，使用一个抽象类来实现它。可以视其方便使用接口或抽象类。</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-有关重写的问题</title>
    <url>/2020/04/12/Java/Java-%E6%9C%89%E5%85%B3%E9%87%8D%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="有关重写的问题"><a href="#有关重写的问题" class="headerlink" title="有关重写的问题"></a>有关重写的问题</h1><h2 id="重写和覆盖的关系"><a href="#重写和覆盖的关系" class="headerlink" title="重写和覆盖的关系"></a>重写和覆盖的关系</h2><p><strong>* 重写就是覆盖 *</strong></p>
<h3 id="需要注意的几点："><a href="#需要注意的几点：" class="headerlink" title="需要注意的几点："></a>需要注意的几点：</h3><ul>
<li>仅当实例方法是可访问时，它才能被覆盖。因为私有方法在它的类本身以外是不能访问的，所以它不能被覆盖。如果子类中定义的方法在父类中是私有的，那么这两个方法完全没有关系。</li>
<li>与实例方法一样，静态方法也能被继承。但是，静态方法不能被覆盖。如果父类中定义的静态方法在子类中重新被定义，那么在父类中定义的静态方法将被禁藏。可以使用语法: 父类名.静态方法名(superClassName.staticMethodName)调用隐藏的静态方法。<h3 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h3>不允许在子类中的一个方法具有和它父类中的方法完全相同的方法签名，但是返回值类型不同。这样会导致语法错误。</li>
</ul>
<p>子类中与其父类中的方法同名但具有不同参数类型的方法被称为重载。</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-ArrayList类</title>
    <url>/2020/04/11/Java/Java-ArrayList%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><p>要点提示：ArrayList 对象可以用于存储一个对象列表</p>
<h2 id="用数组存储对象"><a href="#用数组存储对象" class="headerlink" title="用数组存储对象"></a>用数组存储对象</h2><p>数组可以用于存储一个一组对象，但是这个数组一旦创建，它的大小就固定了。Java提供ArrayList类来存锤不限定个数的对象。</p>
<h2 id="ArrayList类-1"><a href="#ArrayList类-1" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><p>ArrayList是一种泛型类，具有一个泛型类型E。创建一个ArrayList时，可以指定一个具体的类型来替换E。<br>ArrayList类详细：<br><img src="media/15865854188912.jpg" alt="-w1127"></p>
<p>创建一个ArrayList，并且将其引用赋值给变量cities。该ArrayList对象可以用于存储字符串。例如：<br>ArrayList<String> cities = new ArrayList<String>();</p>
<p>创建一个ArrayList并且将其引用赋值给变量dates。该ArrayList对象可以用于存储日期。<br>ArrayList<Date> dates = new ArrayList<Date>();</p>
<p><strong>* 更新说明 *</strong><br><img src="media/15865856170194.jpg" alt="-w1039"></p>
<h2 id="ArrayList和数组之间的异同"><a href="#ArrayList和数组之间的异同" class="headerlink" title="ArrayList和数组之间的异同"></a>ArrayList和数组之间的异同</h2><p><img src="media/15865871383307.jpg" alt="-w1171"><br><img src="media/15865871488543.jpg" alt="-w1169"></p>
<p>分别对数组和ArrayList进行排序：<br><img src="media/15865888719004.jpg" alt="-w1133"></p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-对象转换和instanceof</title>
    <url>/2020/04/11/Java/Java-%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%92%8Cinstanceof/</url>
    <content><![CDATA[<h1 id="Java-对象转换和instanceof"><a href="#Java-对象转换和instanceof" class="headerlink" title="Java-对象转换和instanceof"></a>Java-对象转换和instanceof</h1><p>要点提示：对象的引用可以类型转换为另外一种对象的引用，这称为对象转换。</p>
<h2 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h2><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>Object o = new Student();<br>Student类是Object类的一个子类</p>
<h3 id="向上转换-upcasting"><a href="#向上转换-upcasting" class="headerlink" title="向上转换(upcasting)"></a>向上转换(upcasting)</h3><p>总是可以将一个子类的实例转换为一个父类的变脸，称为向上转换，因为子类的实例永远是它的父类的实例。(不需要使用转换记号”(子类名)”)</p>
<h3 id="向下转换-downcasting"><a href="#向下转换-downcasting" class="headerlink" title="向下转换(downcasting)"></a>向下转换(downcasting)</h3><p>当把一个父类的实例转换为它的子类变量(称为向下转换)时，必须使用转换记号”(子类名)”进行显式转换，向编译器表明意图。</p>
<p>为使转换成功，必须确保要转换的对象是子类的一个实例。如果父类对象不是子类的一个实例，就会出现一个运行异常ClassCastException.</p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof 是java中的关键字</p>
<h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>(A和B都是对象)<br>A instanceof B //用来确定A是不是B的一个实例</p>
<h3 id="⚠️"><a href="#⚠️" class="headerlink" title="⚠️"></a>⚠️</h3><p><strong>*注意 *</strong><br>对象成员访问运算符(.)优先于类型转换运算符。所以使用圆括号保证在点运算符(.)之前进行转换，例如：<br>((Circle)object).getArea();</p>
<p>另外，对基本类型值进行转换不同于对对象引用进行转换。转换基本类型值返回一个新的值，例如：<br>int age = 45;<br>byte newAge = (byte)age;// A new value is assigned to newAge</p>
<p>而转换一个对象引用不会创建一个新的对象。例如：<br>Object o = new Circle();<br>Circle c = (Circle)o; // No new object is created<br>现在，引用变量o和c指向同一个对象。</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java_instanceof</title>
    <url>/2020/04/09/Java/Java_instanceof/</url>
    <content><![CDATA[<h1 id="instanceof关键字用法"><a href="#instanceof关键字用法" class="headerlink" title="instanceof关键字用法"></a>instanceof关键字用法</h1><p>instanceof 是java的一个二元操作符，类似于==，&gt;,&lt;等操作符。<br>instanceof 是java的保留关键字，它的作用是测试它左边的对象是否是它右边的类的实例 ，返回boolean的数据类型</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java_多态</title>
    <url>/2020/04/09/Java/Java_%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java_多态"></a>Java_多态</h1><p>多态是同一个行为具有不同表现形式或形态的能力<br>多态就是同一个接口，使用不同的实例而执行不同的操作。</p>
<h2 id="多态性的优点"><a href="#多态性的优点" class="headerlink" title="多态性的优点"></a>多态性的优点</h2><ul>
<li>消除类型之间的耦合关系</li>
<li>可替换性</li>
<li>可扩充性</li>
<li>借口性</li>
<li>灵活性</li>
<li>简化性<h2 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h2></li>
<li>继承</li>
<li>重写</li>
<li>父类引用指向子类对象</li>
</ul>
<p>当使用多态方式调用方法时，首先检测父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。<br>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DuoTai &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        show(new Cat()); // 以Cat对象调用show方法</span><br><span class="line">        show(new Dog()); // 以Dog对象调用show方法</span><br><span class="line"></span><br><span class="line">        Animal a = new Cat(); // 向上转型</span><br><span class="line">        a.eat();               // 调用的是Cat的eat</span><br><span class="line">        Cat c = (Cat)a;         // 向下转型</span><br><span class="line">        c.work();               // 调用的是Cat的work</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void show(Animal a)&#123;</span><br><span class="line">        a.eat();</span><br><span class="line">        if (a instanceof Cat)&#123; // 猫做的事情</span><br><span class="line">            Cat c = (Cat)a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (a instanceof Dog)&#123;  // 狗做的事情</span><br><span class="line">            Dog c = (Dog) a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Animal&#123;</span><br><span class="line">    abstract void eat();</span><br><span class="line">&#125;</span><br><span class="line">class Cat extends Animal&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃鱼&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;抓老鼠&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void work()&#123;</span><br><span class="line">        System.out.println(&quot;看家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>虚函数的存在是为了多态<br>Java中其实并没有虚函数的概念，它的普通函数就相当于C++的虚函数，动态绑定是Java的默认行为。如果Java中不希望某个函数具有虚函数特性，可以加上final关键字编程非虚函数</p>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>也就是子类能够重写父类的方法。<br>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。<br>要想调用父类中被重写的方法，则必须使用关键字super。</p>
]]></content>
  </entry>
  <entry>
    <title>Python/Python-PIL包中Image模块的convert()函数的具体使用</title>
    <url>/2020/04/04/Python/Python-PIL%E5%8C%85%E4%B8%ADImage%E6%A8%A1%E5%9D%97%E7%9A%84convert()%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="PIL包中Image模块的convert-函数的具体使用"><a href="#PIL包中Image模块的convert-函数的具体使用" class="headerlink" title="PIL包中Image模块的convert()函数的具体使用"></a>PIL包中Image模块的convert()函数的具体使用</h1><h2 id="RGB到灰度转换公式"><a href="#RGB到灰度转换公式" class="headerlink" title="RGB到灰度转换公式"></a>RGB到灰度转换公式</h2><p>RGB到灰度转换公式：Y’ = 0.299 R  + 0.587 G + 0.114 B</p>
<h2 id="convert-函数"><a href="#convert-函数" class="headerlink" title="convert 函数"></a>convert 函数</h2><p>convert函数，用于不同模式之间的转换。PIL中有9种不同模式，分别为1，L，P，RGB， RGBA, CMYK, YCbCr,I,F.</p>
<p>其中模式”1”为二值图像，每个像素用8bit，0表示黑，255表示白。</p>
<p>其中“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。在PIL中，从模式“RGB”转换为“L”模式是按照下面的公式转换的。<br>L = 0.299 R  + 0.587 G + 0.114 B</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-static</title>
    <url>/2020/04/02/Java/Java-static/</url>
    <content><![CDATA[<h1 id="static-详解"><a href="#static-详解" class="headerlink" title="static 详解"></a>static 详解</h1><h2 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h2><p>是一个java对象就有一个，100个对象就有100个。<br>实例变量存储在java对象内部，在堆内存中，在构造方法执行的时候初始化</p>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>所有对象的该变量值一样，这种特征属于类级别的特征，可以提升为整个模版的特征，可以在变量前添加static关键字修饰</p>
<p>静态变量在类加载的时候初始化，不需要创建对象，内存就开辟了</p>
<p>静态变量存储在方法区内存当中</p>
<p>静态变量访问时直接用类名访问，而不用实例对象名</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>什么时候成员变量声明为实例变量？<br>    - 所有对象都有这个属性，但是这个属性的值会随着对象的变化而变化(不同的对象的这个属性具体的值不同)<br>什么时候成员变量声明为静态变量呢？<br>    - 所有对象都有这个属性，并且所有对象的这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</p>
<p>静态变量在类加载的时候初始化，内存在方法去内存中开辟/访问的时候不需要创建对象，直接使用”类名.静态变量名”的方式访问。(也可以用引用的方式访问，但是会被警告)</p>
<p>所有静态的数据都可以采用类名.,也可以采用引用.,但是建议采用类名.的方式访问。<br>采用引用.的方式访问的时候，即使引用是null，也不会出现空指针异常。因为访问静态的数据不需要对象的存在。</p>
<p>static关键字：<br>    - 翻译为静态<br>    - 修饰的方法是静态方法<br>    - 修饰的变量是静态变量<br>    - 所有static修饰的元素称为静态的，都可以可以采用类名.,也可以采用引用.,但是建议采用类名.的方式访问。<br>    - static修饰的所有元素都是类级别的特征，和具体的对象无关</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-BigInteger和BigDecimal类</title>
    <url>/2020/04/01/Java/Java-BigInteger%E5%92%8CBigDecimal%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java-BigInteger和BigDecimal类"><a href="#Java-BigInteger和BigDecimal类" class="headerlink" title="Java-BigInteger和BigDecimal类"></a>Java-BigInteger和BigDecimal类</h1><h2 id="要点提示：Java-BigInteger和BigDecimal类可以用于表示任意大小和精度的整数或者十进制数"><a href="#要点提示：Java-BigInteger和BigDecimal类可以用于表示任意大小和精度的整数或者十进制数" class="headerlink" title="要点提示：Java-BigInteger和BigDecimal类可以用于表示任意大小和精度的整数或者十进制数"></a>要点提示：Java-BigInteger和BigDecimal类可以用于表示任意大小和精度的整数或者十进制数</h2><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p> BigInteger的实例可以用来表示任意大小的整数。可以使用new  BigInteger(String) 和new BigDecimal(String)来创建 BigInteger 和 BigDecimal的实例，使用add、subtract、multiple、divide和remainder方法完成算术运算，使用compareTo方法比较两个大数字。</p>
<p>对BigDecimal对象的精度没有限制。如果结果不能终止，那么divide方法会抛出ArithmeticException异常。但是，可以使用重载的divide(BigDecimal d, int scale, int roundingMode)方法来指定尺度和舍入方法来避免这个异常。这里的scale是指小数点后最小的整数位数。</p>
]]></content>
  </entry>
  <entry>
    <title>Matlab/Matlab-数值计算课堂</title>
    <url>/2020/03/31/Matlab/Matlab-%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E8%AF%BE%E5%A0%82/</url>
    <content><![CDATA[<h1 id="5Matlab-数值计算-课堂"><a href="#5Matlab-数值计算-课堂" class="headerlink" title="5Matlab-数值计算(课堂)"></a>5Matlab-数值计算(课堂)</h1><h2 id="5-1-线性方程组求解"><a href="#5-1-线性方程组求解" class="headerlink" title="5.1 线性方程组求解"></a>5.1 线性方程组求解</h2><h3 id="5-1-1-直接求接法"><a href="#5-1-1-直接求接法" class="headerlink" title="5.1.1 直接求接法"></a>5.1.1 直接求接法</h3><p>已知线性方程组： Ax=b;<br>其中A为已知的n阶方阵，b是含n个分量的已知列向量，而x为含n个分量的未知列向量。<br>如图：<br><img src="media/15856452203645.jpg" alt="-w893"></p>
<ul>
<li>1 逆矩阵解法<br>对于方程组Ax=b,根据线性代数知识可知,x=b/A;其中1/A为矩阵A的逆矩阵。<br>实例：求解线性方程组的解；<br><img src="media/15856455181525.jpg" alt="-w523"></li>
</ul>
<h2 id="5-2-非线性方程求解"><a href="#5-2-非线性方程求解" class="headerlink" title="5.2 非线性方程求解"></a>5.2 非线性方程求解</h2><p>非线性方程组通常很难求其解析解，更多的是通过数值分析求其近似值。</p>
<h3 id="5-2-1-非线性方程数值求解基本原理"><a href="#5-2-1-非线性方程数值求解基本原理" class="headerlink" title="5.2.1 非线性方程数值求解基本原理"></a>5.2.1 非线性方程数值求解基本原理</h3><p>牛顿算法……</p>
<ul>
<li>1.solve 命令求解非线性方程</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Matlab/Matlab-矩阵和数组运算</title>
    <url>/2020/03/31/Matlab/Matlab-%E7%9F%A9%E9%98%B5%E5%92%8C%E6%95%B0%E7%BB%84%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="Matlab-矩阵和数组运算"><a href="#Matlab-矩阵和数组运算" class="headerlink" title="Matlab-矩阵和数组运算"></a>Matlab-矩阵和数组运算</h1><p>矩阵运算有明确而严格的数学规则，矩阵运算规则是按照线性代数运算法则定义的；<br>数组运算是按照数组的元素逐个进行的。</p>
<h2 id="1-矩阵运算的函数"><a href="#1-矩阵运算的函数" class="headerlink" title="1 矩阵运算的函数"></a>1 矩阵运算的函数</h2><ul>
<li>det()</li>
<li>rank()</li>
<li>inv()</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-类的抽象和封装</title>
    <url>/2020/03/31/Java/Java-%E7%B1%BB%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%92%8C%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="类的抽象和封装"><a href="#类的抽象和封装" class="headerlink" title="类的抽象和封装"></a>类的抽象和封装</h1><p>要点提示： 类的抽象是指将类的实现和类的使用分离开，实现的细节被封装并且对用户隐藏，这被称为类的封装</p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul>
<li><p>类的合约：<br>  从类外可以访问的方法和数据域的集合以及预期这些成员如何行为的描述，合称为“类的合约”</p>
</li>
<li><p>类的封装：<br>  实现的细节经过封装，对用户隐藏起来，这称为类的封装。</p>
</li>
<li><p>抽象数据类型： 类也被称为是一种抽象数据类型</p>
<h2 id="形象比喻"><a href="#形象比喻" class="headerlink" title="形象比喻"></a>形象比喻</h2><p>类的实现就像是一个对客户隐藏的黑匣子。<br>客户通过类的合约使用该类</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-向方法传递对象参数</title>
    <url>/2020/03/28/Java/Java-%E5%90%91%E6%96%B9%E6%B3%95%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Java-向方法传递对象参数"><a href="#Java-向方法传递对象参数" class="headerlink" title="Java-向方法传递对象参数"></a>Java-向方法传递对象参数</h1><h2 id="提示：给方法传递一个对象，是将对象的引用传递给方法"><a href="#提示：给方法传递一个对象，是将对象的引用传递给方法" class="headerlink" title="提示：给方法传递一个对象，是将对象的引用传递给方法"></a>提示：给方法传递一个对象，是将对象的引用传递给方法</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>java 只用一个参数传递方式:值传递。</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-对象数组</title>
    <url>/2020/03/28/Java/Java-%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="Java-对象数组"><a href="#Java-对象数组" class="headerlink" title="Java-对象数组"></a>Java-对象数组</h1><h2 id="要点提示：数组既可以存储基本类型值，也可以存储对象。"><a href="#要点提示：数组既可以存储基本类型值，也可以存储对象。" class="headerlink" title="要点提示：数组既可以存储基本类型值，也可以存储对象。"></a>要点提示：数组既可以存储基本类型值，也可以存储对象。</h2><h2 id="创建对象数组"><a href="#创建对象数组" class="headerlink" title="创建对象数组"></a>创建对象数组</h2><p>以下代码创建了10个Circle对象的数组<br>Circle[] circleArray= new Circle[10];</p>
<h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>为了给一个对象数组进行初始化，可以通过循环实现<br>示例代码:<br>for(int i =0; i &lt; circleArray.length; i++){<br>    circleArray[i] = new Circle();<br>} </p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>当使用new操作符创建对象数组后，这个数组中的每个元素都是默认值为null的引用变量。</p>
]]></content>
  </entry>
  <entry>
    <title>Java/Java-数据域封装</title>
    <url>/2020/03/28/Java/Java-%E6%95%B0%E6%8D%AE%E5%9F%9F%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="数据区封装"><a href="#数据区封装" class="headerlink" title="数据区封装"></a>数据区封装</h1><p>提示: 将数据域设为私有保护数据，并且使易于维护。</p>
<p>为了避免对数据域的直接修改，应该使用private修改符将数据域生命为私有的，这称为数据域封装(data field encapsulation).</p>
<h2 id="访问私有数据域"><a href="#访问私有数据域" class="headerlink" title="访问私有数据域"></a>访问私有数据域</h2><p>get(访问器)</p>
<h2 id="修改私有数据域"><a href="#修改私有数据域" class="headerlink" title="修改私有数据域"></a>修改私有数据域</h2><p>set(修改器)</p>
]]></content>
  </entry>
  <entry>
    <title>C/C结构体再学习</title>
    <url>/2020/03/26/C/C%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h1><h2 id="语句格式"><a href="#语句格式" class="headerlink" title="语句格式"></a>语句格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct tag&#123;</span><br><span class="line">    member-list</span><br><span class="line">     member-list</span><br><span class="line">      member-list</span><br><span class="line">      ...</span><br><span class="line">&#125; variable-list ;</span><br></pre></td></tr></table></figure>
<ul>
<li>tag:结构体标签</li>
<li>member-list：标准的变量定义。例如:int i; float j;</li>
<li>variable-list: 结构变量，定义在结构的末尾，最后一个分号之前，可以指定一个或者多个结构变量。</li>
</ul>
<h2 id="用法详解"><a href="#用法详解" class="headerlink" title="用法详解"></a>用法详解</h2><p><strong>一般情况下</strong><br>tag, member-list, variable-list这三部分至少要出现2个。<br><img src="media/15852388489634.jpg" alt="-w834"></p>
<p>结构体的成语可以包含其他结构体，也可以包含指向自己结构体类型的指针。而通常这种指针的应用是为了实现一些更高级的数据结构(如链表和树)。<br><img src="media/15852388708573.jpg" alt="-w827"></p>
<p>如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明。<br><img src="media/15852387316754.jpg" alt="-w808"></p>
<h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Books</span><br><span class="line">&#123;</span><br><span class="line">    char title[50];</span><br><span class="line">    char author[50];</span><br><span class="line">    char subject[100];</span><br><span class="line">    int book_id;</span><br><span class="line">&#125; book = &#123;&quot;结构体&quot;, &quot;nianchu&quot;, &quot;Programming&quot;, 123321&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">printf(&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;, book.title, book.author, book.subject, book.book_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><ul>
<li>成员访问运算符(.)</li>
<li>使用struct关键字来定义结构体类型的变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Books Book1;;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    /* Book1 详情*/</span><br><span class="line">    strcpy(Book1.title,&quot;Matlab程序设计&quot;);</span><br><span class="line">    strcpy(Book1.author,&quot;bowenki&quot;);</span><br><span class="line">    strcpy(Book1.subject,&quot;编程语言&quot;);</span><br><span class="line">    Book1.book_id = 123456;</span><br><span class="line">    </span><br><span class="line">    /* 输出Book1的详细信息*/</span><br><span class="line">    printf(&quot;These is information about Book1:\nTitle:%s\nAuthor:%s\nSubject:%s\nBook_id:%d&quot;, Book1.title, Book1.author,Book1.subject,Book1.book_id);</span><br></pre></td></tr></table></figure>
<h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Books &#123;</span><br><span class="line">    char title[50];</span><br><span class="line">    char author[50];</span><br><span class="line">    char subject[100];</span><br><span class="line">    int book_id;</span><br><span class="line">    </span><br><span class="line">&#125; book = &#123;&quot;C语言&quot;, &quot;niaochu.space&quot;,&quot;编程语言&quot;, 123&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void printStruct(struct Books book);</span><br><span class="line"> </span><br><span class="line">void printStruct(struct Books book)&#123;</span><br><span class="line">    printf(&quot;Title:%s\n&quot;,book.title);</span><br><span class="line">       printf(&quot;Author:%s\n&quot;,book.author);</span><br><span class="line">        printf(&quot;Subject:%s\n&quot;,book.subject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    struct Books Book1;</span><br><span class="line">    </span><br><span class="line">    strcpy(Book1.title,&quot;Matlab程序设计&quot;);</span><br><span class="line">    strcpy(Book1.author,&quot;bowenki&quot;);</span><br><span class="line">    strcpy(Book1.subject,&quot;编程语言&quot;);</span><br><span class="line">    Book1.book_id = 123456;</span><br><span class="line">    printStruct(Book1);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2>为了使用指向该结构的指针访问结构的成员，必须使用-&gt;运算符号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    struct Books *pointBook;</span><br><span class="line">    struct Books Book2;</span><br><span class="line">    pointBook = &amp; Book2;</span><br><span class="line">    </span><br><span class="line">    /* 给Book2初始化*/</span><br><span class="line">    strcpy(pointBook -&gt; title, &quot;我真的要疯了&quot;);</span><br><span class="line">    strcpy(pointBook -&gt; author,&quot;我太难了&quot;);</span><br><span class="line">    strcpy(pointBook -&gt; subject, &quot;神啊，救救我吧&quot;);</span><br><span class="line">    </span><br><span class="line">    printStruct(Book2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h3><h4 id="前情提示："><a href="#前情提示：" class="headerlink" title="前情提示："></a>前情提示：</h4>  有些信息在存储中，并不需要占用一个完整的字符，而只需要占用几个或一个二进制位。这时候，可以使用位域。<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><ul>
<li>用1位二进位存放一个开关变量，只有0和1两种状态</li>
<li>读取外部文件格式– 可以读取非标准的文件格式。例如：9位的整数<h4 id="位域的定义和位域变量的说明"><a href="#位域的定义和位域变量的说明" class="headerlink" title="位域的定义和位域变量的说明"></a>位域的定义和位域变量的说明</h4>位域定义和结构体定义相仿：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct 位域结构名</span><br><span class="line">&#123;</span><br><span class="line">位域列表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其中位域列表的形式为：<br>类型说明符 位域名： 位域长度<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct bs&#123;</span><br><span class="line">    int a:8;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    </span><br><span class="line">&#125; data;</span><br></pre></td></tr></table></figure>
<p>对于位域的几点说明：</p>
<ul>
<li>一个位域存储在同一个字节中，如一个字节中所剩余空间不够存放另一个位域时，则会从下一个单元起存放该位域。也可以有意使某位域从下一单元开始：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct bs&#123;</span><br><span class="line">    unsigned a:4;</span><br><span class="line">    unsigned  : 4; /* 空域 */</span><br><span class="line">    unsigned b:4;  /* 从下一单元开始存放 */</span><br><span class="line">    unsigned c : 4;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>由于位于不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。</li>
<li>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。</li>
</ul>
<p><strong>* 位域在本质上就是一种结构体类型，但是其成员是按二进制分配的。 *</strong></p>
<h4 id="位域的使用"><a href="#位域的使用" class="headerlink" title="位域的使用"></a>位域的使用</h4><p>位域的使用和结构体相同，存在下面两种方法：</p>
<ul>
<li>位域变量名.位域名</li>
<li>位域变量名 -&gt; 位域名</li>
</ul>
<p>位域使用的实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    struct bs&#123;</span><br><span class="line">        unsigned a:1;</span><br><span class="line">        unsigned b: 3;</span><br><span class="line">        unsigned c : 4;</span><br><span class="line">        </span><br><span class="line">    &#125;bit, *pbit;</span><br><span class="line">    </span><br><span class="line">    bit.a = 1;</span><br><span class="line">    bit.b = 7;</span><br><span class="line">    bit.c 15;</span><br><span class="line">    printf(&quot;%d,%d,%d,\n&quot;,bit.a, bit.b, bit.c );</span><br><span class="line">    pbit = &amp; bit;</span><br><span class="line">    pbit -&gt; a = 0;</span><br><span class="line">    pbit -&gt; b = 0;</span><br><span class="line">    pbit -&gt; a = 0;</span><br><span class="line">    pbit -&gt; b&amp;3;</span><br><span class="line">    pbit -&gt; c|=1;</span><br><span class="line">     printf(&quot;%d,%d,%d,\n&quot;,pbit-&gt;a, pbit-&gt;b, pbit-&gt;c );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Matlab/TestError</title>
    <url>/2020/03/24/Matlab/TestError/</url>
    <content><![CDATA[<h1 id="TestError"><a href="#TestError" class="headerlink" title="TestError"></a>TestError</h1><h2 id="实验四-程序设计"><a href="#实验四-程序设计" class="headerlink" title="实验四 程序设计"></a>实验四 程序设计</h2><ul>
<li>1<br><img src="media/15856431299967.jpg" alt="-w1184"><br>分析：没有仔细审题，[1,2]是函数ftest的输入，但不是f1的输入。</li>
<li>2 </li>
<li><img src="media/15856431642897.jpg" alt="-w1195"><br>分析：在以下情况下，不重复声明则会出错：<br>  当子函数中有和全局变量A相同的变量名时，不重复声明时A的值是子函数中局部变量A的值，而不是全局变量A的值。<br>  因而，为了m文件的安全与正常运行，在子函数中需要使用全局变量A时，最好通过重复声明。<h2 id="实验五-符号计算"><a href="#实验五-符号计算" class="headerlink" title="实验五 符号计算"></a>实验五 符号计算</h2><ul>
<li>1.在desolve()函数中，若没有指定变量，则默认变量为t</li>
<li><ol start="2">
<li>利用符号计算实现方程求解的函数是()</li>
</ol>
<ul>
<li>roots</li>
<li>solve</li>
<li>dsolve</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="实验七"><a href="#实验七" class="headerlink" title="实验七"></a>实验七</h2><ol>
<li><p><img src="media/15874576536120.jpg" alt="-w1189"></p>
<p>. <img src="media/15874576901987.jpg" alt="-w1189"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java对象和类</title>
    <url>/2020/03/19/Java/Java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h1><p>面向对象程序设计，它会有助于更有效地开发GUI(图形用户界面)和大型软件系统。</p>
<h2 id="为对象定义类"><a href="#为对象定义类" class="headerlink" title="为对象定义类"></a>为对象定义类</h2><p>对象object</p>
<ul>
<li>状态state： 是由具有当前值的数据域来表示的。例如： 圆对象具有一个数据域radius</li>
<li>行为behavior：是由方法定义的</li>
</ul>
<h2 id="常见类："><a href="#常见类：" class="headerlink" title="常见类："></a>常见类：</h2><p>Date(long)：<br>    - Date类接受一个long参数。作为自从1970年1月1日0点开始的流逝时间<br>    - 这个可以省略。省略时，默认为输出当前时间。<br>    - 具体用法如下：<br>    · 创建Date类<br>    Date date = new Date(l); //<br>    date.setTime(l);// 这行命令可用于修改流逝时间</p>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>如果想让一个类的所有实例共享数据，就要使用静态变量，也称为类变量。<br>静态变量将变量值存储在一个公共的内存地址。因为它是公共的地址，所以如果某一个对象修改了静态变量的值，那么同一个类中的所有对象都会收到影响。</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>无须创建类的实例就可以调用静态方法。</p>
<p>实例方法和实例变量都是属于实例的，所有它们在实例创建之后才能使用。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab/Matlab揭秘</title>
    <url>/2020/03/16/Matlab/Matlab%E6%8F%AD%E7%A7%98/</url>
    <content><![CDATA[<h1 id="Matlab揭秘"><a href="#Matlab揭秘" class="headerlink" title="Matlab揭秘"></a>Matlab揭秘</h1><h2 id="Matlab环境"><a href="#Matlab环境" class="headerlink" title="Matlab环境"></a>Matlab环境</h2><h3 id="基本数学定义式"><a href="#基本数学定义式" class="headerlink" title="基本数学定义式"></a>基本数学定义式</h3><ul>
<li><p>圆周率：pi</p>
</li>
<li><p>e的a次方：exp(a)</p>
</li>
<li><p>平方根sqrt()</p>
</li>
<li><p>得到x的自然对数:log(x)</p>
</li>
<li><p>以10为底的对数：log10(x)</p>
</li>
<li><p>反三角函数：在三角函数前面加上a：atan,acos</p>
</li>
<li><p>复数</p>
<ul>
<li>-1的平方根定义为：<br><img src="media/15843183175347.jpg" alt=""></li>
</ul>
</li>
<li><p>计算a的b次方：<br>  a^b</p>
</li>
<li><p>让计算的结果以有理数的形式显示<br>  format rat<br>  2 / 5</p>
<h1 id="向量与矩阵"><a href="#向量与矩阵" class="headerlink" title="向量与矩阵"></a>向量与矩阵</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="列向量："><a href="#列向量：" class="headerlink" title="列向量："></a>列向量：</h3></li>
<li><p>a = [2; 1; 4]</p>
</li>
<li><p>对列向量进行数量乘法：<br>  c = 3;<br>  b = a * 3;</p>
<h3 id="行向量"><a href="#行向量" class="headerlink" title="行向量"></a>行向量</h3></li>
<li><p>用空格分隔或者逗号分隔</p>
<h3 id="对列向量和行向量进行转置转换"><a href="#对列向量和行向量进行转置转换" class="headerlink" title="对列向量和行向量进行转置转换"></a>对列向量和行向量进行转置转换</h3></li>
<li><p>用’表示转置操作</p>
</li>
<li><p>将列向量转置为行向量：<br>a = [2; 1; 4];<br>b = a’</p>
</li>
</ul>
<h3 id="使用两个向量进行相加或者相减来创建第三个向量"><a href="#使用两个向量进行相加或者相减来创建第三个向量" class="headerlink" title="使用两个向量进行相加或者相减来创建第三个向量"></a>使用两个向量进行相加或者相减来创建第三个向量</h3><ul>
<li>前提：<br>两个向量之间必须类型相同，长度相同</li>
</ul>
<h3 id="从已存存变量创建大变量"><a href="#从已存存变量创建大变量" class="headerlink" title="从已存存变量创建大变量"></a>从已存存变量创建大变量</h3><pre><code>- 前提：
两个向量之间必须类型相同，长度相同</code></pre><h3 id="创建等差元素向量"><a href="#创建等差元素向量" class="headerlink" title="创建等差元素向量"></a>创建等差元素向量</h3><ul>
<li>a<a href="其中b是步长">a:b:c</a></li>
<li>使用linspace(自动确认元素之间的增量)<ul>
<li>linspace(a,b) 默认创建100个a到b之间的等差向量</li>
<li>linspace(a,b,n) 创建n个    <h3 id="特征化向量"><a href="#特征化向量" class="headerlink" title="特征化向量"></a>特征化向量</h3></li>
</ul>
</li>
<li>length： 返回向量中包含元素的个数<br>  即可应用到行向量和列向量，也可以应用到矩阵</li>
<li>max 或者 min 命令可以找出向量中最大值和最小值</li>
<li>sum：求和</li>
<li>求向量的模：<ul>
<li>(没有复数)先使用对每一元素使用(.*)，然后sum求和，最后sqrt开方</li>
<li>(有复数时)：<br>  &amp; 需要先计算出该向量的共轭复数根<br>  &amp; 用conj来计算向量的共轭复数向量</li>
</ul>
</li>
<li>abs返回绝对值</li>
</ul>
<h3 id="向量的点乘和叉乘-数量积和向量积"><a href="#向量的点乘和叉乘-数量积和向量积" class="headerlink" title="向量的点乘和叉乘(数量积和向量积)"></a>向量的点乘和叉乘(数量积和向量积)</h3><pre><code>$ 点乘
    - dot(a,b)计算a、b两向量的点乘
    - 用点乘来计算向量的模： sqrt(dot(a,a))
    - 对于有复数元素的向量，dot操作也能正常计算
$ 叉乘
    - 要计算叉乘，这两个向量必须是三维的 
    - 使用cross(a,b)来计算叉乘</code></pre><h2 id="矩阵基本操作"><a href="#矩阵基本操作" class="headerlink" title="矩阵基本操作"></a>矩阵基本操作</h2><h2 id="第三章-绘图与图形"><a href="#第三章-绘图与图形" class="headerlink" title="第三章 绘图与图形"></a>第三章 绘图与图形</h2><h3 id="2D绘图基础"><a href="#2D绘图基础" class="headerlink" title="2D绘图基础"></a>2D绘图基础</h3><ul>
<li>plot</li>
<li>xlabel(‘name’),ylabel(‘name’) :设置坐标轴的标签<br>  例如：plot(x, y), xlabel(‘x’), ylabel(‘cos(x)’);</li>
<li></li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Python零散的知识</title>
    <url>/2020/03/15/Python/Python%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Python零散知识"><a href="#Python零散知识" class="headerlink" title="Python零散知识"></a>Python零散知识</h1><h2 id="range范围问题"><a href="#range范围问题" class="headerlink" title="range范围问题"></a>range范围问题</h2><ul>
<li>range(1,10):包含1，但是不包含10</li>
</ul>
<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>指数 **<br>取整 // </p>
<h2 id="sys-exit"><a href="#sys-exit" class="headerlink" title="sys.exit()"></a>sys.exit()</h2><p>使用sys.exit()可以提前结束程序，使用时先导入sys</p>
<h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><p>与java中null相对应的是none</p>
<h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>print的返回值是None</p>
<p>print默认换行，想要不换行。使用如下：<br>print(‘不换行’.end=’’)</p>
<p>类似地，使用sep关键字参数，可以替换默认的分割字符串(空格)</p>
<h2 id="global"><a href="#global" class="headerlink" title="global"></a>global</h2><p>Python中可以使用global声明一个全局变量</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>错误可以由try和except语句来处理。那些可能出错的语句被放在try子句中。如果发生错误，程序执行就转到接下来的except子句开始处。</p>
<p><strong><em>需要注意的是</em></strong><br>，一旦执行跳到except子句的代码，就不会回到try子句。它会继续照常向下执行。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表是一个值，它包含多个字构成的序列。术语“列表”指的是列表本身(它作为一个值，可以保存在变量中，或者传递给函数，而不是指列表之内的那些值)</p>
<ul>
<li><p>切片<br>包含第一个下标但是不包括第二个下标</p>
</li>
<li><p>列表连接和复制<br>像字符串一样，+用于列表连接，*用于列表复制</p>
</li>
<li><p>del语句用于删除</p>
</li>
<li><p>多重赋值技巧<br><img src="media/15873694897724.jpg" alt="-w661"></p>
</li>
<li><p>用index()方法在列表中查找值<br>返回下标</p>
</li>
<li><p>append和insert<br>前者将值添加到末尾，insert添加到指定位置</p>
</li>
<li><p>remove方法从列表中删除值<br>如果该值在列表中出现多次，只删除第一次出现的值</p>
</li>
<li><p>逆向排序<br>spam.sort(reverse=True)<br>其中spam是一个列表</p>
</li>
</ul>
<p><strong>注意</strong><br>不能对既有数字又有字符串值的列表排序</p>
<p>sort方法对字符串排序是，使用的是“ASCII”字符顺序</p>
<ul>
<li>列表和字符串的区别<br>列表是可变的，字符串是不可变的。<h2 id="元组和列表的区别"><a href="#元组和列表的区别" class="headerlink" title="元组和列表的区别"></a>元组和列表的区别</h2>元组符号： ()<br>元组也是不可变的。<br>元组不能让他的值被修改、添加和删除</li>
</ul>
<p><strong>注意</strong><br>如果元组中只有一个值，你可以在括号内该值后面跟上一个逗号，表明这种情况，否则，Python会认为你只是在一个普通括号内输入了一个值</p>
<h2 id="受用list-和tuple-函数来转换类型"><a href="#受用list-和tuple-函数来转换类型" class="headerlink" title="受用list()和tuple()函数来转换类型"></a>受用list()和tuple()函数来转换类型</h2><p>前者是列表，后者是元组</p>
<h2 id="列表的引用"><a href="#列表的引用" class="headerlink" title="列表的引用"></a>列表的引用</h2><p><img src="media/15873706020062.jpg" alt="-w623"></p>
<h2 id="续行符-‘-’"><a href="#续行符-‘-’" class="headerlink" title="续行符 ‘\’"></a>续行符 ‘\’</h2><p>在行末使用\可以将一条指令写成多行</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab的矩阵分析与处理</title>
    <url>/2020/03/15/Matlab/Matlab%E7%9F%A9%E9%98%B5%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="矩阵的分析与处理"><a href="#矩阵的分析与处理" class="headerlink" title="矩阵的分析与处理"></a>矩阵的分析与处理</h1><h2 id="矩阵的行列式"><a href="#矩阵的行列式" class="headerlink" title="矩阵的行列式"></a>矩阵的行列式</h2><p>在Matlab中，求方阵A的行列式值的函数是det函数；<br>调用格式：<br>    B=det(A)<br>    (其中A是矩阵，B是行列式值的结果)</p>
<h2 id="矩阵的秩与迹"><a href="#矩阵的秩与迹" class="headerlink" title="矩阵的秩与迹"></a>矩阵的秩与迹</h2><h3 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h3><p>B=rank(A)</p>
<h3 id="矩阵的迹"><a href="#矩阵的迹" class="headerlink" title="矩阵的迹"></a>矩阵的迹</h3><p>B=trace(A)</p>
<h2 id="矩阵的逆与伪逆"><a href="#矩阵的逆与伪逆" class="headerlink" title="矩阵的逆与伪逆"></a>矩阵的逆与伪逆</h2><h3 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h3><p>B=inv(A)</p>
<h3 id="矩阵的伪逆"><a href="#矩阵的伪逆" class="headerlink" title="矩阵的伪逆"></a>矩阵的伪逆</h3><p>B=pinv(A)</p>
<ul>
<li>说明：如果矩阵A不是一个方阵，或者A是一个非满秩的方阵时，矩阵A没有逆 矩阵，但可以找到一个与A的转置矩阵A T 同型的矩阵B，使得 AꞏBꞏA=A BꞏAꞏB=B<br> 此时称矩阵B为矩阵A的伪逆，也称为广义逆矩阵。</li>
</ul>
<h2 id="线性方程的求解"><a href="#线性方程的求解" class="headerlink" title="线性方程的求解"></a>线性方程的求解</h2><p>看图：<br><img src="media/15842848727792.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab/Test</title>
    <url>/2020/03/15/Matlab/Test/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% Test 1</span><br><span class="line">% (1)生成一个空矩阵A</span><br><span class="line">A = []</span><br><span class="line">% 对A进行赋值，取值为5行5列的单位矩阵</span><br><span class="line">A = eye(5)</span><br><span class="line">% 将矩阵A存储在硬盘上的Matlab数据文件A.mat中</span><br><span class="line">save A.mat A</span><br><span class="line"></span><br><span class="line">%(2) 利用函数xlsread读取硬盘上电子表格</span><br><span class="line">% data.xls中的第一个工作表区域中</span><br><span class="line">% A2:C5的区域的数据(自行敲入)，并赋值给矩阵</span><br><span class="line">% B，然后利用命令保存矩阵B到硬盘上的B.mat文件中。</span><br><span class="line"></span><br><span class="line">B =xlsread(&apos;data1.xlsx&apos;, 1,  &apos;A2:C5&apos;)</span><br><span class="line">save B.mat B</span><br><span class="line"></span><br><span class="line">% (3) 利用load实现将数据文件A.mat 和 B.mat</span><br><span class="line">% 载入到内存中，然后将A、B两个变量保存到MATLAB数据文件AB.mat中</span><br><span class="line">load A.mat</span><br><span class="line">load B.mat</span><br><span class="line">save AB.mat A B</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Test 3</p>
<ul>
<li>将大些字母转换为小写的两种方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 创建由数值和大小写字母构成的字符</span><br><span class="line">str = &apos;gfAFHSKFHsag354346&apos;</span><br><span class="line">% 将大写字母转换为小写字母</span><br><span class="line">str = lower(str) % first</span><br><span class="line"></span><br><span class="line">% second</span><br><span class="line">% upper = find(str &gt;=&apos;A&apos; &amp; str &lt;= &apos;Z&apos;);</span><br><span class="line">% str(upper) = str(upper) + 32;</span><br><span class="line">% new = char(str)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 创建由数值和大小写字母构成的字符</span><br><span class="line">str = &apos;gfAFHSKFHsag354346&apos;</span><br><span class="line">% 将大写字母转换为小写字母</span><br><span class="line">str = lower(str)</span><br><span class="line"></span><br><span class="line">upper = find(str &gt;=&apos;0&apos; &amp; str &lt;= &apos;9&apos;);</span><br><span class="line">str(upper) = 0;</span><br><span class="line">str = char(str);</span><br><span class="line">% 去掉尾部的空格</span><br><span class="line">str = deblank(str)</span><br><span class="line"></span><br><span class="line">% 在str的前面添加&apos;New strings: &apos;形成一个新的字符串</span><br><span class="line">add = &apos;New strings: &apos;;</span><br><span class="line">newStr = ([add, str])</span><br><span class="line">% 统计字符串的字符数</span><br><span class="line">strSize = size(newStr)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Test 4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 1 结构数组</span><br><span class="line">course=struct(&apos;courseName&apos;,&#123;&apos;Matlab程序设计&apos;,&apos;Java程序设计&apos;,&apos;线性代数&apos;,&apos;高等数学&apos;,&apos;大学物理&apos;&#125;,&apos;score&apos;,&#123;2,2,2,2,2&#125;,&apos;degreeOfDifficulty&apos;,&#123;&apos;difficult&apos;,&apos;difficult&apos;,&apos;difficult&apos;,&apos;medium&apos;,&apos;difficult&apos;&#125;)</span><br><span class="line">% 新添教师姓名</span><br><span class="line">course(1).teacherName = &apos;肖老师&apos;;</span><br><span class="line">course(2).teacherName = &apos;龙老师&apos;;</span><br><span class="line">course(3).teacherName = &apos;全老师&apos;;</span><br><span class="line">course(4).teacherName = &apos;宋老师&apos;;</span><br><span class="line">course(5).teacherName = &apos;王老师&apos;;</span><br><span class="line">% 显示course</span><br><span class="line">course</span><br><span class="line">% 删除难易信息</span><br><span class="line">course(1).degreeOfDifficulty = [];</span><br><span class="line">course(2).degreeOfDifficulty = [];</span><br><span class="line">course(3).degreeOfDifficulty = [];</span><br><span class="line">course(4).degreeOfDifficulty = [];</span><br><span class="line">course(5).degreeOfDifficulty = [];</span><br><span class="line">% 显示course</span><br><span class="line">course</span><br><span class="line"></span><br><span class="line">% 2 创建元胞数组</span><br><span class="line"></span><br><span class="line">course=cell(6,3);</span><br><span class="line">% 设置第一栏</span><br><span class="line">course(1,1)=&#123;&apos;courseName&apos;&#125;;</span><br><span class="line">course(1,2)=&#123;&apos;score&apos;&#125;;</span><br><span class="line">course(1,3)=&#123;&apos;degreeOfDifficulty&apos;&#125;;</span><br><span class="line"></span><br><span class="line">% 填写courseName信息</span><br><span class="line">course(2,1)=&#123;&apos;Matlab程序设计&apos;&#125;;</span><br><span class="line">course(3,1)=&#123;&apos;Java程序设计&apos;&#125;;</span><br><span class="line">course(4,1)=&#123;&apos;线性代数&apos;&#125;;</span><br><span class="line">course(5,1)=&#123;&apos;高等数学&apos;&#125;;</span><br><span class="line">course(6,1)=&#123;&apos;大学物理&apos;&#125;;</span><br><span class="line"></span><br><span class="line">% 填写score信息</span><br><span class="line">course(2,2)=&#123;2&#125;;</span><br><span class="line">course(3,2)=&#123;2&#125;;</span><br><span class="line">course(4,2)=&#123;2&#125;;</span><br><span class="line">course(5,2)=&#123;2&#125;;</span><br><span class="line">course(6,2)=&#123;2&#125;;</span><br><span class="line"></span><br><span class="line">% 填写degreeOfDifficulty信息</span><br><span class="line">course(2,3)=&#123;&apos;difficult&apos;&#125;;</span><br><span class="line">course(3,3)=&#123;&apos;difficult&apos;&#125;;</span><br><span class="line">course(4,3)=&#123;&apos;difficult&apos;&#125;;</span><br><span class="line">course(5,3)=&#123;&apos;medium&apos;&#125;;</span><br><span class="line">course(6,3)=&#123;&apos;difficult&apos;&#125;;</span><br><span class="line"></span><br><span class="line">% 添加第四个信息教师姓名</span><br><span class="line">course(1,4)=&#123;&apos;teacherName&apos;&#125;;</span><br><span class="line">course(2,4) = &#123;&apos;肖老师&apos;&#125;;</span><br><span class="line">course(3,4)=&#123;&apos;龙老师&apos;&#125;;</span><br><span class="line">course(4,4)=&#123;&apos;全老师&apos;&#125;;</span><br><span class="line">course(5,4)=&#123;&apos;宋老师&apos;&#125;;</span><br><span class="line">course(6,4)=&#123;&apos;王老师&apos;&#125;;</span><br><span class="line"></span><br><span class="line">% 删除难易程度信息</span><br><span class="line">course(1,3)=&#123;[]&#125;;</span><br><span class="line">course(2,3)=&#123;[]&#125;;</span><br><span class="line">course(3,3)=&#123;[]&#125;;</span><br><span class="line">course(4,3)=&#123;[]&#125;;</span><br><span class="line">course(5,3)=&#123;[]&#125;;</span><br><span class="line">course(6,3)=&#123;[]&#125;;</span><br><span class="line"></span><br><span class="line">% 显示course</span><br><span class="line">course</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test 5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 创建系数矩阵</span><br><span class="line">numbers=[1 -1 1;2 1 1;1 -1 -2];</span><br><span class="line"></span><br><span class="line">% 行列式</span><br><span class="line">A=det(numbers)</span><br><span class="line"></span><br><span class="line">% 迹</span><br><span class="line">B=trace(numbers)</span><br><span class="line"></span><br><span class="line">% 秩</span><br><span class="line">C=rank(numbers)</span><br><span class="line"></span><br><span class="line">% 逆</span><br><span class="line">D=inv(numbers)</span><br><span class="line"></span><br><span class="line">% 求解方程组</span><br><span class="line">b=[1 2 4];</span><br><span class="line">x=inv(A)*b</span><br></pre></td></tr></table></figure>
</li>
<li><p>Test 6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% Test 6</span><br><span class="line">A =  [-10000:10000];</span><br><span class="line">num=find(A&gt;1000 &amp; mod(A,17)==0);</span><br><span class="line">Size=size(A(num))</span><br><span class="line">All=A(num);</span><br><span class="line">B=All(end-9:end)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 简答与编程三 数据可视化</span><br><span class="line">% Test 1</span><br><span class="line">% 分别绘图</span><br><span class="line">% sin(x)</span><br><span class="line">x1=linspace(0,4*pi,2000);</span><br><span class="line">plot(x1,sin(x1))</span><br><span class="line"></span><br><span class="line">% cos(x)</span><br><span class="line">x2=linspace(-pi,3*pi,2000);</span><br><span class="line">plot(x2,cos(x2))</span><br><span class="line"></span><br><span class="line">% tan(x)</span><br><span class="line">x3=linspace(0,4*pi,2000);</span><br><span class="line">plot(x3,tan(x3))</span><br><span class="line"></span><br><span class="line">% 绘制在一幅图中</span><br><span class="line">subplot(131);</span><br><span class="line">plot(x1,sin(x1))</span><br><span class="line">subplot(132);</span><br><span class="line">plot(x2,cos(x2))</span><br><span class="line">subplot(133);</span><br><span class="line">plot(x3,tan(x3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% Test 2</span><br><span class="line">% sin(x)</span><br><span class="line">x1=linspace(0,4*pi,2000);</span><br><span class="line">plot(x1,sin(x1),&apos;k&apos;)</span><br><span class="line">axis auto;</span><br><span class="line">hold on;</span><br><span class="line"></span><br><span class="line">% cos(x)</span><br><span class="line">x2=linspace(-pi,3*pi,2000);</span><br><span class="line">plot(x2,cos(x2),&apos;--g*&apos;,&apos;linewidth&apos;,3)</span><br><span class="line">hold on;</span><br><span class="line"></span><br><span class="line">% tan(x)</span><br><span class="line">x3=linspace(0,4*pi,2000);</span><br><span class="line">plot(x3,tan(x3),&apos;-.ro&apos;,&apos;linewidth&apos;,2);</span><br><span class="line"></span><br><span class="line">% 图例标注</span><br><span class="line">legend(&apos;sin(x)&apos;,&apos;cos(x)&apos;,&apos;tan(x)&apos;,&apos;4&apos;);</span><br><span class="line"></span><br><span class="line">% Test3</span><br><span class="line">x=linspace(-3,3,49);</span><br><span class="line">y=linspace(-3,3,49);</span><br><span class="line">[xx,yy]=meshgrid(x,y); %确定作图的范围</span><br><span class="line">zz=xx.^2/8-yy.^2/3; </span><br><span class="line"></span><br><span class="line">% 使用mesh函数</span><br><span class="line">mesh(xx,yy,zz)</span><br><span class="line"></span><br><span class="line">% 使用surf函数</span><br><span class="line">surf(xx,yy,zz)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% Test4</span><br><span class="line"></span><br><span class="line">% sin(x)</span><br><span class="line">x1=linspace(0,4*pi,2000);</span><br><span class="line">p1=plot(x1,sin(x1));</span><br><span class="line">hold on;</span><br><span class="line">% cos(x)</span><br><span class="line">x2=linspace(-pi,3*pi,2000);</span><br><span class="line">p2=plot(x2,cos(x2));</span><br><span class="line"></span><br><span class="line">% 获取图形句柄并修改曲线属性</span><br><span class="line">h1=findobj(p1);</span><br><span class="line">set(h1,&apos;color&apos;,&apos;r&apos;)</span><br><span class="line">set(h1,&apos;linewidth&apos;,2)</span><br><span class="line">h2=findobj(p2);</span><br><span class="line">set(h2,&apos;color&apos;,&apos;g&apos;,&apos;linestyle&apos;,&apos;--&apos;)</span><br><span class="line"></span><br><span class="line">% 简答与编程五 程序设计</span><br><span class="line">% Test 01</span><br><span class="line">% swith </span><br><span class="line">score1 = input(&apos;Please enter your score1:&apos;);</span><br><span class="line">switch score1</span><br><span class="line">    case num2cell(90:100)</span><br><span class="line">        disp(&apos;A&apos;)</span><br><span class="line">    case num2cell(80:89)</span><br><span class="line">        disp(&apos;B&apos;)</span><br><span class="line">    case num2cell(70:79)</span><br><span class="line">        disp(&apos;C&apos;)        </span><br><span class="line">    case num2cell(60:69)</span><br><span class="line">        disp(&apos;D&apos;)</span><br><span class="line">    case num2cell(0:59)</span><br><span class="line">        disp(&apos;E&apos;)</span><br><span class="line">    otherwise</span><br><span class="line">        error(&apos;Inputting Error!&apos;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% if</span><br><span class="line">score2 = input(&apos;Please enter your score2:&apos;);</span><br><span class="line">if (score2 &gt;= 90 &amp; score2 &lt;= 100)</span><br><span class="line">        disp(&apos;A&apos;)</span><br><span class="line">elseif (score2 &gt;= 80 &amp; score2 &lt;= 89)</span><br><span class="line">        disp(&apos;B&apos;)</span><br><span class="line">elseif (score2 &gt;= 70 &amp; score2 &lt;= 79)</span><br><span class="line">       disp(&apos;C&apos;)        </span><br><span class="line">elseif (score2 &gt;= 60 &amp; score2 &lt;= 69)</span><br><span class="line">        disp(&apos;D&apos;)</span><br><span class="line">elseif (score2 &gt;= 0 &amp; score2 &lt;= 59)</span><br><span class="line">        disp(&apos;E&apos;)</span><br><span class="line">else</span><br><span class="line">        error(&apos;Inputting Error!&apos;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% Test 02 </span><br><span class="line">% 数值计算：计算出0-1000之间所有是4的倍数的整数的和</span><br><span class="line">% for循环</span><br><span class="line">s1=0;</span><br><span class="line">for i = 0:4:1000</span><br><span class="line">    s1=s1+i;</span><br><span class="line">   </span><br><span class="line">end</span><br><span class="line">s1</span><br><span class="line"></span><br><span class="line">% while 循环</span><br><span class="line">num=0;</span><br><span class="line">s2=0;</span><br><span class="line">while num&lt;=1000</span><br><span class="line">    s2=s2+num;</span><br><span class="line">    num=num+4;</span><br><span class="line">end</span><br><span class="line">s2</span><br><span class="line">% 不使用循环语句</span><br><span class="line">s3=sum(0:4:1000)</span><br><span class="line">% 显然s1,s2,s3的值都是相等的</span><br><span class="line"></span><br><span class="line">% 符号计算</span><br><span class="line">% 计算出 1+1/2^2+1/3^2+...+1/k^2+...的前10项和</span><br><span class="line"></span><br><span class="line">% for 循环</span><br><span class="line">s4=0;</span><br><span class="line">for j = 1:10</span><br><span class="line">    s4=s4+1/j^2;</span><br><span class="line">end</span><br><span class="line">s4</span><br><span class="line">% while 循环</span><br><span class="line">s5 = 0;</span><br><span class="line">num1=1;</span><br><span class="line">while num1&lt;=10</span><br><span class="line">    s5=s5+1/num1^2;</span><br><span class="line">    num1=num1+1;</span><br><span class="line">end</span><br><span class="line">s5</span><br><span class="line">% 不使用循环语句</span><br><span class="line">syms  k</span><br><span class="line">s6=symsum(1/k^2,1,10)</span><br><span class="line"></span><br><span class="line">% Test  02&apos;!!!!</span><br><span class="line">% for 循环</span><br><span class="line">s1= 0;</span><br><span class="line">for i = 0:10000001;</span><br><span class="line">    s1=s1+0.2^i;</span><br><span class="line">    </span><br><span class="line">end</span><br><span class="line">s1</span><br><span class="line"></span><br><span class="line">% while循环</span><br><span class="line">num=0;</span><br><span class="line">s2=0;</span><br><span class="line">while num&lt;=1000000</span><br><span class="line">    s2=s2+0.2^num;</span><br><span class="line">    num=num+1;</span><br><span class="line">end</span><br><span class="line">s2</span><br><span class="line"></span><br><span class="line">% 很显然s1和s2是相等的。</span><br><span class="line"></span><br><span class="line">% Test 03</span><br><span class="line">function [] = Test(varargin)</span><br><span class="line">% Test 给定不同的输入绘画出不同的图形</span><br><span class="line">% 当没有输入量时，画出单位圆</span><br><span class="line">% 当输入量是大于2的整数N时，绘制正N边形并在图片名中反映显示多边形的真实边数</span><br><span class="line">% 当输入量是&quot;非自然数数&quot;时，给出&quot;出错提示&quot;。</span><br><span class="line">% Author:雷博闻</span><br><span class="line">% Time: 2020/03/25</span><br><span class="line">if nargin == 0</span><br><span class="line">    angle=0:pi/360:2*pi;</span><br><span class="line">figure(1);</span><br><span class="line">plot(1*sin(angle),1*cos(angle));</span><br><span class="line">axis tight</span><br><span class="line">axis equal</span><br><span class="line"></span><br><span class="line">elseif nargin ==1</span><br><span class="line">    a = varargin&#123;1&#125;;</span><br><span class="line">    if a &gt; 2 &amp; rem(a,1)==0</span><br><span class="line">        pgon=nsidedpoly(a);</span><br><span class="line">        figure(1);</span><br><span class="line">        plot(pgon)</span><br><span class="line">        title([&apos;正&apos;,num2str(a),&apos;边形&apos;])</span><br><span class="line">        axis equal</span><br><span class="line">        axis tight</span><br><span class="line"></span><br><span class="line">    elseif a&lt;0 | (a&gt;=0 &amp; rem(a,1)~=0)</span><br><span class="line">        error(&apos;请输入一个自然数！&apos;)</span><br><span class="line">    else</span><br><span class="line">        error(&apos;超出范围&apos;)</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% Test 04</span><br><span class="line">n=[2:100];</span><br><span class="line">number=0;</span><br><span class="line">tem=0;</span><br><span class="line">sum=0;</span><br><span class="line">for i=1:length(n)-1</span><br><span class="line">        tem=n(i)*n(i+1)-1;</span><br><span class="line">        for j=2:floor(tem/2)</span><br><span class="line">            if rem(tem,j)~=0 </span><br><span class="line">                if j==floor(tem/2)</span><br><span class="line">                    disp([num2str(n(i)),&apos;和&apos;,num2str(n(i + 1)),&apos;是一对亲密数&apos;])</span><br><span class="line">                    number=number+1;</span><br><span class="line">                    sum=sum+tem;</span><br><span class="line">                end</span><br><span class="line">            else</span><br><span class="line">                break;</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">number</span><br><span class="line">sum</span><br><span class="line"></span><br><span class="line">%  简答与编程5 数值计算</span><br><span class="line">% Test1</span><br><span class="line">function [] =Test</span><br><span class="line">A = [27 6 -1;6 15 2;1 1 54];</span><br><span class="line">b = [85;5;110];</span><br><span class="line"></span><br><span class="line">% LU 分解法</span><br><span class="line">[L,U] = lu(A);</span><br><span class="line">X = U\(L\b)</span><br><span class="line"></span><br><span class="line">% 雅可比迭代法</span><br><span class="line">[x1,n1]=jacobi(A,b, [0;0;0],1.0e-3)</span><br><span class="line"></span><br><span class="line">% G-S迭代法</span><br><span class="line">[x2,n2]=gauseidel(A,b, [0;0;0],1.0e-3)</span><br><span class="line"></span><br><span class="line">function [y,n] = jacobi(A,b,x0,ep)</span><br><span class="line">% 雅可比迭代法算法</span><br><span class="line">D = diag(diag(A));</span><br><span class="line">L = -tril(A,-1);</span><br><span class="line">U=-triu(A,1);</span><br><span class="line">B=D\(L+U);</span><br><span class="line">f=D\b;</span><br><span class="line">y=B*x0+f;</span><br><span class="line">n=1;</span><br><span class="line">while norm(y-x0) &gt;= ep</span><br><span class="line">    x0=y;</span><br><span class="line">    y=B*x0+f;</span><br><span class="line">    n=n+1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function [y,n]=gauseidel(A,b,x0,ep)</span><br><span class="line">D = diag(diag(A));</span><br><span class="line">L = -tril(A,-1);</span><br><span class="line">U=-triu(A,1);</span><br><span class="line">B=(D-L)\U;</span><br><span class="line">f=(D-L)\b;</span><br><span class="line">y=B*x0+f;</span><br><span class="line">n=1;</span><br><span class="line">while norm(y-x0) &gt;= ep</span><br><span class="line">    x0=y;</span><br><span class="line">    y=B*x0+f;</span><br><span class="line">    n=n+1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% Test 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function [] = Test()</span><br><span class="line">% 主函数</span><br><span class="line">% solve 命令求解</span><br><span class="line">syms x</span><br><span class="line">answer=solve(x.^3 - 3*x+1);</span><br><span class="line">vpa(answer)</span><br><span class="line"></span><br><span class="line">% 实现逐步搜索法求方程的解</span><br><span class="line">tic</span><br><span class="line">X=StepSearch(-10,10,0.001,0.0001)</span><br><span class="line">toc</span><br><span class="line">% 实现二分法</span><br><span class="line">tic</span><br><span class="line"> [k1,x1,wuca1,yx1]=erfen(-2,-1,0.0001);</span><br><span class="line"> x1</span><br><span class="line">  [k2,x2,wuca2,yx2]=erfen(0,1,0.0001);</span><br><span class="line">  x2</span><br><span class="line">    [k3,x3,wuca3,yx3]=erfen(1,2,0.0001);</span><br><span class="line">    x3</span><br><span class="line">toc</span><br><span class="line"></span><br><span class="line">function y = funs(x)</span><br><span class="line"></span><br><span class="line">y = x.^3 - 3 * x + 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function r=StepSearch(a,b,h,tol)</span><br><span class="line">% 逐步搜索法算法</span><br><span class="line">X=a:h:b;n=(b-a)/h+1;m=0; </span><br><span class="line">Y=funs(X);</span><br><span class="line">X(n+1)=X(n);Y(n+1)=Y(n);</span><br><span class="line">k=2; </span><br><span class="line">    while(k&lt;=n)</span><br><span class="line">        sk=Y(k)*Y(k-1);</span><br><span class="line">        if sk&lt;=0</span><br><span class="line">            m=m+1;</span><br><span class="line">            if(abs(Y(k))&lt;abs(Y(k-1)))</span><br><span class="line">                r(m)=X(k);</span><br><span class="line">                k=k+1;</span><br><span class="line">            else</span><br><span class="line">                r(m)=X(k-1);</span><br><span class="line">            end</span><br><span class="line">        else</span><br><span class="line">            xielv=(Y(k+1)-Y(k))* (Y(k)-Y(k-1));</span><br><span class="line">            if (abs(Y(k))&lt;tol)&amp;( xielv&lt;=0)</span><br><span class="line">                m=m+1;r(m)=X(k);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">        k=k+1;    </span><br><span class="line">        </span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">function [k,x,wuca,yx]=erfen(a,b,abtol)</span><br><span class="line">     % 二分法算法</span><br><span class="line">     a(1)=a; b(1)=b; </span><br><span class="line"></span><br><span class="line">ya=funs(a(1)); yb=funs(b(1)); %程序中调用的fun.m为函数</span><br><span class="line"></span><br><span class="line">if ya* yb&gt;0</span><br><span class="line"></span><br><span class="line">disp(&apos;注意：ya*yb&gt;0,请重新调整区间端点a和b.&apos;), return</span><br><span class="line">end</span><br><span class="line">max1=-1+ceil((log(b-a)- log(abtol))/log(2)); %ceil是向正方向取整</span><br><span class="line">for k=1:max1+1</span><br><span class="line"></span><br><span class="line">    ya=funs(a); b; yb=funs(b); x=(a+b)/2;</span><br><span class="line"></span><br><span class="line">yx=funs(x); wuca=abs(b-a)/2; k=k-1;</span><br><span class="line">[k,a,b,x,wuca,ya,yb,yx];</span><br><span class="line"></span><br><span class="line">if yx == 0</span><br><span class="line">    a=x;b=x;</span><br><span class="line">elseif yb*yx&gt;0</span><br><span class="line">    b=x;yb=yx;</span><br><span class="line">else</span><br><span class="line">    a=x;ya=yx;</span><br><span class="line">    </span><br><span class="line">end</span><br><span class="line">if b-a&lt;abtol,return,end </span><br><span class="line">end</span><br><span class="line">k=max1;x;wuca;yx=funs(x);</span><br><span class="line"></span><br><span class="line">%  简答与编程5 数值计算</span><br><span class="line">% Test3 </span><br><span class="line">x=linspace(-5,5,10); % 已知数据点的x坐标</span><br><span class="line">y=1./(1+x.^2); % 已知数据点y坐标</span><br><span class="line">x0=linspace(-5,5,10); % 已知数据点x坐标</span><br><span class="line">y0=1./(1+x0.^2); % 已知数据点y坐标</span><br><span class="line">x1=linspace(-5,5,10);</span><br><span class="line">y1=interp1(x,y,x1,&apos;linear&apos;); % 线性插值</span><br><span class="line">y2=interp1(x,y,x1,&apos;spline&apos;); % 三次样条插值</span><br><span class="line">y3=interp1(x,y,x1,&apos;pchip&apos;); % 三次Hermite插值</span><br><span class="line">y4=interp1(x,y,x1,&apos;nearest&apos;); % 最邻近插值</span><br><span class="line"></span><br><span class="line">% 作图</span><br><span class="line">figure(1)</span><br><span class="line">plot(x0,y0,&apos;-&apos;,x,y,&apos;og&apos;,x1,y1,&apos;*r&apos;);</span><br><span class="line">legend(&apos;被插值曲线&apos;,&apos;已知离散数据点&apos;,&apos;线性插值数据点 &apos;,&apos;location&apos;,&apos;NorthWest&apos;);</span><br><span class="line">title(&apos;interp with linear&apos;)</span><br><span class="line">figure(2) </span><br><span class="line">plot(x0,y0,&apos;-&apos;,x,y,&apos;og&apos;,x1,y4,&apos;hr&apos;);</span><br><span class="line">legend(&apos;被插值曲线&apos;,&apos;已知离散数据点&apos;,&apos;线性插值数据点 &apos;,&apos;location&apos;,&apos;NorthWest&apos;);</span><br><span class="line">title(&apos;interp with cubic&apos;)</span><br><span class="line">figure(3) </span><br><span class="line">plot(x0,y0,&apos;-&apos;,x,y,&apos;og&apos;,x1,y2,&apos;sr&apos;);</span><br><span class="line">legend(&apos;被插值曲线&apos;,&apos;已知离散数据点&apos;,&apos;线性插值数据点 &apos;,&apos;location&apos;,&apos;NorthWest&apos;);</span><br><span class="line">title(&apos;interp with spline&apos;)</span><br><span class="line">figure(4)</span><br><span class="line">plot(x0,y0,&apos;-&apos;,x,y,&apos;og&apos;,x1,y3,&apos;dr&apos;);</span><br><span class="line">legend(&apos;被插值曲线&apos;,&apos;已知离散数据点&apos;,&apos;线性插值数据点 &apos;,&apos;location&apos;,&apos;NorthWest&apos;);</span><br><span class="line">title(&apos;interp with pchip&apos;)</span><br><span class="line"></span><br><span class="line">%  简答与编程5 数值计算</span><br><span class="line">% Test4</span><br><span class="line">x=1.23;</span><br><span class="line">h=[0.1,0.01,0.001,0.0001];</span><br><span class="line">x1=x+h;</span><br><span class="line">x2=x-h;</span><br><span class="line">y = 7.*x.*(sin(3.*x)+cos(3.*x));</span><br><span class="line">y1= 7.*x1.*(sin(3.*x1)+cos(3.*x1));</span><br><span class="line">y2=7.*x2.*(sin(3.*x2)+cos(3.*x2));</span><br><span class="line">yCS=(y1-y2)./(2*h) % 差商数值求导</span><br><span class="line">syms x;</span><br><span class="line">f=7.*x.*(sin(3.*x)+cos(3.*x));</span><br><span class="line">dy=diff(f,x); % 理论导数符号表达式</span><br><span class="line">dyl=eval(subs(dy,x,1.23)) ;% 理论导数</span><br><span class="line">detF=yCS-dyl % 差商求导误差</span><br><span class="line"></span><br><span class="line">% Test 05 </span><br><span class="line"></span><br><span class="line">h=(exp(1)-1)/20;</span><br><span class="line">x=1:h:exp(1);</span><br><span class="line">y=2.*x.^3.*log(5*x);</span><br><span class="line">z1=sum(y(1:20))*h;</span><br><span class="line">z2=sum(y(2:21)*h);</span><br><span class="line">z=(z1+z2)/2,z3=trapz(y)*h,z3h=trapz(x,y)</span><br></pre></td></tr></table></figure>
<h2 id="简答与编程六-符号计算"><a href="#简答与编程六-符号计算" class="headerlink" title="简答与编程六 符号计算"></a>简答与编程六 符号计算</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%  简答与编程六 符号计算</span><br><span class="line">%  Test 1</span><br><span class="line">% 展开成傅立叶级数</span><br><span class="line">l=1/2;</span><br><span class="line">syms x n;</span><br><span class="line">f=1-x^2;</span><br><span class="line">a0=int(f*cos(0),-l,l)/l</span><br><span class="line">an=int(f*cos(n*pi*x/l),-l,l)/l</span><br><span class="line">bn=int(f*sin(n*pi*x/l),-l,l)/l</span><br><span class="line"></span><br><span class="line">% 简答与编程六 符号计算</span><br><span class="line">% Test 2</span><br><span class="line">x = sym(&apos;x&apos;);</span><br><span class="line">y = sym(&apos;y&apos;);</span><br><span class="line">z = sym(&apos;z&apos;);</span><br><span class="line">[xx,yy,zz]=solve(x-y^2+z==10,x+y-5*z==0,2*x-4*y+z==0&apos;,x,y,z);</span><br><span class="line"></span><br><span class="line">%  Test3</span><br><span class="line">%%输入信号 </span><br><span class="line">t=0:1e-3:20;%时域信号的时间范围 </span><br><span class="line">x=sin(t)+sin(1.5*t+1)+5*cos(0.5*t)+2*randn(size(t));%时域信号x</span><br><span class="line">w=[0:1e-2:2];%想要观察的频率范围</span><br><span class="line">%%预定义 </span><br><span class="line">y=w;</span><br><span class="line">a=w;</span><br><span class="line">j=sqrt(-1);</span><br><span class="line">%%计算频点 </span><br><span class="line">for i=1:length(w)</span><br><span class="line">f=trapz(t,x.*exp(-j*w(i)*t));</span><br><span class="line">y(i)=abs(f);</span><br><span class="line">a(i)=angle(f);</span><br><span class="line">end</span><br><span class="line">%%输出 </span><br><span class="line">subplot(3,1,1),</span><br><span class="line">plot(t,x)</span><br><span class="line">subplot(3,1,2),</span><br><span class="line">plot(w,y)</span><br><span class="line">subplot(3,1,3),</span><br><span class="line">plot(w,a)</span><br><span class="line"></span><br><span class="line">% Test 04</span><br><span class="line">% f1</span><br><span class="line"></span><br><span class="line">s1=taylor(1/(5+cos(x)),x,5)</span><br><span class="line"></span><br><span class="line">% f2</span><br><span class="line">s2=taylor(exp(x* sin(x)),x,12)</span><br><span class="line">% Test 05</span><br><span class="line">% （1）求展开式，并求方程的根。</span><br><span class="line">syms x;</span><br><span class="line">f=(x^2+x)*(x-1);</span><br><span class="line">g=x^2+2*x+1;</span><br><span class="line">a=expand(f+g)</span><br><span class="line">solve(f+g,x)</span><br><span class="line">% (2)求 f(x)/g(x)的商式和余式</span><br><span class="line">p1=sym2poly(f);</span><br><span class="line">p2=sym2poly(g);</span><br><span class="line">[Q,r]=deconv(p1,p2); % 其中Q是商式系数，r是余式系数</span><br><span class="line">Qa=poly2sym(Q) % 商式</span><br><span class="line">ra=poly2sym(r) % 余式</span><br><span class="line">% Test 06</span><br><span class="line">syms x y</span><br><span class="line">f =x*y^2-y^3;</span><br><span class="line">fx1=diff(f,x,1) % 对x的1阶</span><br><span class="line">fx2=diff(f,x,2) % 对x的2阶</span><br><span class="line"></span><br><span class="line">fy1=diff(f,y,1) % 对y的1阶</span><br><span class="line">fy2=diff(f,y,2) % 对y的2阶</span><br><span class="line">% Test 07</span><br><span class="line">syms x;</span><br><span class="line">f = (1+x)^(1/x);</span><br><span class="line">a=limit(f,x,0)</span><br><span class="line">% Test 08</span><br><span class="line">% (1)</span><br><span class="line">syms a x;</span><br><span class="line">f1=sin(a*x);</span><br><span class="line">a1=int(f1,0,pi/2)</span><br><span class="line">% (2)</span><br><span class="line">f2=x/log(x);</span><br><span class="line">a2=int(f2,2,3)</span><br><span class="line"></span><br><span class="line">% Test09</span><br><span class="line">syms x y z</span><br><span class="line">y1=@(x) sqrt(x);</span><br><span class="line">y2=@(x) x.^2;</span><br><span class="line">z1=@(x,y) sqrt(x.*y);</span><br><span class="line">z2=@(x,y) x.^2.*y;</span><br><span class="line">fun=@(x,y,z) x.^2+y.^2+z.^2;</span><br><span class="line">a=integral3(fun,1,2,y1,y2,z1,z2)</span><br><span class="line"></span><br><span class="line">% Test 10</span><br><span class="line">syms x;</span><br><span class="line">g=x^3-6*x^2+11*x-6;</span><br><span class="line">% (1)因式</span><br><span class="line">a1=factor(g)</span><br><span class="line">% (2)嵌套式</span><br><span class="line">a2=horner(g)</span><br><span class="line">simplify(a2)</span><br></pre></td></tr></table></figure>

<h2 id="GUI-Test"><a href="#GUI-Test" class="headerlink" title="GUI Test"></a>GUI Test</h2><p>function varargout = Test03(varargin)</p>
<p>gui_Singleton = 1;<br>gui_State = struct(‘gui_Name’,       mfilename, …<br>                   ‘gui_Singleton’,  gui_Singleton, …<br>                   ‘gui_OpeningFcn’, @Test03_OpeningFcn, …<br>                   ‘gui_OutputFcn’,  @Test03_OutputFcn, …<br>                   ‘gui_LayoutFcn’,  [] , …<br>                   ‘gui_Callback’,   []);<br>if nargin &amp;&amp; ischar(varargin{1})<br>    gui_State.gui_Callback = str2func(varargin{1});<br>end</p>
<p>if nargout<br>    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});<br>else<br>    gui_mainfcn(gui_State, varargin{:});<br>end<br>% End initialization code - DO NOT EDIT<br>defaultanswers={‘5’};<br>answer=inputdlg(‘Enter your grade’,’Enter’,1,defaultanswers,’on’);<br>answer1=str2num(char(answer));<br>if answer1 &gt;= 90 &amp;&amp; answer1 &lt;= 100<br>    msgbox(“优秀”,’成绩分析’,’none’,’on’)<br>elseif  answer1 &gt;= 80 &amp;&amp; answer1 &lt;= 89<br>    msgbox(“良好”,’成绩分析’,’none’,’on’)<br>    elseif  answer1 &gt;= 70 &amp;&amp; answer1 &lt;= 79<br>    msgbox(“中等”,’成绩分析’,’none’,’on’)<br>    elseif  answer1 &gt;= 60 &amp;&amp; answer1 &lt;= 69<br>    msgbox(“合格”,’成绩分析’,’help’,’on’)<br>else<br>        msgbox(“不合格”,’Result’,’warn’,’on’)<br>end</p>
<p>% — Executes just before Test03 is made visible.<br>function Test03_OpeningFcn(hObject, eventdata, handles, varargin)<br>% This function has no output args, see OutputFcn.<br>% hObject    handle to figure<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    structure with handles and user data (see GUIDATA)<br>% varargin   command line arguments to Test03 (see VARARGIN)</p>
<p>% Choose default command line output for Test03<br>handles.output = hObject;<br>ha=axes(‘units’,’normalized’,’pos’,[0 0 1 1]);</p>
<p> uistack(ha,’down’);</p>
<p> ii=imread(‘p1.jpg’);</p>
<p>%设置程序的背景图为p1.jpg</p>
<p> image(ii);</p>
<p> colormap gray</p>
<p> set(ha,’handlevisibility’,’off’,’visible’,’off’);</p>
<p>% Update handles structure<br>guidata(hObject, handles);</p>
<p>% UIWAIT makes Test03 wait for user response (see UIRESUME)<br>% uiwait(handles.figure1);</p>
<p>% — Outputs from this function are returned to the command line.<br>function varargout = Test03_OutputFcn(hObject, eventdata, handles)<br>% varargout  cell array for returning output args (see VARARGOUT);<br>% hObject    handle to figure<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    structure with handles and user data (see GUIDATA)</p>
<p>% Get default command line output from handles structure<br>varargout{1} = handles.output;</p>
<p>% — Executes during object creation, after setting all properties.<br>function axes1_CreateFcn(hObject, eventdata, handles)<br>% hObject    handle to axes1 (see GCBO)<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    empty - handles not created until after all CreateFcns called</p>
<p>% Hint: place code in OpeningFcn to populate axes1</p>
<p>function edit1_Callback(hObject, eventdata, handles)<br>% hObject    handle to edit1 (see GCBO)<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    structure with handles and user data (see GUIDATA)</p>
<p>% Hints: get(hObject,’String’) returns contents of edit1 as text<br>%        str2double(get(hObject,’String’)) returns contents of edit1 as a double</p>
<p>% — Executes during object creation, after setting all properties.<br>function edit1_CreateFcn(hObject, eventdata, handles)<br>% hObject    handle to edit1 (see GCBO)<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    empty - handles not created until after all CreateFcns called</p>
<p>% Hint: edit controls usually have a white background on Windows.<br>%       See ISPC and COMPUTER.<br>if ispc &amp;&amp; isequal(get(hObject,’BackgroundColor’), get(0,’defaultUicontrolBackgroundColor’))<br>    set(hObject,’BackgroundColor’,’white’);<br>end</p>
<p>function varargout = Test04(varargin)<br>% TEST04 MATLAB code for Test04.fig<br>% Begin initialization code - DO NOT EDIT<br>gui_Singleton = 1;<br>gui_State = struct(‘gui_Name’,       mfilename, …<br>                   ‘gui_Singleton’,  gui_Singleton, …<br>                   ‘gui_OpeningFcn’, @Test04_OpeningFcn, …<br>                   ‘gui_OutputFcn’,  @Test04_OutputFcn, …<br>                   ‘gui_LayoutFcn’,  [] , …<br>                   ‘gui_Callback’,   []);<br>if nargin &amp;&amp; ischar(varargin{1})<br>    gui_State.gui_Callback = str2func(varargin{1});<br>end</p>
<p>if nargout<br>    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});<br>else<br>    gui_mainfcn(gui_State, varargin{:});<br>end<br>% End initialization code - DO NOT EDIT<br>users={‘123’,’321’;’456’,’789’};% 存储一系列账号和密码<br>[x,y]=size(users);<br>prompt={‘请输入账号:’,’请输入密码:’}<br>name=’输入’;<br>numlines=1;<br>defaultanswer={‘000’,’000’};<br>input=inputdlg(prompt,name,numlines,defaultanswer);<br>input1=str2num(char(input));<br>for i=1:x<br>    if input1(1)==str2num(char(users(i,1)))<br>        if input1(2)==str2num(char(users(i,2)))<br>            msgbox(‘欢迎登录本系统’,’Welcome ‘,’none’)<br>            break<br>        else<br>            msgbox(‘输入有误，请重新输入账号和密码’,’出错’,’error’)<br>            break<br>        end<br>    else<br>        msgbox(‘输入有误，请重新输入账号和密码’,’出错’,’error’)<br>        break<br>    end<br>end</p>
<p>% — Executes just before Test04 is made visible.<br>function Test04_OpeningFcn(hObject, eventdata, handles, varargin)<br>% This function has no output args, see OutputFcn.<br>% hObject    handle to figure<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    structure with handles and user data (see GUIDATA)<br>% varargin   command line arguments to Test04 (see VARARGIN)</p>
<p>% Choose default command line output for Test04<br>handles.output = hObject;</p>
<p>% Update handles structure<br>guidata(hObject, handles);</p>
<p>% UIWAIT makes Test04 wait for user response (see UIRESUME)<br>% uiwait(handles.figure1);</p>
<p>% — Outputs from this function are returned to the command line.<br>function varargout = Test04_OutputFcn(hObject, eventdata, handles)<br>% varargout  cell array for returning output args (see VARARGOUT);<br>% hObject    handle to figure<br>% eventdata  reserved - to be defined in a future version of MATLAB<br>% handles    structure with handles and user data (see GUIDATA)</p>
<p>% Get default command line output from handles structure<br>varargout{1} = handles.output;</p>
]]></content>
  </entry>
  <entry>
    <title>Matlab/Matlab字符串课堂</title>
    <url>/2020/03/15/Matlab/Matlab%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%BE%E5%A0%82/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul>
<li>size(str)获取字符数组的大小</li>
<li>s1 = s([3, 4])得到子字符串</li>
<li>abs 和 double 都可以用来获取串数组所对应的ascii码数值数组。</li>
<li>char可把ascii码数组变位机串数组 </li>
</ul>
<h1 id="第三章-Matlab数据可视化"><a href="#第三章-Matlab数据可视化" class="headerlink" title="第三章 Matlab数据可视化"></a>第三章 Matlab数据可视化</h1><h2 id="二维数据可视化"><a href="#二维数据可视化" class="headerlink" title="二维数据可视化"></a>二维数据可视化</h2><p>二维数据可视化是将平面坐标上的数据点连接起来的平面图形。除直角坐标外，还可以采用对书坐标、极坐标</p>
<h3 id="基本二维曲线绘制"><a href="#基本二维曲线绘制" class="headerlink" title="基本二维曲线绘制"></a>基本二维曲线绘制</h3><p>plot函数<br>    - plot(y)<br>        y可以是向量<br>        实数、矩阵或复数向量<br>    - plot(x,y)<br>        * 当x是向量，y是有一维与x同维的矩阵<br>        * 当x为向量，y为矩阵；<br>        * 当x、y均为矩阵时，使用plot(x,y):<br>          此时，x、y是具有相同维数的矩阵；绘图时，       以x的列向量作为横坐标，以y对应的列向量作为纵坐标，当x、y具有n列时，同时绘制出n条曲线。</p>
<h3 id="绘图辅助操作"><a href="#绘图辅助操作" class="headerlink" title="绘图辅助操作"></a>绘图辅助操作</h3><p>绘图辅助操作实在plot函数的基础上增加颜色、线型等输入参数          </p>
]]></content>
  </entry>
  <entry>
    <title>Matlab/Matlab字符串book</title>
    <url>/2020/03/14/Matlab/Matlab%E5%AD%97%E7%AC%A6%E4%B8%B2book/</url>
    <content><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><h3 id="字符串的构造"><a href="#字符串的构造" class="headerlink" title="字符串的构造"></a>字符串的构造</h3><ul>
<li>创建字符数组<ul>
<li>用一对单引号来表示字符串</li>
<li>字符串合并函数strcat来得到一个新的函数(对应Java中的concat) : 语法 ： strcat(a, b)<br>  &amp; 注意：strcat在合并字符串的同时会把字符串结尾的空格删除.<br>  &amp; 要想保留这些空格，可以用矩阵合并符来实现字符串合并。<pre><code>例如： c = [a, b]</code></pre></li>
<li>构造二维字符串数组时，要注意保持二维字符数组的每一行具有相同的长度。<br>  &amp; 当构造的多个字符串具有不同长度时，可以在字符串的尾部添加空格来强制实现字符串具有相同的长度。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Matlab矩阵的访问</title>
    <url>/2020/03/14/Matlab/Matlab%E7%9F%A9%E9%98%B5%E7%9A%84%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="Matalb矩阵元素的访问"><a href="#Matalb矩阵元素的访问" class="headerlink" title="Matalb矩阵元素的访问"></a>Matalb矩阵元素的访问</h1><h2 id="通过下标来引用矩阵的元素"><a href="#通过下标来引用矩阵的元素" class="headerlink" title="通过下标来引用矩阵的元素"></a>通过下标来引用矩阵的元素</h2><ul>
<li>先行后列</li>
<li>下标越界时Matlab会自动扩展矩阵，为给定值的位置默认为零。<h2 id="通过序号来引用矩阵的元素"><a href="#通过序号来引用矩阵的元素" class="headerlink" title="通过序号来引用矩阵的元素"></a>通过序号来引用矩阵的元素</h2></li>
</ul>
<h2 id="通过冒号表达式来或者子矩阵"><a href="#通过冒号表达式来或者子矩阵" class="headerlink" title="通过冒号表达式来或者子矩阵"></a>通过冒号表达式来或者子矩阵</h2><ul>
<li>获得第n行所有元素<pre><code>* A(n,:)</code></pre></li>
<li>获得第n列的所有元素<pre><code>* A(:,n)</code></pre></li>
<li>获得第2到5行且3到4列中的元素<pre><code>* A(2 : 5;3 : 4)</code></pre></li>
<li>获得n到m行的所有元素<pre><code>* A(n : m, : )</code></pre></li>
<li>获得n到m列的所有元素<pre><code>* A(:,n : m)</code></pre>&amp; 注意：end在Matlab中表示某一维的末尾下标</li>
</ul>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab零散的知识</title>
    <url>/2020/03/14/Matlab/Matlab%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Matlab零散知识"><a href="#Matlab零散知识" class="headerlink" title="Matlab零散知识"></a>Matlab零散知识</h1><h2 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h2><ul>
<li><p>在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的1，这样的矩阵被称为单位矩阵。</p>
</li>
<li><p>它是一个方阵，从左上角到右下角的对角线(称为主对角线)上的元素均为1，除此之外全部为0.根据单位矩阵的特点，任何矩阵与单位矩阵相乘都等于本身，而单位矩阵因此独特性在高等数学中也有广泛应用。</p>
</li>
<li><p>在Matlab中单位矩阵用eye(n,m)生成</p>
<h2 id="变量的存取"><a href="#变量的存取" class="headerlink" title="变量的存取"></a>变量的存取</h2><h3 id="1-使用命令实现变量的存取-load-取-save-存"><a href="#1-使用命令实现变量的存取-load-取-save-存" class="headerlink" title="1 使用命令实现变量的存取(load:取,save:存)"></a>1 使用命令实现变量的存取(load:取,save:存)</h3></li>
<li><p>格式1<br>  load 文件名 变量名;<br>  save 文件名 变量名；<br>例如：</p>
<figure class="highlight plain"><figcaption><span>Matlab</span></figcaption><table><tr><td class="code"><pre><span class="line">save file1.mat A;</span><br></pre></td></tr></table></figure></li>
<li><p>格式2<br>  S = load(‘文件名’, ‘格式’, ‘变量名’)<br>  save(‘文件名’, ‘格式’, ‘变量名’)<br>例如：</p>
<figure class="highlight plain"><figcaption><span>Matlab</span></figcaption><table><tr><td class="code"><pre><span class="line">save(&apos;file1.mat&apos;, &apos;-mat&apos;, &apos;A&apos;)</span><br><span class="line">save(&apos;file1.txt&apos;, &apos;-ascii&apos;, &apos;A&apos;)</span><br><span class="line">save(&apos;file2.txt&apos;, &apos;-ascii&apos;, &apos;tabs&apos;, &apos;A&apos;)</span><br></pre></td></tr></table></figure>
<ul>
<li>其中格式有：<ul>
<li>‘-mat’ : 二进制格式</li>
<li>‘-ascii’ : 8位文本格式</li>
<li>‘-ascii’,’-tabs’: 以8位文本和table分隔符分割的格式<h3 id="2-使用交互式实现变量的存取"><a href="#2-使用交互式实现变量的存取" class="headerlink" title="2 使用交互式实现变量的存取"></a>2 使用交互式实现变量的存取</h3>即通过鼠标点击工作空间窗口来实现</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="对Excle文件的读取"><a href="#对Excle文件的读取" class="headerlink" title="对Excle文件的读取"></a>对Excle文件的读取</h2><p>例子：<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num</span><br><span class="line">=xlsread(&apos;data.xls&apos;,&apos;Sheet1&apos;,&apos;B3:F6&apos;)</span><br></pre></td></tr></table></figure><br>    <strong>进行Excel表格读取时请注意，关闭需要打开的工作表，否则进程占用，无法读取。</strong><br>    *<em>进行Excel表格读取时请注意,数据范围那一项中间不能留有空格，即’A2:D4’ 而不是’A2 : D4’ *</em></p>
<h2 id="类型转换问题"><a href="#类型转换问题" class="headerlink" title="类型转换问题"></a>类型转换问题</h2><ul>
<li>abs和double可以将字符转换为ascii码</li>
<li>number2str将数字转换为字符</li>
<li>char将ascii码转换为字符<h2 id="Matlab中步长的意思是：差值而不是间隔。例如："><a href="#Matlab中步长的意思是：差值而不是间隔。例如：" class="headerlink" title="Matlab中步长的意思是：差值而不是间隔。例如："></a>Matlab中步长的意思是：差值而不是间隔。例如：</h2>x[1:2:12] :结果就为 1 3 5 7 9 11<h2 id="数组距离问题："><a href="#数组距离问题：" class="headerlink" title="数组距离问题："></a>数组距离问题：</h2>(end-10:end)之间有11个元素<h2 id="矩阵索引问题："><a href="#矩阵索引问题：" class="headerlink" title="矩阵索引问题："></a>矩阵索引问题：</h2></li>
<li>无法对临时矩阵进行索引<h2 id="修改命令行错误："><a href="#修改命令行错误：" class="headerlink" title="修改命令行错误："></a>修改命令行错误：</h2>有时候我们输入表达式时会带有错误，当你按 ENTER 回车后才意识到，这时没必须重 新输入整行，只需使用方向键向上移动，修正错误，然后按回车重新输入，MATLAB 会修 正输出<h2 id="还可以在命令窗口中输入-quit-命令，这样也能关闭-MATLAB。"><a href="#还可以在命令窗口中输入-quit-命令，这样也能关闭-MATLAB。" class="headerlink" title="还可以在命令窗口中输入 quit 命令，这样也能关闭 MATLAB。"></a>还可以在命令窗口中输入 quit 命令，这样也能关闭 MATLAB。</h2></li>
</ul>
<h2 id="x和x的区别："><a href="#x和x的区别：" class="headerlink" title=".x和x的区别："></a>.x和x的区别：</h2><ul>
<li>前者是矩阵中的元素相乘</li>
<li>后者是两个矩阵相乘 </li>
</ul>
<h2 id="绘画三维图形时，使用的meshgrid命令"><a href="#绘画三维图形时，使用的meshgrid命令" class="headerlink" title="绘画三维图形时，使用的meshgrid命令"></a>绘画三维图形时，使用的meshgrid命令</h2><h2 id="命令文件和函数文件的区别和联系："><a href="#命令文件和函数文件的区别和联系：" class="headerlink" title="命令文件和函数文件的区别和联系："></a>命令文件和函数文件的区别和联系：</h2><p>(1)命令文件没有输入参数,也不返回输出参数,而函数文件可以带输入参数,也可以返回输出参数。 (2)命令文件对MATLAB工作空间中的变量进行操作,命令执行的结果返回到工作空间中,所产生的变量为全局变量,而函数文件中定义的变量为局部变量,不在工作空间中显示,当函数文件执行后,这些变量被清除。 (3)命令文件可以直接运行,而函数文件不能直接运行,要以函数调用的方式运行。</p>
<h2 id="创建符号常量的意义："><a href="#创建符号常量的意义：" class="headerlink" title="创建符号常量的意义："></a>创建符号常量的意义：</h2><p>可以避免精度损失的问题<br>例如计算机中1/3的值是0.3333333，但如果x=syms(‘1/3’),则x始终是1/3而不是0.33333</p>
<h2 id="计算伴随矩阵"><a href="#计算伴随矩阵" class="headerlink" title="计算伴随矩阵"></a>计算伴随矩阵</h2><p> inv(A)*det(A)</p>
<h2 id="将cell数组转化为矩阵"><a href="#将cell数组转化为矩阵" class="headerlink" title="将cell数组转化为矩阵"></a>将cell数组转化为矩阵</h2><h3 id="若cell中的元素为含有数字的字符串"><a href="#若cell中的元素为含有数字的字符串" class="headerlink" title="若cell中的元素为含有数字的字符串"></a>若cell中的元素为含有数字的字符串</h3><p> str2num(char(answer));</p>
<h3 id="若cell中的元素为数值型，则使用cell2amt"><a href="#若cell中的元素为数值型，则使用cell2amt" class="headerlink" title="若cell中的元素为数值型，则使用cell2amt"></a>若cell中的元素为数值型，则使用cell2amt</h3><h2 id="临时"><a href="#临时" class="headerlink" title="临时"></a>临时</h2><p> prompt={‘请输入正弦函数的振幅:’,’请输入正弦函数的频率:’};<br>name=’输入’;<br>numlines=1;<br>defaultanswer={‘5’,’10’};<br>answer=inputdlg(prompt,name,numlines,defaultanswer);<br>answer1=str2num(char(answer));<br>amplitude=answer1(1);<br>frequency=answer1(2);<br>axes(handles.axes1);<br>x=0:pi/180:2<em>pi;<br>y=amplitude</em>sin(frequency<em>2</em>pi);<br>plot(x,y)</p>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Java/Java学习记录1</title>
    <url>/2020/03/14/Java/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<h1 id="Java学习记录"><a href="#Java学习记录" class="headerlink" title="Java学习记录"></a>Java学习记录</h1><p>用于记录那些零星的不成系统的需要注意的问题</p>
<h2 id="next-和nextLine-的区别"><a href="#next-和nextLine-的区别" class="headerlink" title="next()和nextLine()的区别"></a>next()和nextLine()的区别</h2><p>next()特点：<br>1、一定要读取到有效字符后才可以结束输入，<br>2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉，<br>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符.<br>next()不能得到带有空格的字符串</p>
<p>nextLine()特点：<br>1、以Enter为结束符,也就是说nextLine()方法返回的是输入回车之前的所有字符。<br>2、可以获得空白.</p>
<h2 id="Java中字符串可以像整数一样交换顺序"><a href="#Java中字符串可以像整数一样交换顺序" class="headerlink" title="Java中字符串可以像整数一样交换顺序"></a>Java中字符串可以像整数一样交换顺序</h2><h2 id="为什么Math-sin-Math-PI-为什么不等于0"><a href="#为什么Math-sin-Math-PI-为什么不等于0" class="headerlink" title="为什么Math.sin(Math.PI)为什么不等于0?"></a>为什么Math.sin(Math.PI)为什么不等于0?</h2><p>解释：<br>1.常规代数里，是等于0，但是cpu运算的时候，只是近似等于0<br>2.计算机语言数值型数据都是二进制表达的，所以在进行浮点计算时候是很难精确的，Math.sin(Math.PI)是通过微积分计算公式计算出来的，会存在精度上面的误差结果是：1.2246063538223772e-16</p>
<p>综上，浮点数的运算，往往并不是我们期望的结果，可以通过Math.round() 函数来解决。</p>
<h2 id="常见计算结果类型"><a href="#常见计算结果类型" class="headerlink" title="常见计算结果类型"></a>常见计算结果类型</h2><p>Math,pow计算结果是小数<br>Math.log计算结果也是小数</p>
<h2 id="如何利用Math-random生成各个范围的整数"><a href="#如何利用Math-random生成各个范围的整数" class="headerlink" title="如何利用Math.random生成各个范围的整数"></a>如何利用Math.random生成各个范围的整数</h2><p><strong>* 以下这是阿里巴巴编码规范插件的提示 *</strong><br>** 注意 Math.random() 这个方法返回是double类型，注意取值的范围[0,1)（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法. **</p>
<h2 id="Unicode的问题"><a href="#Unicode的问题" class="headerlink" title="Unicode的问题"></a>Unicode的问题</h2><h2 id="小技巧可以这样输出一个双引号"><a href="#小技巧可以这样输出一个双引号" class="headerlink" title="小技巧可以这样输出一个双引号:"></a>小技巧可以这样输出一个双引号:</h2><p>System.out.println(‘“‘);    // prints “</p>
<p>字符串操作之:concat用于java中字符串的拼接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">" World!"</span></span><br><span class="line"></span><br><span class="line">String s3 = s1.concat.(s2);</span><br><span class="line">System.out.println(s3);</span><br><span class="line"><span class="comment">// Output:Hello world</span></span><br></pre></td></tr></table></figure>

<p>记录怎样实现字符串的强制转换</p>
<h2 id="Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。"><a href="#Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。" class="headerlink" title="Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。"></a>Java中使用数组之前必须先定义和声明，不能不经过声明和定义就直接在方法中作为参数调用方法。</h2><h2 id="注意，在Java中只能有一个主类，它的名字和文件名相同，其他的类一定不能使用这个名字。"><a href="#注意，在Java中只能有一个主类，它的名字和文件名相同，其他的类一定不能使用这个名字。" class="headerlink" title="注意，在Java中只能有一个主类，它的名字和文件名相同，其他的类一定不能使用这个名字。"></a>注意，在Java中只能有一个主类，它的名字和文件名相同，其他的类一定不能使用这个名字。</h2><h2 id="有关Unicode的问题"><a href="#有关Unicode的问题" class="headerlink" title="有关Unicode的问题"></a>有关Unicode的问题</h2><p>每个字符都有一个唯一的在十六进制数0到FFFF(即十进制的65535)之间的Unicode。分别用’\u0000’ 和 ‘\uFFFF’表示。</p>
<h2 id="匿名数组——没有显式地引用变量。常用于给方法传递参数"><a href="#匿名数组——没有显式地引用变量。常用于给方法传递参数" class="headerlink" title="匿名数组——没有显式地引用变量。常用于给方法传递参数"></a>匿名数组——没有显式地引用变量。常用于给方法传递参数</h2><p>printArray(new int[]{1, 3, 3})</p>
<h2 id="调用方法时参数的传递："><a href="#调用方法时参数的传递：" class="headerlink" title="调用方法时参数的传递："></a>调用方法时参数的传递：</h2><ul>
<li><p>对于基本数据类型参数，传递的是实参的值</p>
</li>
<li><p>对于数组类型参数，参数值是数组的引用，给方法传递的是这个引用。<br>  更好的说法是参数传递的是共享信息(pass-by-sharing)。即方法中的数组和传递的数组是一样的。所以，如果改变方法中的数组，将会看到方法外的数组也变化了。</p>
</li>
<li><p>注意下列的区别：<br>  <img src="media/15844557606878.jpg" alt=""><br>对于以上区别，可以将方法添加一个返回值，然后在mian方法中直接print方法调用，可以获得变量的改变。</p>
</li>
</ul>
<h2 id="可变长参数列表"><a href="#可变长参数列表" class="headerlink" title="可变长参数列表"></a>可变长参数列表</h2><p><img src="media/15845342366528.jpg" alt="-w736"></p>
<p><strong>需要注意的是：</strong></p>
<ul>
<li>只允许使用一个可变长度参数。</li>
<li>可变长度参数仅被允许放置在参数列表的最后。</li>
<li>不允许从方法中返回可变长度类型。</li>
</ul>
<h2 id="java-util-Arrays-sort："><a href="#java-util-Arrays-sort：" class="headerlink" title="java.util.Arrays.sort："></a>java.util.Arrays.sort：</h2><p>java.util.Arrays.sort方法已重载，因此可以用于对除布尔值以外的任何原始类型的数组进行排序。这种排序方法不会创建新方法，元素将被排序到作为方法参数给出的数组中。</p>
<h2 id="java-util-Arrays-toString"><a href="#java-util-Arrays-toString" class="headerlink" title="java.util.Arrays.toString"></a>java.util.Arrays.toString</h2><p>返回对象的字符串表示</p>
<h2 id="java-util-Arrays-fill"><a href="#java-util-Arrays-fill" class="headerlink" title="java.util.Arrays.fill"></a>java.util.Arrays.fill</h2><p>填充数组</p>
<h2 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis"></a>System.currentTimeMillis</h2><p>用于获取当前已经经过了多少毫秒(开始时间是“那个”时间，大家都知道吧)</p>
<h2 id="Random类基本用法"><a href="#Random类基本用法" class="headerlink" title="Random类基本用法"></a>Random类基本用法</h2><p>// 创建一个实例对象<br>Random random = new Random(1000);其中1000是seed，这个值最好是随机使得获取的伪随机数更加随机<br>int number = random.nextInt(1000); 其中的1000是bound，使用该语句可以获得一个在从零到bound(不包括)之间的伪随机数。</p>
<h2 id="关于boolean类型"><a href="#关于boolean类型" class="headerlink" title="关于boolean类型"></a>关于boolean类型</h2><p>在java中boolean类型默认为false。<br>即如果不给定是true还是false，boolean类型变量的默认值是false。</p>
<h2 id="判断字符是否是数字"><a href="#判断字符是否是数字" class="headerlink" title="判断字符是否是数字"></a>判断字符是否是数字</h2><p>使用：<br>Character.isDigit()</p>
<p><strong><em>注意：</em></strong>只能判断单个字符，不能判断字符串，但是可以通过循环实现判断字符串是不是数字。</p>
<h2 id="将字符串转换为大写"><a href="#将字符串转换为大写" class="headerlink" title="将字符串转换为大写"></a>将字符串转换为大写</h2><p>str.toUpperCase();</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String<img src="media/15881323713956.jpg" alt="-w947"></h2><p>如果查找的是字符串，返回的int值是字符串中第一个字符的索引<br><img src="media/15881327467300.jpg" alt="-w948"></p>
<h2 id="获取伪随机数"><a href="#获取伪随机数" class="headerlink" title="获取伪随机数"></a>获取伪随机数</h2><p><img src="media/15881801792829.jpg" alt="-w490"></p>
<h2 id="使用int强制转换char得到的是ascii码，即"><a href="#使用int强制转换char得到的是ascii码，即" class="headerlink" title="使用int强制转换char得到的是ascii码，即"></a>使用int强制转换char得到的是ascii码，即</h2><p>(int)StringName.charAt(i)是行不通的。</p>
<h2 id="二进制转十进制算法"><a href="#二进制转十进制算法" class="headerlink" title="二进制转十进制算法"></a>二进制转十进制算法</h2><p><img src="media/15881827738782.jpg" alt="-w1173"></p>
<h2 id="关于try-catch嵌套"><a href="#关于try-catch嵌套" class="headerlink" title="关于try-catch嵌套"></a>关于try-catch嵌套</h2><p><img src="media/15882093550361.jpg" alt="-w714"></p>
<h2 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h2><p><img src="media/15882093966305.jpg" alt="-w574"></p>
<h2 id="一个关于try-catch嵌套的例子"><a href="#一个关于try-catch嵌套的例子" class="headerlink" title="一个关于try-catch嵌套的例子"></a>一个关于try-catch嵌套的例子</h2><p>``<br>public class Content0804 {<br>    public static void main(String[] args) {<br>        Scanner in = new Scanner(System.in);<br>        System.out.print(“请输入一个整数: “);<br>        while (true){<br>            String line = in.nextLine();<br>            try {<br>                int num = Integer.parseInt(line);<br>                System.out.println(Integer.toBinaryString(num));<br>                break;<br>            }catch (Exception e){<br>                try {<br>                    new BigInteger(line);<br>                    System.out.println(“整数过大，请输入一个整数”);<br>                }catch (Exception e1){<br>                    try {<br>                        new BigDecimal(line);<br>                        System.out.println(“输入的是一个小数，请输入一个整数”);<br>                    }catch (Exception e2){<br>                        System.out.println(“输入的是非法字符，请重新输入一个整数‚”);<br>                    }<br>                }<br>            }<br>        }<br>    }<br>}</p>
<p>``</p>
<h2 id="如何同入理解API"><a href="#如何同入理解API" class="headerlink" title="如何同入理解API"></a>如何同入理解API</h2><p><a href="https://www.zhihu.com/question/21430743" target="_blank" rel="noopener">https://www.zhihu.com/question/21430743</a></p>
<h2 id="java-jdk源码"><a href="#java-jdk源码" class="headerlink" title="java jdk源码"></a>java jdk源码</h2><p><a href="https://gitee.com/huangtianyu/jdk-source" target="_blank" rel="noopener">https://gitee.com/huangtianyu/jdk-source</a></p>
<h2 id="string-getBytes"><a href="#string-getBytes" class="headerlink" title="string.getBytes()"></a>string.getBytes()</h2><p> void    getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)<br>          已过时。 该方法无法将字符正确转换为字节。从 JDK 1.1 起，完成该转换的首选方法是通过 getBytes() 方法，该方法使用平台的默认字符集。</p>
<h2 id="System-getProperty"><a href="#System-getProperty" class="headerlink" title="System.getProperty()"></a>System.getProperty()</h2><p>这个函数可以获取到java JVM以及操作系统的一些参数</p>
<p><img src="media/15882983884775.jpg" alt="-w870"></p>
<h2 id="Interger类"><a href="#Interger类" class="headerlink" title="Interger类"></a>Interger类</h2><p><img src="media/15886647366194.jpg" alt="-w860"><br><img src="media/15886652589427.jpg" alt="-w559"><br>##Interger.parseInt(String s, int radix)<br><img src="media/15886667237755.jpg" alt="-w710"><br>意思是前一个字符形式的数字是后面这个radix进制的，然后输出的时候自动将这个radix进制的s数字转换为十进制的</p>
<h2 id="关于StringBuilder"><a href="#关于StringBuilder" class="headerlink" title="关于StringBuilder"></a>关于StringBuilder</h2><p>s1.substring(2)中给定的是start的下标，这种情况下默认为从开始值到最后的下标</p>
<h2 id="关于protected和private的简单说明"><a href="#关于protected和private的简单说明" class="headerlink" title="关于protected和private的简单说明"></a>关于protected和private的简单说明</h2><p><img src="media/15886948683254.jpg" alt="-w643"></p>
<p>即：<br>默认情况下，一个类可以访问同一个包中的，而外部的类无法访问它。</p>
<p>protected使其他包中的类无法访问该类，但是其他包中他的子类可以访问它。而同一个包中可以随意访问</p>
<p>private表示只有在该类中才能使用</p>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>Number的compareTo(Integer)方法未定义</p>
<h2 id="关于接口和抽象类的一些知识"><a href="#关于接口和抽象类的一些知识" class="headerlink" title="关于接口和抽象类的一些知识"></a>关于接口和抽象类的一些知识</h2><p>接口中定义的方法都是公共的</p>
<p>##输出圆周率的方法</p>
<p>表示如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"\u03c0"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java错误</title>
    <url>/2020/03/14/Java/Java%E8%87%B4%E5%91%BD%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="致命错误"><a href="#致命错误" class="headerlink" title="致命错误"></a>致命错误</h1><h2 id="Intellij中能编译但是java时找不到类："><a href="#Intellij中能编译但是java时找不到类：" class="headerlink" title="Intellij中能编译但是java时找不到类："></a>Intellij中能编译但是java时找不到类：</h2><p><img src="media/15843720037405.jpg" alt=""></p>
<p>这里说更清楚一点，应该在存放编译后的文件的目录下运行java程序，我这里是bin。src中存放的是.java文件，bin中存放的是.class文件。</p>
<h2 id="使用nextLine时读区不了数据，原因如下："><a href="#使用nextLine时读区不了数据，原因如下：" class="headerlink" title="使用nextLine时读区不了数据，原因如下："></a>使用nextLine时读区不了数据，原因如下：</h2><p><img src="media/15865995531271.jpg" alt="-w1081"></p>
<p><strong>* 解决办法 *</strong><br>String s = input.nextLine();之前添加如下代码：<br>input.nextLine();</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>方法的递归调用</title>
    <url>/2020/03/14/Java/Java%E6%96%B9%E6%B3%95%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="关于方法的递归调用"><a href="#关于方法的递归调用" class="headerlink" title="关于方法的递归调用"></a>关于方法的递归调用</h1><ol>
<li><p>什么是递归调用</p>
<ul>
<li>例如：<br>a(){<br>a();}</li>
</ul>
</li>
<li><p>递归调用是很耗费栈内存的，递归算法可以不用的时候尽量别用</p>
</li>
<li><p>递归调用而没有结束命令时，会出现以下的错误【注意，不是异常，是错误Error】：<br> java.lang.StackOverflowError</p>
<pre><code>- 栈内存溢出错误
- 错误发生无法挽回，只有一个结果，就是 JVM停止工作。</code></pre></li>
<li><p>递归必须有结束条件，没有结束条件，是一定会发生栈内存溢出错误。   </p>
</li>
<li><p>递归即使有了结束条件，即使结束条件是正确的，也可能会发生栈内存错误，因为递归得太深了。</p>
</li>
</ol>
<p>注意：<br>    - 递归可以不使用尽量别用<br>    - 但有些情况下该功能的实现必须依靠递归方   式。例如，目录拷贝。</p>
<p> 应用：<br>        - 递归用于计算求和   </p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java/十六进制转十进制的公式</title>
    <url>/2020/03/14/Java/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6%E7%9A%84%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="十六进制转十进制的公式"><a href="#十六进制转十进制的公式" class="headerlink" title="十六进制转十进制的公式"></a>十六进制转十进制的公式</h1><p>(我自己从来没记过嘿嘿)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hexToDecimal</span><span class="params">(String hex)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> decimalValue = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hex.length(); i++) &#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">       <span class="keyword">char</span> hexChar  = hex.charAt(i);</span><br><span class="line">       decimalValue = decimalValue * <span class="number">16</span> + hexCharToDecimal(hexChar);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> decimalValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Java常用函数</title>
    <url>/2020/03/12/Java/Java%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="冒泡排序-Java"><a href="#冒泡排序-Java" class="headerlink" title="冒泡排序(Java)"></a>冒泡排序(Java)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span>[] indexOfSmallElement(<span class="keyword">double</span>[] array)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">  <span class="comment">// loop 1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line">          exchange = array[j];</span><br><span class="line">          array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">          array[j + <span class="number">1</span>] = exchange;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java/Java常见类型转换</title>
    <url>/2020/03/12/Java/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="常见类型转换"><a href="#常见类型转换" class="headerlink" title="常见类型转换"></a>常见类型转换</h1><h2 id="long-与-int"><a href="#long-与-int" class="headerlink" title="long 与 int"></a>long 与 int</h2><p>一.将long型转化为int型，这里的long型是基础类型：</p>
<p>long   a = 10;     int b = (int)a;   </p>
<p>二.将Long型转换为int 型的，这里的Long型是包装类型：</p>
<p>Long a = 10; int b=a.intValue();</p>
<p>三.将int型转化为long型，这里的int型是基础类型：</p>
<p>int a = 10;long b = (int)a;</p>
<p>四.将Integer型转化为long型，这里的Integer型是包装类型：</p>
<p>int a = 10;Long b = a.longValue();</p>
<h2 id="int-和-String"><a href="#int-和-String" class="headerlink" title="int 和 String"></a>int 和 String</h2><p><a href="https://blog.csdn.net/u012050154/article/details/51320638" target="_blank" rel="noopener">https://blog.csdn.net/u012050154/article/details/51320638</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java/方法重载</title>
    <url>/2020/03/12/Java/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="方法重载-overload"><a href="#方法重载-overload" class="headerlink" title="方法重载(overload)"></a>方法重载(overload)</h1><h2 id="适用于解决以下问题："><a href="#适用于解决以下问题：" class="headerlink" title="适用于解决以下问题："></a>适用于解决以下问题：</h2><p>调用功能相似方法时传统的做法是编写多个有着不同名字的方法，这样既麻烦且不美观</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>——方法重载(overload)</p>
<h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>各个方法的功能都相似；</p>
<h2 id="不是所有的语言都有这个机制"><a href="#不是所有的语言都有这个机制" class="headerlink" title="不是所有的语言都有这个机制"></a>不是所有的语言都有这个机制</h2><p>例如javascript没有这个机制</p>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>使用的方法名字一样，区分的依据是实参的数据类型；<br>程序员调用方法的时候比较方便，虽然调用的不同的方法，但是感觉就像是在使用一个方法一样，不需要记忆更多的方法；<br>同时代码更加美观。</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>功能不相似的时候尽可能让方法的方法名不同。</p>
<h2 id="思考问题："><a href="#思考问题：" class="headerlink" title="思考问题："></a>思考问题：</h2><p> 1.方法重载又被称为：overload<br>2.什么时候考虑使用方法重载：<br>功能相似的时候，尽可能让方法名相同；<br>【但是：功能不同/不相似的时候，尽可能不使用方法重载】<br>3.满足什么条件才构成方法重载</p>
<ul>
<li>在同一个类中</li>
<li>方法名相同</li>
<li>参数列表不同：<ul>
<li>数量不同</li>
<li>顺序不同</li>
<li>类型不同 </li>
</ul>
</li>
</ul>
<p>4.方法重载和什么有关系，和什么没有关系？</p>
<ul>
<li>方法重载和方法名 + 参数列表有关系</li>
<li>方法重载和返回值类型无关</li>
<li>方法重载和修饰符列表无关(即与是否有public等等无关)<h2 id="方法重载的具体应用"><a href="#方法重载的具体应用" class="headerlink" title="方法重载的具体应用"></a>方法重载的具体应用</h2>使用下面的自定义类，利用其中的各个重载方法就可以实现简单快速地输出各种类型的值。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfPrint</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">byte</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">short</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println( data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">long</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">float</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">double</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">boolean</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">	System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="构造方法也可以重载"><a href="#构造方法也可以重载" class="headerlink" title="构造方法也可以重载"></a>构造方法也可以重载</h3>]]></content>
  </entry>
  <entry>
    <title>起航/经验之谈</title>
    <url>/2020/03/12/%E8%B5%B7%E8%88%AA/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="邮箱："><a href="#邮箱：" class="headerlink" title="邮箱："></a>邮箱：</h2><p>求职简历中邮箱不要使用@qq.com后缀的；</p>
]]></content>
  </entry>
  <entry>
    <title>Matlab/Matlab常见函数</title>
    <url>/2020/03/10/Matlab/Matlab%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h1><h2 id="生成矩阵的特殊函数"><a href="#生成矩阵的特殊函数" class="headerlink" title="生成矩阵的特殊函数"></a>生成矩阵的特殊函数</h2><ul>
<li>eye(n) 生成n*n且对角线为1的矩阵,即单位矩阵 </li>
<li>ones() 生成n*n且全部为1的矩阵</li>
<li>zeros() 产生矩阵元素全为0的矩阵</li>
<li>randn() 产生均值为0、方差为1的标准正态分布随机矩阵</li>
</ul>
<h2 id="disp函数"><a href="#disp函数" class="headerlink" title="disp函数"></a>disp函数</h2><h2 id="diag-由给定元素为主对角线生成一个矩阵"><a href="#diag-由给定元素为主对角线生成一个矩阵" class="headerlink" title="diag:由给定元素为主对角线生成一个矩阵"></a>diag:由给定元素为主对角线生成一个矩阵</h2><h2 id="rmfield-s-’name’-用于删除s结构体数组中的name一栏；"><a href="#rmfield-s-’name’-用于删除s结构体数组中的name一栏；" class="headerlink" title="rmfield(s,’name’):用于删除s结构体数组中的name一栏；"></a>rmfield(s,’name’):用于删除s结构体数组中的name一栏；</h2><h2 id="deconv函数-除法"><a href="#deconv函数-除法" class="headerlink" title="deconv函数(除法)"></a>deconv函数(除法)</h2><p><img src="media/15862632188045.jpg" alt="-w749"></p>
<h2 id="conv-和上一个函数类似，这个是乘法"><a href="#conv-和上一个函数类似，这个是乘法" class="headerlink" title="conv 和上一个函数类似，这个是乘法"></a>conv 和上一个函数类似，这个是乘法</h2><h2 id="poly2sym"><a href="#poly2sym" class="headerlink" title="poly2sym"></a>poly2sym</h2><p>将多项式系数的向量表示转换为函数形式</p>
<h2 id="sym2poly"><a href="#sym2poly" class="headerlink" title="sym2poly"></a>sym2poly</h2><p>和上一个函数用法相反</p>
<h2 id="horner-函数"><a href="#horner-函数" class="headerlink" title="horner 函数"></a>horner 函数</h2><p>给出符号表达式的嵌套形式</p>
]]></content>
  </entry>
  <entry>
    <title>Python/Python正则表达式</title>
    <url>/2020/03/09/Python/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式入门"><a href="#正则表达式入门" class="headerlink" title="正则表达式入门"></a>正则表达式入门</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>import re </p>
<h2 id="创建一种格式"><a href="#创建一种格式" class="headerlink" title="创建一种格式"></a>创建一种格式</h2><p>phoneNumber = re.compile(r’\d\d\d-\d\d\d-\d\d\d\d’)</p>
]]></content>
  </entry>
  <entry>
    <title>Python/Python随便写点</title>
    <url>/2020/03/09/Python/Python%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/</url>
    <content><![CDATA[<h1 id="随便写点"><a href="#随便写点" class="headerlink" title="随便写点"></a>随便写点</h1><p> _划线是会指向最后一次表达式的值</p>
<p>以单个下划线开头命名的方法或者变量,就是说明它是仅提供给内部使用的</p>
<p>##下划线特殊使用 有关继承和类。看懂了就行，不应该使用这种奇怪的用法。<br>_Person__name = “nianchu”<br>class Person():<br>    def print_name(self):<br>        return __name</p>
<p>print(Person().print_name())</p>
]]></content>
  </entry>
  <entry>
    <title>Java输出数据对齐方法</title>
    <url>/2020/03/07/Java/Java%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>System.out.printf(“%-10s”,”abc”);      //输出10列，左对齐(-号表示左对齐)<br>System.out.printf(“%8d”,23);          //输出8列， 右对齐</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Magic value</title>
    <url>/2020/03/07/Java/Magic-value/</url>
    <content><![CDATA[<p>今天记录一个编程领域的名词：魔法数值、魔法数字、魔法值。</p>
<p><strong>在编程领域，上述三个名词都指的是莫名其妙出现的数字。</strong></p>
<p>解读：</p>
<p>采用魔法值的代码。数字的意义必须通过详细阅读才能推断出来。使用魔法数值使代码的可读性大大下降。</p>
<p><strong><em>在Java语言中，对于有名字的值的定义，可以使用static final 或者enum来声明</em></strong></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之Math.round</title>
    <url>/2020/03/06/Java/Java%E4%B9%8BMath-round/</url>
    <content><![CDATA[<p>Java 中 Math.round的用法:</p>
<p>1、参数的小数点后第一位&lt;5，运算结果为参数整数部分。<br>2、参数的小数点后第一位&gt;5，运算结果为参数整数部分绝对值+1，符号（即正负）不变。<br>3、参数的小数点后第一位=5，正数运算结果为整数部分+1，负数运算结果为整数部分。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常用方法</title>
    <url>/2020/03/06/Java/Java%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Java常用方法"><a href="#Java常用方法" class="headerlink" title="Java常用方法"></a>Java常用方法</h1><h2 id="toRadians"><a href="#toRadians" class="headerlink" title="toRadians"></a>toRadians</h2><p>作用：将以度数为单位的角度转换为以弧度为单位的角度</p>
<h2 id="arraycopy-int-arr-int-star-int-arr2-int-start2-length"><a href="#arraycopy-int-arr-int-star-int-arr2-int-start2-length" class="headerlink" title="arraycopy(int[] arr, int star,int[] arr2, int start2, length);"></a>arraycopy(int[] arr, int star,int[] arr2, int start2, length);</h2><p>具体用法：<br>    5个参数，<br>第一个参数是要被复制的数组<br>第二个参数是被复制的数字开始复制的下标<br>第三个参数是目标数组，也就是要把数据放进来的数组<br>第四个参数是从目标数据第几个下标开始放入数据<br>第五个参数表示从被复制的数组中拿几个数值放到目标数组中</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab基本运算</title>
    <url>/2020/02/26/Matlab/Matlab%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><p>左除</p>
<p>右除法</p>
<p>非奇异性矩阵是什么意思</p>
<h2 id="点运算"><a href="#点运算" class="headerlink" title="点运算"></a>点运算</h2><h1 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h1><p>注意不等于的关系运算符是~=</p>
<p>成立返回1，不成立返回0</p>
<h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 总结：Matlab的运算都是在矩阵意义下进行的，单个数据的算术运算只是矩阵运算的一种特例</span></span><br><span class="line"><span class="comment">% 加减运算 ：</span></span><br><span class="line"><span class="comment">% 矩阵之间：</span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>] </span><br><span class="line">B = [<span class="number">7</span>:<span class="number">9</span>;<span class="number">100</span>:<span class="number">102</span>]</span><br><span class="line">B - A </span><br><span class="line"><span class="comment">% 矩阵和标量之间</span></span><br><span class="line">c = <span class="number">100</span>;</span><br><span class="line">B - c</span><br><span class="line"></span><br><span class="line"><span class="comment">% 乘法运算就只能在矩阵之间了，而且要求A的列数与B的行数相等，此时称A、B矩阵是可乘的，或称A和B两矩阵维数和大小相容：</span></span><br><span class="line">C = [<span class="number">1</span>:<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>];</span><br><span class="line">D = [<span class="number">11</span>,<span class="number">20</span>;<span class="number">12</span>,<span class="number">21</span>]</span><br><span class="line">D * C <span class="comment">% 特别注意，两矩阵相乘，A*B不等于就是B*A。要想成功计算，一定保证是A的列数与B的行数相等。是不能交换的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 除法运算??在Matlab中，有两种不同的矩阵除法运算，一个是右除，一个是左除</span></span><br><span class="line"><span class="comment">% 书上说如果A矩阵是非奇异方阵，则B/A等效于B*inv(A),A/B等效于inv(A)*B.而这两种不同的计算方法的计算结果是不一样的。</span></span><br><span class="line"><span class="comment">% 但是对于两个标量来说，左除和右除的效果是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 乘方运算：一个矩阵的乘方运算可以表示成A ^x,要求：A为方阵，x为标量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 点运算</span></span><br><span class="line"><span class="comment">% 两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵同型。</span></span><br><span class="line">E = A;</span><br><span class="line">F = A.* E</span><br><span class="line"></span><br><span class="line"><span class="comment">% 关系运算 </span></span><br><span class="line"><span class="comment">% 当两个比较量是标量时，直接比较两个数字的大小，关系成立，表达式的结果为1，否则为0</span></span><br><span class="line"><span class="comment">% 当两个是同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终结果是一个只有1和0的同型矩阵</span></span><br><span class="line"><span class="comment">% 当一个是标量，另一个是矩阵时，则把标量与矩阵中的每一个元素按标量规则进行比较，同样结果是一个只含有0和1的同型矩阵</span></span><br><span class="line">A1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="number">4</span>:<span class="number">6</span>];</span><br><span class="line">A2 = [<span class="number">0</span>:<span class="number">2</span>;<span class="number">21</span>:<span class="number">23</span>];</span><br><span class="line">A3 = (A1&lt; A2)<span class="comment">% 结果：[0 0 0;1 1 1]</span></span><br><span class="line">A4 = (A2&gt;<span class="number">0</span>) <span class="comment">% 结果：[0 1 1;1 1 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 逻辑运算</span></span><br><span class="line"><span class="comment">% &amp;｜ ～</span></span><br><span class="line"><span class="comment">% &amp; :两个非零才为1</span></span><br><span class="line"><span class="comment">% ｜：一个非零则为1</span></span><br><span class="line"><span class="comment">% 若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，结果是包含0、1的同型矩阵</span></span><br><span class="line"><span class="comment">% 若参与逻辑运算的是一个标量和一个矩阵，则把标量与矩阵中的每一个元素按标量规则进行比较，同样结果是一个只含有0和1的同型矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 实例： 水仙花数</span></span><br><span class="line"></span><br><span class="line">m = [<span class="number">100</span>:<span class="number">999</span>]; <span class="comment">% 生成所有三位正整数</span></span><br><span class="line">m1 = <span class="built_in">rem</span>(m,<span class="number">10</span>); <span class="comment">% 个</span></span><br><span class="line">m2 = <span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>);<span class="comment">% 十 </span></span><br><span class="line">m3 = <span class="built_in">fix</span>(m/<span class="number">100</span>); <span class="comment">% 百</span></span><br><span class="line"><span class="built_in">j</span> = <span class="built_in">find</span>(m == m1.^<span class="number">3</span>+m2.^<span class="number">3</span>+m3.^<span class="number">3</span>);<span class="comment">% 是水仙花数的序号</span></span><br><span class="line"><span class="built_in">i</span> = <span class="built_in">find</span>(~(m == m1.^<span class="number">3</span>+m2.^<span class="number">3</span>+m3.^<span class="number">3</span>)); <span class="comment">% 不是水仙花数的序号</span></span><br><span class="line"><span class="comment">% 然后分别传递给矩阵m</span></span><br><span class="line">result = m(<span class="built_in">j</span>) </span><br><span class="line">result1 = m(<span class="built_in">i</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Java/Java-异常处理和文本I\O</title>
    <url>/2020/02/26/Java/Java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%92%8C%E6%96%87%E6%9C%ACI%5CO/</url>
    <content><![CDATA[<h1 id="Java-异常处理和文本I-O"><a href="#Java-异常处理和文本I-O" class="headerlink" title="Java-异常处理和文本I/O"></a>Java-异常处理和文本I/O</h1><h2 id="异常处理概述"><a href="#异常处理概述" class="headerlink" title="异常处理概述"></a>异常处理概述</h2><p>要点提示：异常是从方法抛出的。方法的调用者可以捕获以及处理该异常</p>
<p>java可以让一个方法可以抛出一个异常，该异常可以被调用者捕获和处理。</p>
<p>(书中的例子)在这种情况下，抛出的值为new ArithmeticException(“Divisor cannot be zero”),称为一个异常。异常就是一个从异常类创建的对象。在这种情况下，异常类就是java.lang.ArithmeticException.</p>
<p>构造方法ArithmeticException(str)被调用用以构建一个异常，其中str是描述异常的消息。</p>
<p>当异常被抛出时，正常的执行流程就会被中断。就它的名字所提示的，“抛出异常”就是将异常从一个地方传递到另一个地方。调用方法的语句包含在一个try块和一个catch块中。try块包含了正常情况下执行的代码。异常被catch块所捕获。catch块中的代码执行以处理异常。之后，catch块之后的语句被执行。</p>
<p>throw语句类似于方法的调用，但不同于调用方法的是，它调用的是catch块。从某种意义上讲，catch块就像带参数的方法定义，这些参数匹配抛出的值的类型。但是，它不像方法，在执行catch块之后，程序控制不返回到throw语句；而是执行catch块之后的下一条语句。</p>
<p>catch块的头部<br>catch(xxxException ex)<br>标识符ex的作用就像是方法中的参数。所以这个参数称为catch块的参数。ex之前的类型指定了catch块可以捕获的异常类型。一旦捕获该异常，就能从catch块体中的参数访问这个抛出的值。<br>try-throw-catch块的模版如下<br><img src="media/15878071407711.jpg" alt="-w732"></p>
<p>一个异常可能是通过try块中的trow语句直接抛出，或者调用一个可能会抛出异常的方法而抛出</p>
<h2 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h2><p>要点提示：异常使对象，而对象都采用类来定义。异常的根类是java.lang.Throwable。</p>
<p>注意： 类名Error、Exception和RuntimeException有时候容易引起混淆。它们都是异常，这里讨论的错误都是发生在运行时。<br>Throwable类是所有异常的根。所有的java异常都直接或间接地继承自Throwable。可以通过继承<br>Exception或者Exception的子类来创建自己的异常类。</p>
<p>异常类分为三种主要类型： </p>
<ul>
<li>系统异常(system error）是由java虚拟机抛出的，用Error类表示。Error类描述的是内部系统错误。这样的错误很少发生。如果发生，除了可以通知用户以及尽量稳妥地终止程序外，几乎什么都不能做。</li>
<li>异常（exception）是用Exception类表示的，它描述的是由程序和外部环境所引起的错误，这些错误能被程序捕获和处理。<br><img src="media/15878081327997.jpg" alt="-w922"></li>
<li>运行时异常（runtime exception）是用RuntimeException类表示的。它描述的是程序设计错误，例如，错误的类型转换、访问一个越界数组或数值错误。运行时异常通常是由Java虚拟机抛出的。</li>
<li><img src="media/15878083370996.jpg" alt="-w951"><br>RuntimeException和Error以及它们的子类都被称为免检异常。所有其他异常都被称为必检异常，意思是说编译器会强制程序猿通过try-catch块处理它们，或者在方法头进行声明。</li>
</ul>
<p>大多数情况下，免检异常都会反映出程序设计上不可恢复的逻辑错误。</p>
<p>免检异常可能在程序的任何一个地方出现。</p>
<p>为避免过多地使用try-catch模块，java语言不强制要求程序猿编写代码捕获或声明免检异常。</p>
<h2 id="关于异常处理的更多知识"><a href="#关于异常处理的更多知识" class="headerlink" title="关于异常处理的更多知识"></a>关于异常处理的更多知识</h2><p>要点提示： 异常的处理器是通过当前的方法开始，沿着方法调用链，按照异常的反向传播方向找到的。</p>
<p>java的异常处理模型基于三种操作： 声明一个异常（declaring an exception）、抛出一个异常（throw an exception）和捕获一个异常（catching a exception）<br><img src="media/15878088878447.jpg" alt="-w909"></p>
<h3 id="声明异常"><a href="#声明异常" class="headerlink" title="声明异常"></a>声明异常</h3><p><strong><em>在java中，当前执行的语句必属于某个方法。Java解释器调用main方法开始执行一个程序。</em></strong><br>每个方法都必须声明它可能抛出的必检异常的类型，因此java不要求在方法显式声明Error和RuntimeException。但是，方法要抛出的其他异常都必须在方法头中显式声明，这样，方法的调用者会被告知有异常。</p>
<p>在方法中声明一个异常，要在方法头中使用关键字throws。</p>
<p>public void myMethod() throws IOException</p>
<p>如果方法可能会抛出多个异常，就可以在关键字throws之后添加一个用逗号分隔的异常列表。</p>
<p>注意： <strong><em>如果方法没有在父类中声明异常，那么就不能在子类中对其进行继承来声明异常。</em></strong></p>
<h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>检测到错误的程序可以创建一个合适的异常类型的i实例并抛出它，这就称为一个异常。<br>示例：<br><img src="media/15878094134772.jpg" alt="-w740"><br>注意： 通常，Java API中的每个异常至少有两个构造方法： 一个无参构造方法和一个带有描述这个异常的String参数的构造方法。这个参数就叫做异常消息（额exception message），它可以用getMessage()获取。</p>
<p>提示： <strong>* 声明异常的关键字是throws， 抛出异常的关键字是throw *</strong></p>
<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p><img src="media/15878096247534.jpg" alt="-w827"><br>如果在执行try块的过程中没有出现异常，则跳过catch子句。</p>
<p>异常处理器： try块中的某条语句抛出异常，java就会跳过try中剩余的语句，然后开始查找处理这个异常的代码的过程。处理这个异常的代码称为异常处理器。</p>
<p>寻找处理器的过程称为捕获一个异常。</p>
<p>下面截图是详细说明<br><img src="media/15878314324548.jpg" alt="-w920"><br><img src="media/15878314425513.jpg" alt="-w902"></p>
<p>注意： 一个通用的父类可以派生出各种异常类。如果一个catch块可以捕获一个父类的异常对象，它就能捕获那个父类的所有子类的异常对象。<br><img src="media/15878315889991.jpg" alt="-w865"><br><img src="media/15878316852638.jpg" alt="-w890"></p>
<h3 id="从异常中获取信息"><a href="#从异常中获取信息" class="headerlink" title="从异常中获取信息"></a>从异常中获取信息</h3><p>异常对象包含过于异常的有价值的信息。</p>
<p>Throwable类<br><img src="media/15878318295653.jpg" alt="-w827"><br>stackTraceElement[] 中的每个元素表示一个方法调用<br>stackTraceElement[] 数组中的元素有下列的方法可以调用：</p>
<ul>
<li>getMethodName() 获得每个元素的方法</li>
<li>getClassName() 获得每个元素的类名</li>
<li>getLineNumber() 获得每个元素的异常行号</li>
</ul>
<h3 id="示例学习：-声明、抛出和捕获异常"><a href="#示例学习：-声明、抛出和捕获异常" class="headerlink" title="示例学习： 声明、抛出和捕获异常"></a>示例学习： 声明、抛出和捕获异常</h3><p>不管是否在方法头中声明，每个方法都能抛出RuntimeException异常(免检异常)</p>
<p>注意： 在异常事件中，执行仍然会继续。如果处理器没有捕获到这个异常，程序会突然中断。</p>
<p>如果方法抛出RuntimeException和Error之外的异常，那么此方法就必须在try-catch块内调用</p>
<h2 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h2><p>要点提示： 无论异常是否产生，finally子句总是会被执行的。<br>finally子句的语法：<br><img src="media/15878899426819.jpg" alt="-w739"><br>在任何情况下，finally块中的代码都会被执行，不论try块中是否出现异常或者是否被捕获。<br><img src="media/15878900814431.jpg" alt="-w888"></p>
<h2 id="链式异常"><a href="#链式异常" class="headerlink" title="链式异常"></a>链式异常</h2><p>要点提示： 和其他异常一起抛出一个异常<br>catch块重新抛出原始的异常。有时候，可能需要同原始异常一起抛出一个新异常（带有附加信息），这称为链式异常。</p>
<p>似乎是先抛出新异常，然后再抛出原始异常。</p>
<h2 id="创建自定义异常类"><a href="#创建自定义异常类" class="headerlink" title="创建自定义异常类"></a>创建自定义异常类</h2><p>要点提示： 可以通过能够派生出java.lang.Exception 类来定义个自定义异常类</p>
<p>java提供相当多的异常类，尽量不要使用它们而不妖创建自己的异常类。</p>
<p>当遇到不能用预定义的异常类恰当描述问题，那么就可以通过派生Exception类或其他子类。<br><img src="media/15878913236238.jpg" alt="-w944"></p>
<p>提示：<br>Java API中的大多数异常都包含两个构造方法：一个无参构造方法和一个带消息参数的构造方法。</p>
<p>要创建一个InvalidRadiusException类，必须传递一个半径。</p>
<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>本章介绍如何使用File类获取文件/目录的属性以及删除和重命名文件/目录，以及创建目录。<br>要点提示： File类包含了获得一个文件/目录的属性，以及对文件/目录进行改名和删除的方法。</p>
<p>存储在程序中的数据是暂时的，当程序终止时它们就会丢失。为了能够永久地保存程序中创建的数据，需要将它们存储到磁盘或其他永久存储设备的文件中。</p>
<p>在文件系统中，每个文件都存放在一个目录中。</p>
<ul>
<li>绝对文件名<br>是由文件名和它的完整路径以及驱动器字母组成。</li>
</ul>
<p>绝对文件是依赖机器的。</p>
<ul>
<li>相对文件名是相对于当前工作目录的。对于相对文件名而言，完整目录被忽略。</li>
</ul>
<p>File类意图提供了一种抽象，这种抽象是指以不依赖机器的方式来处理很多依赖于机器的文件和路径名的复杂性。</p>
<p>File类包含许多获取文件属性的方法，以及重命名和删除文件和目录的方法。</p>
<p><strong><em>但是</em></strong>，File类不包含读写文件内容的方法。<br><img src="media/15878963885056.jpg" alt="-w908"></p>
<p>File类是文件名及其目录路径的一个<strong>包装类</strong>。<br><img src="media/15878965955605.jpg" alt="-w862"></p>
<p>可以用File类的isDirectory()方法来判断这个对象是否表示一个目录，还可以使用isFile()方法来判断这个对象是否表示一个文件名。</p>
<p><strong>警告</strong>：在Windows中目录的分隔符是反斜杠\，但是在Java中，反斜杠是一个特殊字符，应该写成\的形式。</p>
<p><strong>注意：</strong>构建一个File实例并不会在机器上创建一个文件。不管文件是否存在，都可以创建任意文件名的File实例。可以调用File实例上的exists()方法来判断这个文件是否存在。</p>
<p>在程序中，不要直接使用绝对文件名，因为这样可能会使程序不能在其他平台上工作。</p>
<p>应该使用于当前目录相关的文件名。</p>
<p>斜杠/是Java的目录分隔符，这点和UNIX是一样的。</p>
<h2 id="文件输入和输出"><a href="#文件输入和输出" class="headerlink" title="文件输入和输出"></a>文件输入和输出</h2><p>要点提示： 使用Scanner类从文件中读取文本数据，使用PrintWriter类向文本文件输入数据。</p>
<p>File对象封装了文件或路径的属性，但是它既不包括创建文件的方法，也不包括从/向文件读/写数据（称为数据输入输出，简称I/O）的方法。</p>
<p>为了完成I/O操作，需要使用恰当的I/O类创建对象。这些对象包含从/向文件读/写数据的方法。</p>
<p>文本文件本质上是存储在磁盘上的字符。</p>
<h3 id="使用PrintWriter写数据"><a href="#使用PrintWriter写数据" class="headerlink" title="使用PrintWriter写数据"></a>使用PrintWriter写数据</h3><p>java.io.PrintWriter类可用来创建一个文本文件写入数据。首先，必须为一个文本文件创建一个PrintWriter对象。<br><img src="media/15879076595179.jpg" alt="-w615"></p>
<p>PrintWriter对象上有print、println和printf方法，可以使用它们向文件写入数据。<br><img src="media/15879077241331.jpg" alt="-w916"></p>
<p>Java强制要求编写代码来处理I/O异常。</p>
<pre><code>System.out.println();是控制台的标准Java对象。</code></pre><p>必须使用close()方法关闭文件。如果没有调用该方法，数据就不能正确地保存在文件中。</p>
<h3 id="使用try-with-resources-自动关闭资源"><a href="#使用try-with-resources-自动关闭资源" class="headerlink" title="使用try-with-resources 自动关闭资源"></a>使用try-with-resources 自动关闭资源</h3><p>程序员经常会忘记关闭文件。JDK 7 提供了下面的新的try-with-resources 语法来自动关闭文件。<br><img src="media/15879085940993.jpg" alt="-w458"></p>
<p>关键字try后声明和创建了一个资源。<br><strong>注意：</strong> 资源放在括号中。资源必须是AutoCloseable的子类型，比如PrintWriter，具有一个close方法。</p>
<p>资源的声明和创建必须是在同一行语句中，可以在括号中进行多个资源的声明和创建。紧接着就是资源声明的块中的语句使用资源。快结束后，资源的close()方法自动调用以关闭资源。使用try-with-resources不仅可以避免错误，还可以简化代码。</p>
<h3 id="使用Scanner读数据"><a href="#使用Scanner读数据" class="headerlink" title="使用Scanner读数据"></a>使用Scanner读数据</h3><p>Scanner类用来从控制台读取字符串和基本数据类型数值。<br>Scanner可以将输入分为由空白字符串分隔的标记。为了能从键盘读取，需要为System.in创建一个Scanner。</p>
<p>为了从文件中读取，为文件创建一个Scanner，如下<br>            Scanner input = new Scanner(new File(filename));</p>
<p>如同给出了Scanner中常用的方法。<br><img src="media/15879097560591.jpg" alt="-w854"></p>
<p>从文件中读取数据使没有必要管斌输入文件，但这样做是一种释放文件占用的资源的好方法。可以使用try-with-resources语法重写该程序。</p>
<p>scanner中默认分隔符是空格，可以将分隔符理解为标记。</p>
<h3 id="Scanner-如何工作"><a href="#Scanner-如何工作" class="headerlink" title="Scanner 如何工作"></a>Scanner 如何工作</h3><p>nextInt()等方法都被称为标记读取方法。因为它们会读取用分隔符分隔开的标记。默认情况下，分隔符是空格。<br>可以使用useDelimiter(String regex)方法设置新的分隔模式。</p>
<p>输入方法的工作原理：<br>一个标记方法首先跳过任意分隔符，然后读取一个以分隔符结束的标记。然后，对于nextByte，nextShort等，这个标记就分别被自动地转换为一个byte，short等类型。对于next()方法而言是无须做转换的。如果标记和期望的类型不匹配，就会抛出一个运行异常java.util.InputMismathcException.</p>
<p>方法next()和nextLine()都会读取一个字符串。前者读取一个由分隔符分隔的字符串，但是后者会读取一个以换行符结束的行。</p>
<p><strong>注意：</strong>行分隔符是由系统定义的，在WIndows平台上是\r\n， 而在UNIX上是\n。</p>
<p>为了得到特定平台上的行分隔符，使用<br>String lineSeparator = System.getProperty(“line.separator”);</p>
<p>如果从键盘输入，每行就以回车键(Enter key)结束，它对应\n字符。</p>
<p><strong><em>有关nextLine()的问题</em></strong><br><img src="media/15879714308600.jpg" alt="-w904"></p>
<p>可以使用Scanner类从文件或者键盘读取数据。也可以使用Scanner类从一个字符串扫描数据。</p>
<h3 id="实例学习：-替换文本"><a href="#实例学习：-替换文本" class="headerlink" title="实例学习： 替换文本"></a>实例学习： 替换文本</h3><p><img src="media/15879715940217.jpg" alt="-w887"></p>
<h2 id="从Web上读取数据"><a href="#从Web上读取数据" class="headerlink" title="从Web上读取数据"></a>从Web上读取数据</h2><p>要点提示： 如同从电脑中的文件读取数据一样，也可以从Web上的文件中读取数据<br>URL全名：Uniform Resource Locator, 统一资源定位器</p>
<p>为了读取一个文件，首先要使用java.net.URL类的构造方法，为该文件创建一个URL对象。</p>
<p>要让URL类来识别一个有效的URL，前缀http:// 是必须的。</p>
<p>创建一个URL对象后，可以使用URL类中定义的openStream()方法来打开输入流和用输入流创建如下Scanner对象。</p>
<p>Scanner input = new Scanner(url.openStream());<br>(这里的意思是input就是给定url的内容)</p>
<h2 id="实例学习：-Web-爬虫"><a href="#实例学习：-Web-爬虫" class="headerlink" title="实例学习： Web 爬虫"></a>实例学习： Web 爬虫</h2><p>要点提示： 学习开发一个程序，可以跟随超链接来遍历Web。<br>World Wide Web,缩写为WWW、W3或者Web，是一个因特网上的相互链接的超文本文档。使用Web浏览器，可以查看一个文档，以及跟随超链接查看其他文档。</p>
<p>Web爬虫，可以跟随超链接来自动遍历Web的程序。</p>
<p>客户程序从一个Web服务器上获取文件。</p>
<p>程序的算法如下：<br><img src="media/15881308836609.jpg" alt="-w1048"></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript/JavaScript</title>
    <url>/2020/02/26/JavaScript/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol>
<li>HTML 定义了网页的内容</li>
<li>CSS 描述了网页的布局</li>
<li>JavaScript 网页的行为</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java面向对象基础(重难点)</title>
    <url>/2020/02/24/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="静态方法和实例方法的问题："><a href="#静态方法和实例方法的问题：" class="headerlink" title="静态方法和实例方法的问题："></a>静态方法和实例方法的问题：</h1><p>有static修饰的是静态方法，没有static修饰的方法是实例方法。</p>
<p>静态方法可以访问静态变量和其他静态方法，不可以访问实例方法，实例变量；实例方法可以访问实例变量、其他实例方法、静态变量、静态方法。(记住这一点是很有必要的。)</p>
<h1 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h1><p>如果初始化静态变量不是简单常量，需要进行计算才能初始化，可以使用静态(static)代码块，静态 代码块在类第一次加载时执行，并只执行一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态代码块的格式如下：</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"静态代码块被调用..."</span>);</span><br><span class="line">  <span class="comment">//还可以再这里初始化静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>可变字符串的插入删除和替换</title>
    <url>/2020/02/22/Java/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E5%92%8C%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.22 字符串插入、删除、替换</span></span><br><span class="line">		<span class="comment">// 插入</span></span><br><span class="line">		StringBuffer str = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">		str.insert(<span class="number">11</span>,<span class="string">" very "</span>);</span><br><span class="line">		System.out.println(str);<span class="comment">// Today is a very good day!</span></span><br><span class="line">		<span class="comment">//删除和替换</span></span><br><span class="line">		StringBuffer str1 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">		StringBuffer str2 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">		StringBuffer str3 = <span class="keyword">new</span> StringBuffer(<span class="string">"Today is a good day!"</span>);</span><br><span class="line">		System.out.println(str1.delete(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">// is a good day!</span></span><br><span class="line">		System.out.println(str2.delete(<span class="number">0</span>, <span class="number">5</span>));<span class="comment">// is a good day!</span></span><br><span class="line">		System.out.println(str3.replace(<span class="number">0</span>,<span class="number">5</span>,<span class="string">"Tomorrow "</span>));<span class="comment">//Tomorrow  is a good day!</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java_可变字符串</title>
    <url>/2020/02/22/Java/java-%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.21</span></span><br><span class="line"><span class="comment">// 可变字符串：可变字符串在追加、删除、修改、插入和拼接等操作时不会产生新的对象</span></span><br><span class="line"><span class="comment">// Java中提供了两个可变字符串类型，StringBuffer and StringBuilder，中文翻译为字符串缓冲区</span></span><br><span class="line"><span class="comment">// 理解：字符串长度和字符串缓冲区</span></span><br><span class="line"><span class="comment">// 字符串长度和字符串缓冲区容量区别。字符串长度是指在字符串缓冲区中目前所包含字符 串长度，</span></span><br><span class="line"><span class="comment">// 通过length()获得;字符串缓冲区容量是缓冲区中所能容纳的最大字符数，通过capacity() 获得。</span></span><br><span class="line"><span class="comment">// 当所容纳的字符超过这个长度时，字符串缓冲区自动扩充容量，但这是以牺牲性能为代价 的扩容。</span></span><br><span class="line"><span class="comment">// 字符串长度和字符串缓冲区容量示例代码：</span></span><br><span class="line">StringBuilder nameString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(nameString.length());</span><br><span class="line">System.out.println(nameString.capacity());<span class="comment">//长度为零，而容量为16</span></span><br><span class="line"></span><br><span class="line">StringBuilder nameString1 = <span class="keyword">new</span> StringBuilder(<span class="string">"xiaolei"</span>);</span><br><span class="line">System.out.println(nameString1.length());</span><br><span class="line">System.out.println(nameString1.capacity());<span class="comment">//长度为7，而容量为16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串缓冲区初始容量是16，超过之后会扩容,现在通过一个for循环来证明这个事情</span></span><br><span class="line">StringBuilder teStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">17</span>;i++) &#123;</span><br><span class="line">	teStringBuilder.append(<span class="number">8</span>);</span><br><span class="line">	System.out.println(<span class="string">"包含的字符串长度为："</span> + teStringBuilder.length());</span><br><span class="line">	System.out.println(<span class="string">"字符串缓冲区容量为："</span> + teStringBuilder.capacity());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由输出结果我们可以看到，最后当字符串长度为17的时候，字符串缓冲区的容量变成了34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串追加——append</span></span><br><span class="line"><span class="comment">// 添加字符串</span></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(stringBuilder.append(<span class="string">"Hello"</span>).append(<span class="string">" "</span>).append(<span class="string">"World!"</span>));</span><br><span class="line"><span class="comment">// 添加布尔值，转义符和空对象</span></span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Object object = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(stringBuffer.append(<span class="keyword">false</span>).append(<span class="string">"\t"</span>).append(object));</span><br><span class="line"><span class="comment">// 添加数值</span></span><br><span class="line">StringBuffer numBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">	numBuffer.append(i);</span><br><span class="line">	i++;</span><br><span class="line">	System.out.println(numBuffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment"> * 0</span></span><br><span class="line"><span class="comment">16</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">23</span></span><br><span class="line"><span class="comment">包含的字符串长度为：1</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：2</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：3</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：4</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：5</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：6</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：7</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：8</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：9</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：10</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：11</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：12</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：13</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：14</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：15</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：16</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：16</span></span><br><span class="line"><span class="comment">包含的字符串长度为：17</span></span><br><span class="line"><span class="comment">字符串缓冲区容量为：34</span></span><br><span class="line"><span class="comment">Hello World!</span></span><br><span class="line"><span class="comment">false	null</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">01</span></span><br><span class="line"><span class="comment">012</span></span><br><span class="line"><span class="comment">0123</span></span><br><span class="line"><span class="comment">01234</span></span><br><span class="line"><span class="comment">012345</span></span><br><span class="line"><span class="comment">0123456</span></span><br><span class="line"><span class="comment">01234567</span></span><br><span class="line"><span class="comment">012345678</span></span><br><span class="line"><span class="comment">0123456789</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java字符串比较和截取</title>
    <url>/2020/02/20/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%92%8C%E6%88%AA%E5%8F%96/</url>
    <content><![CDATA[<h1 id="字符串比较和截取"><a href="#字符串比较和截取" class="headerlink" title="字符串比较和截取"></a>字符串比较和截取</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line">String s11 = <span class="string">"xiaolei"</span>;</span><br><span class="line">String s12 = <span class="string">"zlei"</span>;</span><br><span class="line">String s13 =<span class="string">"Xiaolei"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 比较相等</span></span><br><span class="line"><span class="comment">//1.1 包括大小写</span></span><br><span class="line">System.out.println(s11.equals(s12));<span class="comment">//flase</span></span><br><span class="line">System.out.println(s11.equals(s13));<span class="comment">//flase</span></span><br><span class="line"><span class="comment">//1.2 忽视大小写</span></span><br><span class="line">System.out.println(s11.equalsIgnoreCase(s13));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 比较大小</span></span><br><span class="line"><span class="comment">//2.1 不忽略大小写</span></span><br><span class="line">System.out.println(s11.compareTo(s12));<span class="comment">//20；依次比较两字符串相应位置的ASCII码的大小。如果相同比较下一位，如果不同就返回此位置字符与参照字符的ASCII码的差值。如果完全相同，就返回0</span></span><br><span class="line"><span class="comment">//2.2 忽略大小写</span></span><br><span class="line"><span class="comment">// 使用compareToIgnoreCase起到忽略大小写的作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 比较前缀和后缀</span></span><br><span class="line"><span class="comment">//3.1 比较前缀boolean startsWith();</span></span><br><span class="line">System.out.println(s11.startsWith(<span class="string">"i"</span>));<span class="comment">//flase</span></span><br><span class="line">System.out.println(s11.startsWith(<span class="string">"x"</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2 比较后缀</span></span><br><span class="line">System.out.println(s11.endsWith(<span class="string">"i"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(s11.endsWith(<span class="string">"x"</span>));<span class="comment">//flase</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较前后缀小实例</span></span><br><span class="line"><span class="keyword">int</span> docNumbers = <span class="number">0</span>,javaNumbers=<span class="number">0</span>;</span><br><span class="line">String [] docFloder = &#123;<span class="string">"javaTest.doc"</span>,<span class="string">"PythonTest.docx"</span>,<span class="string">"MatlabTest.m"</span>,<span class="string">"javaFinal.ppt"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(String doc: docFloder) &#123;</span><br><span class="line">	<span class="keyword">if</span> (doc.endsWith(<span class="string">".doc"</span>)) &#123;</span><br><span class="line">		docNumbers++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String doc: docFloder) &#123;</span><br><span class="line">	<span class="keyword">if</span>(doc.startsWith(<span class="string">"java"</span>)) &#123;</span><br><span class="line">		javaNumbers++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"doc文档个数为 "</span>+docNumbers);</span><br><span class="line">System.out.println(<span class="string">"java相关文档格个数为 "</span>+javaNumbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 知识补充：trim() tool and toLowerCase() tool</span></span><br><span class="line"><span class="comment">// trim() 去掉字符串前后空白</span></span><br><span class="line"><span class="comment">// toLowerCase() 将字符串全部转化为小写</span></span><br><span class="line">System.out.println(<span class="string">"ABCDEFG"</span>.toLowerCase());</span><br><span class="line">System.out.println(<span class="string">"   abcdefg   "</span>);</span><br><span class="line">System.out.println(<span class="string">"  abcdefg  "</span>.trim().toUpperCase());<span class="comment">//去除字符串空白以后再将字符串全部转化为大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">-2</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">doc文档个数为 1</span></span><br><span class="line"><span class="comment">java相关文档格个数为 2</span></span><br><span class="line"><span class="comment">abcdefg</span></span><br><span class="line"><span class="comment">  abcdefg   </span></span><br><span class="line"><span class="comment">ABCDEFG 	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串截取</span></span><br><span class="line"><span class="comment">// 1 String substring(int beginIndex) //唯一参数为指定开始索引，这一方法会截取从开始索引到字符串末尾的子字符串</span></span><br><span class="line"><span class="comment">// 2 String substring(int beginIndex, int endIndex) //包含两个参数，开始索引和结束索引，需要注意的是所截取的字符串包括开始索引处的字符，但是不包括结束索引处的字符</span></span><br><span class="line"><span class="comment">//coding：</span></span><br><span class="line">String s_jiequString = <span class="string">"ABCDEFGHIGKLMNOPQRST"</span>;</span><br><span class="line">System.out.println(s_jiequString.substring(<span class="number">4</span>));</span><br><span class="line">System.out.println(s_jiequString.substring(<span class="number">4</span>, <span class="number">9</span>));</span><br><span class="line"><span class="comment">/*Output: </span></span><br><span class="line"><span class="comment"> * EFGHIGKLMNOPQRST</span></span><br><span class="line"><span class="comment"> * EFGHI</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 知识补充 ：使用split方法分割字符串</span></span><br><span class="line"><span class="comment">//split ：参数是字符串，返回值是String[]</span></span><br><span class="line">String s_fengeString = <span class="string">"abdabcdbafaga"</span>;</span><br><span class="line">String[] s_fenge_results= s_fengeString.split(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span> (String s_fenge_result:s_fenge_results) &#123;</span><br><span class="line">	System.out.println(s_fenge_result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment">bd</span></span><br><span class="line"><span class="comment">bcdb</span></span><br><span class="line"><span class="comment">f</span></span><br><span class="line"><span class="comment">g</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>《Matlab从入门到精通》</title>
    <url>/2020/02/19/Matlab/%E3%80%8AMatlab%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%8B/</url>
    <content><![CDATA[<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 双精度(double)：8字节；单精度(single)：4字节</span></span><br><span class="line"><span class="comment">% 复数还可以使用函数来产生复数??complex;complex接收两个参数，前一个是实部，后一个是虚数;前一个参数可以为零，但是后面的参数不行</span></span><br><span class="line"><span class="comment">% inf和-inf来表示正无穷大和负无穷大；除法运算中除数为0或者运算结果溢出都会导致inf或者-inf的结果。</span></span><br><span class="line">x=<span class="built_in">exp</span>(<span class="number">1000000</span>)</span><br><span class="line">x=<span class="built_in">log</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 上述两行代码的输出结果分别为：Inf,-Inf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% NaN用来表示一个既不是实数也不是复数的数值。NAN是Not A Number的缩写。类似0/0,inf/inf这样的表达式得到的结果均为NAN</span></span><br><span class="line"><span class="built_in">inf</span>/-<span class="built_in">inf</span></span><br><span class="line"><span class="built_in">nan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 逻辑类型</span></span><br><span class="line"><span class="comment">% 逻辑类型用1和0来表示。</span></span><br><span class="line"><span class="comment">% 函数logical()来得到逻辑类型的数值。它可以把任何非零的数值转换为逻辑true(1)，反过来也可以</span></span><br><span class="line">x = logical(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">% x = logical 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 字符和字符串</span></span><br><span class="line"><span class="comment">% Matlab中规定用char数据类型来表示一个字符串。一个char类型的1*n的数组则可以称为字符串String。Matlab中char类型都是以2字节的unicode字符来存储的</span></span><br><span class="line"><span class="comment">% 可以使用一对单引号来表示字符串：</span></span><br><span class="line">str = <span class="string">"I love china!"</span></span><br><span class="line"><span class="comment">% 也可以使用char函数来构造字符串，下面的代码将得到字符串'AB'</span></span><br><span class="line">str=char([<span class="number">65</span> <span class="number">66</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">% 函数句柄</span></span><br><span class="line"><span class="comment">% 是用来提供间接调用函数的数据类型。函数句柄可以转递给其他函数以便该函数所代表的函数就可以被调用。函数句柄还可以储存起来，以便以后利用。</span></span><br><span class="line"><span class="comment">% 函数句柄可以用符号@后面跟着函数名来表示。下面的函数句柄使得自定义变量可以用来代替tan函数的功能</span></span><br><span class="line">f=@<span class="built_in">tan</span></span><br><span class="line">jieguo=f(<span class="built_in">pi</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 结构体类型</span></span><br><span class="line"><span class="comment">% 结构体是根据属性名组织起来的不同类型数据的集合。</span></span><br><span class="line"><span class="comment">% 有一种容易与结构体类型混淆的数据类型是单元数组类型。它们之间既有相同点，也有不同点：“单元数组类型，它是一种特殊类型的MATLAB 7.0数组，</span></span><br><span class="line"><span class="comment">% 它的每一个元素叫做单元，而每一个单元包含MATLAB 7.0数组。结构体和单元数组的共同之处在于它们都提供了一种分级存储机制来存储不同类型的数据，</span></span><br><span class="line"><span class="comment">% 不同之处是组织数据的方式不一样。结构体数组里的数据是通过属性名来引用的，而在单元数组里，数据是通过单元数组下标引用来操作的。”</span></span><br><span class="line"><span class="comment">% 结构体数组是由数据容器组成的数组，这种数组容器称为结构体的属性。结构体的任何一个属性可以包含任何一种类型的数据。</span></span><br><span class="line"><span class="comment">% 和其他数据类型一样，结构体也是一个数组，一个单独的结构体就是一个1*1结构体数组。</span></span><br><span class="line"><span class="comment">% 可以构造任何维数和形状的结构体数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 结构体构造</span></span><br><span class="line"><span class="comment">% 1 利用赋值语句</span></span><br><span class="line">Student(<span class="number">1</span>).Name=<span class="string">'xiaoming'</span>;</span><br><span class="line">Student(<span class="number">1</span>).Score=<span class="number">100</span>;</span><br><span class="line">Student(<span class="number">1</span>).fees=[<span class="number">6500</span>,<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 在上面的基础上把结构体数组扩展成1*2的结构体</span></span><br><span class="line"></span><br><span class="line">Student(<span class="number">2</span>).Name=<span class="string">'xiaolei'</span>;</span><br><span class="line">Student(<span class="number">2</span>).Score=<span class="number">100</span>;</span><br><span class="line">Student(<span class="number">2</span>).fees=[<span class="number">6500</span>,<span class="number">10000</span>];</span><br><span class="line">Student(<span class="number">1</span>) <span class="comment">%多维结构数组输出时要用括号加上标量</span></span><br><span class="line">Student(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2 利用函数struct()来定义</span></span><br><span class="line"><span class="comment">% (1)单独使用struct函数</span></span><br><span class="line">Student(<span class="number">3</span>)=struct(<span class="string">'Name'</span>,<span class="string">'xiaohong'</span>,<span class="string">'Score'</span>,<span class="number">99</span>,<span class="string">'fees'</span>,[]);</span><br><span class="line">Student(<span class="number">3</span>)</span><br><span class="line"><span class="comment">% struct函数和repmat函数配合使用</span></span><br><span class="line"><span class="comment">% struct函数的输入为单元数组(后两种没有搞懂暂时)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 访问结构体数组的数据</span></span><br><span class="line">Personel=struct(<span class="string">'Name'</span>,&#123;<span class="string">'xiaolei'</span>,<span class="string">'dalei'</span>,<span class="string">'zhonglei'</span>&#125;,<span class="string">'Score'</span>,&#123;[<span class="number">100</span>,<span class="number">8</span>,<span class="number">100</span>],[<span class="number">0</span>,<span class="number">60</span>,<span class="number">90</span>],[<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>]&#125;);</span><br><span class="line">New=Personel(<span class="number">1</span>:<span class="number">2</span>)<span class="comment">% 生成新的结构体</span></span><br><span class="line">News=New(<span class="number">1</span>)<span class="comment">% 访问新结构体的第一维数据</span></span><br><span class="line">New(<span class="number">2</span>).Name<span class="comment">% 访问第一维数据的Name值</span></span><br><span class="line">Personel(<span class="number">3</span>).Score(<span class="number">2</span>)<span class="comment">% 访问第三个人的Score中的第三个值</span></span><br><span class="line">Personel.Name <span class="comment">% 用于访问结构体数组中所有元素的某个属性</span></span><br><span class="line"><span class="comment">% 使用矩阵合并符来合并上面输出的结果</span></span><br><span class="line">Personel_hebing=[Personel.Name]<span class="comment">% 'xiaoleidaleizhonglei'</span></span><br><span class="line"><span class="comment">% 也可以把它们合并在一个单元数组中</span></span><br><span class="line">Personel=&#123;Personel.Name&#125; <span class="comment">%     &#123;'xiaolei'&#125;    &#123;'dalei'&#125;    &#123;'zhonglei'&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组类型</span></span><br><span class="line"><span class="comment">% 1 单元数组的构造</span></span><br><span class="line"><span class="comment">% (1)左标志法</span></span><br><span class="line">c&#123;<span class="number">1</span>,<span class="number">1</span>&#125;=<span class="string">'nianchu'</span>;</span><br><span class="line">c&#123;<span class="number">1</span>,<span class="number">2</span>&#125;=<span class="built_in">eye</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">c&#123;<span class="number">2</span>,<span class="number">1</span>&#125;=@<span class="built_in">sec</span>;</span><br><span class="line">c&#123;<span class="number">2</span>,<span class="number">2</span>&#125;=<span class="built_in">false</span>;</span><br><span class="line">c&#123;<span class="number">3</span>,<span class="number">1</span>&#125;=<span class="built_in">true</span>;</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2.21</span></span><br><span class="line"><span class="comment">% (2)右标志法</span></span><br><span class="line"><span class="comment">% 右标志法和左标志法类似，只是将左边的标志符&#123;&#125;用括号代替，而在右边添加标志符即可</span></span><br><span class="line"><span class="comment">% 代码实现：</span></span><br><span class="line">a(<span class="number">1</span>,<span class="number">1</span>)=&#123;<span class="string">"xiaochu"</span>&#125;;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=&#123;<span class="built_in">eye</span>(<span class="number">4</span>,<span class="number">4</span>)&#125;;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">1</span>)=&#123;@<span class="built_in">tan</span>&#125;;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">2</span>)=&#123;[]&#125;;</span><br><span class="line"><span class="comment">% 或者下面这样：</span></span><br><span class="line">b=&#123;<span class="string">"chuntian"</span>,[<span class="number">341</span>,<span class="number">434</span>];<span class="string">'dream'</span>,<span class="string">'weiling'</span>&#125;;</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 知识补充：eye（）函数的用法——返回单位矩阵：当eye(m,n)中m和n参数不相等时，单位矩阵会出现全0行或列</span></span><br><span class="line"><span class="comment">% 1 返回N*N的单位矩阵</span></span><br><span class="line"><span class="comment">% 2 返回M*N的单位矩阵</span></span><br><span class="line"><span class="comment">% 3 返回和给定矩阵一样大小的单位矩阵</span></span><br><span class="line"><span class="comment">% 4 无参数时返回标量1</span></span><br><span class="line"><span class="comment">% 代码实现：</span></span><br><span class="line">a1=<span class="built_in">eye</span>(<span class="number">3</span>)</span><br><span class="line">a2=<span class="built_in">eye</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a3=<span class="built_in">eye</span>([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a4=<span class="built_in">eye</span>(<span class="built_in">size</span>(b))</span><br><span class="line">a4=<span class="built_in">eye</span>()</span><br><span class="line"><span class="comment">% 补充：～eye(m,n)为eye(m,n)中1，0完全对换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 显示单元数组的方法：</span></span><br><span class="line"><span class="comment">% 1 直接用数组的名字</span></span><br><span class="line"><span class="comment">% 2 使用函数celldisp()——使用此函数会隔行依次输出数组中的元素</span></span><br><span class="line"><span class="comment">% 法2代码实现</span></span><br><span class="line">celldisp(a)</span><br><span class="line"><span class="comment">% 说明：celldisp函数的显示格式与直接输入单元组名的显示格式是不同的。celldisp函数更适用于具有大量数据的单元数组的显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组的读取</span></span><br><span class="line"><span class="comment">% 1 读取全面c数组中&#123;1,1&#125;处的字符串：</span></span><br><span class="line">Str=c&#123;<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">% 2 读取单元数组中若干个单元的数据，例如读取第二行的数据：</span></span><br><span class="line">c(<span class="number">2</span>,:)</span><br><span class="line"><span class="comment">% 读取单元数组的第一列</span></span><br><span class="line">c(:,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 单元数组的删除</span></span><br><span class="line"><span class="comment">% 将空矩阵赋给单元数组的某一行或者某一列是可以删除这一行或者这一列</span></span><br><span class="line"><span class="comment">% 删掉c单元数组中第二列的值</span></span><br><span class="line">c(:,<span class="number">2</span>)=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵的基本操作</span></span><br><span class="line"><span class="comment">% Matlab是基于矩阵运算的一个软件，所有数据均以二维矩阵或高维数组的形式存储，Matlab又称为矩阵实验室</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 名词介绍：</span></span><br><span class="line"><span class="comment">% 标量：1*1的矩阵</span></span><br><span class="line"><span class="comment">% 向量： 1*n的矩阵</span></span><br><span class="line"><span class="comment">% 空矩阵： 至少有一堆的长度为0的矩阵称为空矩阵，用[]表示</span></span><br><span class="line">Number=<span class="number">1.5</span>;</span><br><span class="line">whos Number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵的构造</span></span><br><span class="line"><span class="comment">% 1 简单矩阵构造(略)</span></span><br><span class="line"><span class="comment">% 2 特殊矩阵构造：</span></span><br><span class="line"><span class="comment">% 举例：</span></span><br><span class="line"><span class="comment">% ones——产生矩阵元素全为1的矩阵</span></span><br><span class="line"><span class="comment">% zeros——产生矩阵元素全为0的矩阵</span></span><br><span class="line"><span class="comment">% eye——上面已经介绍过了</span></span><br><span class="line"><span class="built_in">ones</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">ones</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">zeros</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">% diag 把向量转化为对角矩阵或者得到矩阵的对角元素</span></span><br><span class="line"><span class="comment">% magic 产生魔方矩阵，即每行、每列之和相等的矩阵</span></span><br><span class="line"><span class="comment">% rand 产生0-1均匀分布的随机数（此函数是以机器时间作为随机种子的，因而每次运行得到的结果都是不同的 ）</span></span><br><span class="line"><span class="comment">% randn 产生均值为0，方差为1高斯分布的随机数</span></span><br><span class="line"><span class="comment">% randperm 产生整数1-n的随机排列</span></span><br><span class="line"><span class="comment">% compan 长生多项式的伴随矩阵</span></span><br><span class="line"><span class="comment">% Diga之对角矩阵和对角元素</span></span><br><span class="line"><span class="comment">% 形成对角矩阵</span></span><br><span class="line">Strs=<span class="string">'I will be a successful man'</span></span><br><span class="line">Value=[<span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">2</span>]</span><br><span class="line">X=<span class="built_in">diag</span>(Strs,<span class="number">-1</span>)</span><br><span class="line">X=<span class="built_in">diag</span>(Value,<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 获得对角元素</span></span><br><span class="line">Values=<span class="built_in">diag</span>(X,<span class="number">0</span>)</span><br><span class="line"><span class="comment">% 注意：当k=0时，v为X的主对角线；当k&gt;0时，v为上方第k条对角线；当k&lt;0时，v为下方第k条对角线。</span></span><br><span class="line"><span class="comment">% 如果k的值缺失，则默认为主对角</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串查找</title>
    <url>/2020/02/19/Java/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>在String类中提供了indexOf和lastIndexOf方法用于查找字符或字符串，返回值是查找的字符串所在的位置，-1表示没有找到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String的Char At(int index)方法可以返回索引index所在位置的字符</span><br></pre></td></tr></table></figure>

<p><strong><em>实例代码</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sourceString = <span class="string">"There is a string accessing exemple"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得字符串长度</span></span><br><span class="line"><span class="keyword">int</span> len = sourceString.length();</span><br><span class="line"><span class="comment">//获得索引位置16的字符串</span></span><br><span class="line"><span class="keyword">char</span> ch = sourceString.charAt(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符和子字符串</span></span><br><span class="line"><span class="keyword">int</span> firstChar1 = sourceString.indexOf(<span class="string">'r'</span>);<span class="comment">//从前往后搜索字符</span></span><br><span class="line"><span class="keyword">int</span> lastChar1 = sourceString.lastIndexOf(<span class="string">'r'</span>);<span class="comment">//从后往前搜索字符</span></span><br><span class="line"><span class="keyword">int</span> firststr1 = sourceString.indexOf(<span class="string">"ing"</span>);<span class="comment">//从前往后搜索字符串</span></span><br><span class="line"><span class="keyword">int</span> laststr1 = sourceString.lastIndexOf(<span class="string">"ing"</span>);<span class="comment">//从后往前搜索字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> firstchar2 = sourceString.indexOf(<span class="string">'e'</span>, <span class="number">15</span>);<span class="comment">//从索引为15的位置开始</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 也就是说：indexOf和lastIndexOf都还可以接收一个开始的索引</span></span><br><span class="line"><span class="comment"> * 需要注意的是：如果没有找到，是不能够从头直接跳到尾巴去接着找，</span></span><br><span class="line"><span class="comment"> * 也不能从尾巴跳到头部去继续找，这种情况下，就只能算作找不到，</span></span><br><span class="line"><span class="comment"> * 返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-字符串拼接</title>
    <url>/2020/02/18/Java/java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>由于String字符串是不可变字符串，所以String字符串进行拼接以后会产生一个新的对象。</p>
<h2 id="1-使用-号（可以连接任何类型数据拼接成为字符串）"><a href="#1-使用-号（可以连接任何类型数据拼接成为字符串）" class="headerlink" title="1 使用 + 号（可以连接任何类型数据拼接成为字符串）"></a>1 使用 + 号（可以连接任何类型数据拼接成为字符串）</h2><h2 id="2-使用-concat-String-str-方法-只能拼接String字符串"><a href="#2-使用-concat-String-str-方法-只能拼接String字符串" class="headerlink" title="2 使用 concat(String str)方法(只能拼接String字符串)"></a>2 使用 concat(String str)方法(只能拼接String字符串)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="comment">//使用+运算符连接</span></span><br><span class="line">String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">String s2 = s1 + <span class="string">" World"</span>;</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">//使用+运算符连接，支持+=赋值运算符</span></span><br><span class="line">s4 += <span class="string">" "</span>;</span><br><span class="line">s4 += <span class="string">"World"</span>;</span><br><span class="line">System.out.println(s4);</span><br><span class="line"></span><br><span class="line">String s5 =<span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">//使用concat连接</span></span><br><span class="line">s5 = s5.concat(<span class="string">" "</span>).concat(<span class="string">"World!"</span>);<span class="comment">//concat的参数和返回值都是String,所以可以连续调用该方法进行多个字符串的拼接</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">String s6 = <span class="string">"她的年龄是"</span> + age + <span class="string">"岁"</span>;</span><br><span class="line">System.out.println(s6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> score = <span class="string">'A'</span>;</span><br><span class="line">String s7 = <span class="string">"她的英语成绩是"</span> + score;</span><br><span class="line">System.out.println(s7);</span><br><span class="line"></span><br><span class="line">java.util.Date nowDate = <span class="keyword">new</span> java.util.Date();</span><br><span class="line"><span class="comment">//对象拼接自动调用toString()方法</span></span><br><span class="line"><span class="comment">/*这里解释一下：</span></span><br><span class="line"><span class="comment"> * Java中所有对象都有一个toString()方法，该方法可以将对象转换为字符串，而且拼接过程中会自动调用这个方法。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * java.util.Date类是java的日期类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String s8 = <span class="string">"今天是： "</span> + nowDate;</span><br><span class="line">System.out.println(s8);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果：</span></span><br><span class="line"><span class="comment"> *Hello World</span></span><br><span class="line"><span class="comment">*Hello World</span></span><br><span class="line"><span class="comment">*她的年龄是18岁</span></span><br><span class="line"><span class="comment">*她的英语成绩是A</span></span><br><span class="line"><span class="comment">*今天是： Wed Feb 19 00:54:22 CST 2020</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab基础</title>
    <url>/2020/02/18/Matlab/Matlab%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>如果命令很长，可以分两行来输入。（需要利用续行符…）</p>
<h2 id="设置当前文件夹"><a href="#设置当前文件夹" class="headerlink" title="设置当前文件夹"></a>设置当前文件夹</h2><p>步骤：先建立文件夹，然后在Matlab命令行中用cd命令+路径设置</p>
<h2 id="工作区也称为工作区，用于变量的显示-以表格形式-和操作-可以编辑，删除"><a href="#工作区也称为工作区，用于变量的显示-以表格形式-和操作-可以编辑，删除" class="headerlink" title="工作区也称为工作区，用于变量的显示(以表格形式)和操作(可以编辑，删除)"></a>工作区也称为工作区，用于变量的显示(以表格形式)和操作(可以编辑，删除)</h2><h2 id="Matlab的搜索路径"><a href="#Matlab的搜索路径" class="headerlink" title="Matlab的搜索路径"></a>Matlab的搜索路径</h2><p>在命令行中输入一条命令后，Matlab</p>
<p>变量 –&gt;内部函数–&gt;程序文件</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%&#123;Matlab的搜索路径有一定的顺序：变量&gt;内部函数&gt;程序文件,下面是一个实例:&#125;%</span></span><br><span class="line">x=<span class="built_in">sin</span>(<span class="number">1</span>) <span class="comment">%这里的sin是内部函数，正弦，所以结果应该是:0.8415</span></span><br><span class="line"><span class="built_in">sin</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">%这里定义sin为一个变量，包含5个向量元素，不是内部函数了</span></span><br><span class="line">x=<span class="built_in">sin</span>(<span class="number">1</span>) <span class="comment">%因为变量的级别高于内部函数，所以这个命令的结果是1而不是0.8415</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%&#123;Matlab的搜索路径有一定的顺序：变量&gt;内部函数&gt;程序文件,下面是一个实例:&#125;%</span></span><br><span class="line">x=<span class="built_in">sin</span>(<span class="number">1</span>) <span class="comment">%这里的sin是内部函数，正弦，所以结果应该是:0.8415</span></span><br><span class="line"><span class="built_in">sin</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">%这里定义sin为一个变量，包含5个向量元素，不是内部函数了</span></span><br><span class="line">x=<span class="built_in">sin</span>(<span class="number">1</span>) <span class="comment">%因为变量的级别高于内部函数，所以这个命令的结果是1而不是0.8415</span></span><br><span class="line"><span class="comment">%&#123;此时如果要计算sin的本来值，可以在工作区将已经定义的sin变量删除&#125;%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Matlab的文件搜索</span></span><br><span class="line"><span class="comment">% 如何设置文件搜索路径</span></span><br><span class="line"><span class="comment">% 1 使用path命令。例如&gt;&gt;path(path,'需要搜索的路径')</span></span><br><span class="line"><span class="comment">% 2 在窗口上设置</span></span><br><span class="line"><span class="comment">% 搜索的顺序：1 当前文件；2 已经设置的搜索路径中；3 如果两个位置都没有搜索结果则会报错</span></span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="整型："><a href="#整型：" class="headerlink" title="整型："></a>整型：</h4><p>分为：</p>
<p>1:有符号整数</p>
<p>2: 无符号整数</p>
<p>然后又分别分为8，16，32，64位整数</p>
<p>需要记住：</p>
<p>int是带符号，uint是不带符号</p>
<p>带符号8位整数的最大值是127</p>
<p>提供了数据类型转换函数</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>同样提供了类型转换函数：</p>
<p>1 single函数：将其他类型的数据转换为单精度型</p>
<p>2 double函数：将其他类型的数据转换为双精度型</p>
<h4 id="复型"><a href="#复型" class="headerlink" title="复型"></a>复型</h4><p>复型数据包括实部和虚部两个部分，都默认为双精度单位，用i或者j来表示</p>
<p>常用函数有两个：</p>
<p>real：获取复数的实部</p>
<p>imag：获取复数的虚部</p>
<h3 id="数值数据的输出格式"><a href="#数值数据的输出格式" class="headerlink" title="数值数据的输出格式"></a>数值数据的输出格式</h3><p>使用format命令，格式是：</p>
<blockquote>
<p>format 格式符</p>
</blockquote>
<p><strong>注意：format命令只影响数据输出的格式，而不影响数据的计算和存储</strong></p>
<h3 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h3><p>调用方法：</p>
<p>函数名(函数自变量的值)</p>
<p><strong><em>函数在运算时是将函数逐项作用于矩阵的每个元素上，所以最后运算的结果就是一个与自变量同类型的矩阵</em></strong></p>
<p>即<strong>作用于矩阵，结果是矩阵</strong></p>
<p><em>1 函数的调用格式：(实例)</em></p>
<p><em>2 常用函数的应用</em></p>
<blockquote>
<p>三角函数</p>
</blockquote>
<p>三角函数也分为两种类型：</p>
<p>以弧度为单位的函数和以角度为单位的函数，如果是以角度为单位的函数，则在调用时应该在函数名后面加上d，以示区别。</p>
<blockquote>
<p>abs函数</p>
</blockquote>
<p>可以用来求实数的绝对值、复数的模、字符串的ASCII码值，具体操作见后面代码</p>
<blockquote>
<p>取整函数</p>
</blockquote>
<p>有round、fix、floor、ceil四种类型，具体实例见文章尾部</p>
<p> <em>3 函数应用举例</em></p>
<blockquote>
<p>1 分别求一个三位正整数的个、十、百位</p>
</blockquote>
<blockquote>
<p>2 求[1,100]区间的所有素数</p>
</blockquote>
<p>代码见后面。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 转换函数实例</span></span><br><span class="line">class(<span class="number">4</span>)</span><br><span class="line">(class(single(<span class="number">4</span>)))</span><br><span class="line"><span class="comment">%&#123;结果分别是ans ='double'，ans ='single'&#125;%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%format来设置数值数据的输出形式</span></span><br><span class="line"><span class="comment">% 格式：format 格式符</span></span><br><span class="line"><span class="comment">% 实例：</span></span><br><span class="line">format long </span><br><span class="line"><span class="number">50</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">% 此时的输出结果是：16.666666666666668</span></span><br><span class="line">format</span><br><span class="line"><span class="number">50</span>/<span class="number">3</span></span><br><span class="line"><span class="comment">% 重置以后结果变回了：16.6667</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%常用函数实例</span></span><br><span class="line"><span class="comment">%exp函数实例</span></span><br><span class="line"><span class="comment">% 在matlab中exp意思是以自然常数e为底的指数函数。返回 e（自然对数的底）的幂次方。</span></span><br><span class="line">A = [<span class="number">4</span>,<span class="number">2</span>;<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">B = <span class="built_in">exp</span>(A)</span><br><span class="line"><span class="comment">%&#123;输出结果：B =54.5982    7.3891 20.0855  403.4288&#125;%</span></span><br><span class="line"><span class="comment">% 上行结果格式和真实情况不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%三角函数的两种调用方法：</span></span><br><span class="line"><span class="comment">% 1</span></span><br><span class="line"><span class="built_in">cos</span>(<span class="built_in">pi</span>)</span><br><span class="line"><span class="comment">% 2 </span></span><br><span class="line"><span class="built_in">cosd</span>(<span class="number">180</span>)</span><br><span class="line"><span class="comment">% 两种方法结果肯定是一样的</span></span><br><span class="line"><span class="comment">% 结果：-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%abs函数使用实例：</span></span><br><span class="line"><span class="comment">% 1 求绝对值</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="number">-100</span>)</span><br><span class="line"><span class="comment">% ans = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%2 求复数的模</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="number">5</span>+<span class="number">12</span><span class="built_in">i</span>)</span><br><span class="line"><span class="comment">% ans = 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%3 求字符串的ASCII码</span></span><br><span class="line"><span class="built_in">abs</span>(<span class="string">'abd'</span>)</span><br><span class="line"><span class="comment">% ans 87 98 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 取整函数</span></span><br><span class="line"><span class="comment">% 1 round:按照四舍五入取整</span></span><br><span class="line"><span class="comment">% 2 ceil：向上取整，即取大于等于这个数的第一个整数</span></span><br><span class="line"><span class="comment">% 3 floor：向下取整，取小于等于这个数的第一个整数</span></span><br><span class="line"><span class="comment">% 4 fix： 取靠近0的那个整数，也就是舍去小数取整</span></span><br><span class="line"><span class="comment">% 实例：</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">4.7</span>)</span><br><span class="line"><span class="built_in">fix</span>(<span class="number">-3.2</span>)</span><br><span class="line"><span class="built_in">floor</span>(<span class="number">3.6</span>)</span><br><span class="line"><span class="built_in">ceil</span>(<span class="number">-3.8</span>)</span><br><span class="line"><span class="comment">%ans=5;ans=-3;ans=3;ans=-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 函数应用举例1：分别求出一个三位整数的个位、十位、百位</span></span><br><span class="line"><span class="comment">% rem是取余函数</span></span><br><span class="line">m=<span class="number">345</span>;</span><br><span class="line">m1=<span class="built_in">rem</span>(m,<span class="number">10</span>)<span class="comment">%个位数</span></span><br><span class="line">m2=<span class="built_in">rem</span>(<span class="built_in">fix</span>(m/<span class="number">10</span>),<span class="number">10</span>)</span><br><span class="line">m3=<span class="built_in">fix</span>(m/<span class="number">100</span>)</span><br><span class="line"><span class="comment">% m1=5;m2=4;m3=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%函数应用举例2：求[1,00]区间的所有素数</span></span><br><span class="line">x=<span class="number">1</span>:<span class="number">100</span>;</span><br><span class="line">k=<span class="built_in">isprime</span>(x);<span class="comment">%isprime用来判断一个数是否能被2整除，能为真，不能则为假</span></span><br><span class="line">k1=<span class="built_in">find</span>(k);<span class="comment">%find用来找出为真的x序列</span></span><br><span class="line">p=x(k1)<span class="comment">%输出1到100之间的素数</span></span><br></pre></td></tr></table></figure>

<h3 id="对句柄的理解"><a href="#对句柄的理解" class="headerlink" title="对句柄的理解"></a>对句柄的理解</h3><p>句柄是matlab语言独有的参数，相当于C语言的指针。 </p>
]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>yield</title>
    <url>/2020/02/18/Python/yield/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yield</span></span><br><span class="line"><span class="comment"># 带有yield的函数在Python中被称为generator(生成器)</span></span><br><span class="line"><span class="comment">##   如何生成斐波那契数列</span></span><br><span class="line"><span class="comment"># 第一版</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def fab(max):</span></span><br><span class="line"><span class="string">	n, a , b  = 0, 0, 1</span></span><br><span class="line"><span class="string">	while n &lt; max:</span></span><br><span class="line"><span class="string">		print(b)</span></span><br><span class="line"><span class="string">		a , b  = b, a + b</span></span><br><span class="line"><span class="string">		n = n + 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fab(6)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">## 输出斐波那契数列前N个第二版</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def fab(max):</span></span><br><span class="line"><span class="string">	n, a, b = 0, 0, 1</span></span><br><span class="line"><span class="string">	L = []</span></span><br><span class="line"><span class="string">	while n &lt; max:</span></span><br><span class="line"><span class="string">		L.append(b)</span></span><br><span class="line"><span class="string">		a, b = b, a + b</span></span><br><span class="line"><span class="string">		n = n + 1</span></span><br><span class="line"><span class="string">	return L</span></span><br><span class="line"><span class="string">for n in fab(5):</span></span><br><span class="line"><span class="string">	print(n)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''改写后的fab函数通过满足返回List能够满足复用性的要求，但是，随着max越来越大，会导致程序所占内存越来越大</span></span><br><span class="line"><span class="string">所以更好的做法是通过iterable对象来迭代'''</span></span><br><span class="line"><span class="comment">### 第三版 -----有错</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">class Fab(object):</span></span><br><span class="line"><span class="string">	def __int__(self, max):</span></span><br><span class="line"><span class="string">		self.max = max</span></span><br><span class="line"><span class="string">		self.n, self.a, self.b = 0, 0, 1</span></span><br><span class="line"><span class="string">	def __iter__(self):</span></span><br><span class="line"><span class="string">		return self</span></span><br><span class="line"><span class="string">	def next(self):</span></span><br><span class="line"><span class="string">		if self.n &lt; self.max:</span></span><br><span class="line"><span class="string">			r = self.b</span></span><br><span class="line"><span class="string">			self.a, self.b =self.b, self.a + self.b</span></span><br><span class="line"><span class="string">			self.n = n + 1</span></span><br><span class="line"><span class="string">			return r</span></span><br><span class="line"><span class="string">		raise StopIteration()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for n in Fab(5):</span></span><br><span class="line"><span class="string">	print(n)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#### 第四版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span></span><br><span class="line">	n , a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> n  &lt; max:</span><br><span class="line">		<span class="keyword">yield</span> b</span><br><span class="line">		a, b = b, a + b</span><br><span class="line">		n = n+ <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>):</span><br><span class="line">	print(n)</span><br><span class="line"><span class="string">"""简单的讲：yield就是把一个函数变成一个generator，带有yield的函数不再是一个普通函数，Python解释器会将其视为一个</span></span><br><span class="line"><span class="string">generator，调用fab(5)不会执行fab函数，而是返回一个iterable对象！</span></span><br><span class="line"><span class="string">结论：一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起</span></span><br><span class="line"><span class="string">来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）</span></span><br><span class="line"><span class="string">才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭</span></span><br><span class="line"><span class="string">代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被</span></span><br><span class="line"><span class="string"> yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。yield 的好处是显而易见的，把</span></span><br><span class="line"><span class="string"> 一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() </span></span><br><span class="line"><span class="string"> 的值，不仅代码简洁，而且执行流程异常清晰</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 可以使用 isgeneratorfunction来判断是不是一个特殊的generator函数</span></span><br><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> isgeneratorfunction</span><br><span class="line">print(isgeneratorfunction(fab))</span><br><span class="line"></span><br><span class="line"><span class="string">"""输出结果：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pytho的and返回值</title>
    <url>/2020/02/17/Python/pytho%E7%9A%84and%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python的and返回值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在布尔上下文中从左到右演算表达式的值，如果布尔上下文中的所有值都为真，那么 and 返回最后一个值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果布尔上下文中的某个值为假，则 and 返回第一个假值。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 实例1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span> <span class="keyword">and</span> n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(re(<span class="number">0</span>))<span class="comment">#因为非零即假，所以返回第一个表达式的值</span></span><br><span class="line">print(re(<span class="number">100</span>))<span class="comment"># 因为100为真，所以返回后一个表达式的值</span></span><br><span class="line"><span class="comment"># 实例2</span></span><br><span class="line"><span class="string">"""对于字符串而言，其中有空格的字符串为假，否则为真"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">st</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(st(<span class="string">'happy '</span>))<span class="comment">#这里有空格为假的，则返回后一个表达式的值。经过strip方法之后，末尾的空格被剔除了</span></span><br><span class="line">print(st(<span class="string">'names'</span>))<span class="comment"># 这里为空格，则直接返回这个字符串</span></span><br><span class="line">print(st(<span class="string">'fa fdaf'</span>))<span class="comment"># strip只对首尾的对象管用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">10000</span></span><br><span class="line"><span class="string">happy</span></span><br><span class="line"><span class="string">names</span></span><br><span class="line"><span class="string">fa fdaf</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Strip方法</title>
    <url>/2020/02/17/Python/Strip%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strip方法用于移除字符串头尾的字符（默认为空格或者换行符）或字符序列</span></span><br><span class="line">strs = <span class="string">"happp "</span></span><br><span class="line">print(strs.strip())</span><br><span class="line"></span><br><span class="line">print(strs.strip().strip(<span class="string">'p'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""输出结果：</span></span><br><span class="line"><span class="string">happp</span></span><br><span class="line"><span class="string">ha</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>filter函数</title>
    <url>/2020/02/17/Python/filter%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># filter ： Python内建的filter函数用于过滤序列</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">和map()类似。filter也接收一个序列。区别是：filter把传入额函数依次作用于每个元素，然后根据</span></span><br><span class="line"><span class="string">返回值是True 还是Flase决定保留还是丢弃该元素</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">            <span class="comment">#在一个list中删掉偶数，只保留奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">print(list(filter(is_odd, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个序列中的空字符串删掉</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line">print(list(filter(not_empty,[<span class="string">'a'</span>, <span class="string">''</span>, <span class="literal">None</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])))</span><br><span class="line"><span class="string">"""返回值：</span></span><br><span class="line"><span class="string">['a', 'B', 'C', 'D']</span></span><br><span class="line"><span class="string">注意到：filter函数返回的是一个lterator，也就是一个惰性序列，所以要强迫fliter完成计算结果，需要用到方法list</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>课程导入</title>
    <url>/2020/02/17/Matlab/%E8%AF%BE%E7%A8%8B%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<h1 id="什么叫计算"><a href="#什么叫计算" class="headerlink" title="什么叫计算"></a>什么叫计算</h1><p>1 算术运算</p>
<p>2 较复杂的运算：即根据已知量求出未知量</p>
<h1 id="什么叫科学计算"><a href="#什么叫科学计算" class="headerlink" title="什么叫科学计算"></a>什么叫科学计算</h1><p>对于复杂的数值计算问题，可以利用计算机进行问题求解</p>
<blockquote>
<p>利用计算机进行数值计算的方法叫做数值计算</p>
</blockquote>
<h1 id="科学计算与Matlab语言的关系"><a href="#科学计算与Matlab语言的关系" class="headerlink" title="科学计算与Matlab语言的关系"></a>科学计算与Matlab语言的关系</h1><blockquote>
<p>数值问题 ——&gt; 求解算法 ——&gt; 程序实现——&gt; 结果分析</p>
</blockquote>
<p>Matlab是矩阵实验室的缩写</p>
<h2 id="Matlab语言的主要功能"><a href="#Matlab语言的主要功能" class="headerlink" title="Matlab语言的主要功能"></a>Matlab语言的主要功能</h2><p>例如：可以求解一元二次方程</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = [<span class="number">1</span>,<span class="number">-3</span>,<span class="number">1</span>];</span><br><span class="line">x = roots(p)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰Python教程练习题</title>
    <url>/2020/02/16/Python/%E5%BB%96%E9%9B%AA%E5%B3%B0Python%E6%95%99%E7%A8%8B%E7%BB%83%E4%B9%A0%E9%A2%98_%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># names.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name.capitalize()</span><br><span class="line"></span><br><span class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</span><br><span class="line">L2 = list(map(normalize, L1))</span><br><span class="line">print(L2)</span><br><span class="line"><span class="comment"># 求积</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prod1</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line">    <span class="keyword">return</span> reduce(prod1, L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'3 * 5 * 7 * 9 ='</span>, prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="comment"># 转换字符串</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">先记住这个结果，等会实现需要用到</span></span><br><span class="line"><span class="string">a = '123.456'</span></span><br><span class="line"><span class="string">n = a.index('.')</span></span><br><span class="line"><span class="string">b = [x for x in a[:n]]</span></span><br><span class="line"><span class="string">print(b)</span></span><br><span class="line"><span class="string">结果：</span></span><br><span class="line"><span class="string">['1', '2', '3']</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    n = s.index(<span class="string">'.'</span>)</span><br><span class="line">    s1 = list(map(int, [x <span class="keyword">for</span> x <span class="keyword">in</span> s[:n]]))</span><br><span class="line">    s2 = list(map(int, [y <span class="keyword">for</span> y <span class="keyword">in</span> s[n+<span class="number">1</span>: ]]))</span><br><span class="line">    <span class="keyword">return</span> reduce(fn,s1) + (reduce(fn, s2) / <span class="number">10</span> ** len(s2))</span><br><span class="line"></span><br><span class="line">print(str2float(<span class="string">'123.456'</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">['Adam', 'Lisa', 'Bart']</span></span><br><span class="line"><span class="string">3 * 5 * 7 * 9 = 945</span></span><br><span class="line"><span class="string">123.456</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python/Python—函数式子编程</title>
    <url>/2020/02/15/Python/Python%E2%80%94%E5%87%BD%E6%95%B0%E5%BC%8F%E5%AD%90%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个最简单的高阶函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (f(x)+f(y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(add(<span class="number">500</span>,<span class="number">20</span>,abs))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">520</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># map函数</span></span><br><span class="line"><span class="string">"""map函数接受两个参数，一个是函数，一个是lterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的lterable返回"""</span></span><br><span class="line"><span class="comment"># 代码实现：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sq</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line">print(list(map(sq,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])))</span><br><span class="line"><span class="comment">#reduce函数</span></span><br><span class="line"><span class="comment"># reduce函数：reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</span></span><br><span class="line"><span class="comment">## 用reduce函数实现序列的求和</span></span><br><span class="line"><span class="comment"># 使用时需要先导入一个模块</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">numbers = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(reduce(add,numbers))</span><br><span class="line"><span class="comment"># 其实用sum函数求和更简单</span></span><br><span class="line">print(sum(numbers))</span><br><span class="line"><span class="comment">## reduce的妙用：将[1，3，5，7，9，]变为整数13579</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">print(reduce(f,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="comment">## map + reduce 实现str转int</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>:<span class="number">0</span>,<span class="string">'1'</span>:<span class="number">1</span>,<span class="string">'2'</span>:<span class="number">2</span>,<span class="string">'3'</span>:<span class="number">3</span>,<span class="string">'4'</span>:<span class="number">4</span>,<span class="string">'5'</span>:<span class="number">5</span>,<span class="string">'6'</span>:<span class="number">6</span>,<span class="string">'7'</span>:<span class="number">7</span>,<span class="string">'8'</span>:<span class="number">8</span>,<span class="string">'9'</span>:<span class="number">9</span>&#125;[s]</span><br><span class="line"><span class="comment"># 上一行函数是简单的给出key调用字典的value。s必须在字典key里。关键在于字符串在python里是可以</span></span><br><span class="line"><span class="comment"># 被当做list用的。map(char2num, '13579')把字符串'13579'当list用，于是就变成了</span></span><br><span class="line"><span class="comment"># map(char2num, ['1','3','5','7','9'])得到的是[1, 3, 5, 7, 9]</span></span><br><span class="line">reduce(f,map(char2num, <span class="string">'13579'</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">520</span></span><br><span class="line"><span class="string">[1, 9, 25, 49, 81]</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">13579</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python/sum函数</title>
    <url>/2020/02/15/Python/sum%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列求和</span></span><br><span class="line">print(sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,]))</span><br><span class="line"><span class="comment"># sum函数的原型是sum(iterable,start).可以设置一个初始值</span></span><br><span class="line">print(sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,],<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 展开2层的嵌套列表</span></span><br><span class="line">iterable = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">print(sum(iterable,[<span class="number">0</span>]))<span class="comment"># 后面的start可以为空</span></span><br><span class="line"><span class="comment"># sum函数与下列函数等效</span></span><br><span class="line">start = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">    start += element</span><br><span class="line">print(start)</span><br><span class="line">start = [<span class="number">0</span>]</span><br><span class="line"><span class="comment"># sum 函数可以看作reduce()的特殊情况</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line">print(reduce(add,iterable,start))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Java/Java学习记录</title>
    <url>/2020/02/10/Java/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123; <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句组<span class="number">1</span> <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">语句组<span class="number">2</span> <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">语句组<span class="number">3</span> ...</span><br><span class="line"><span class="keyword">case</span> 判断值n: 语句组n</span><br><span class="line"><span class="keyword">default</span>: 语句组n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>switch语句中“表达式”计算结果只能是int，byte，short，char类型，不能是long更不能是其他的类型。</p>
</blockquote>
<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h2 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h2 id="for-each语句"><a href="#for-each语句" class="headerlink" title="for-each语句"></a>for-each语句</h2><blockquote>
<p>Java 5之后提供了一种专门用于遍历集合的for循环——for-each循环。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span>[ ]numbers = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">		System.out.printf(<span class="string">"for-each 语句%n"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> number : numbers) &#123;</span><br><span class="line">			System.out.printf(<span class="string">"%d%n"</span>,number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">for-each 语句</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><blockquote>
<p>跳转语句能够改变程序的执行顺序，可以实现程序的跳转。</p>
</blockquote>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><h3 id="break-不带标签"><a href="#break-不带标签" class="headerlink" title="break;不带标签"></a>break;不带标签</h3><h3 id="break-label；带标签"><a href="#break-label；带标签" class="headerlink" title="break label；带标签"></a>break label；带标签</h3><blockquote>
<p>默认情况下，break只会跳出最近的内循环。如果要跳出代码第1行的外循环， 可以为外循环添加一个标签，注意在定义标签的时候后面跟一个冒号</p>
</blockquote>
<blockquote>
<p>添加标签对于多层嵌套循环是很有必要的，适 当使用可以提高程序的执行效率。</p>
</blockquote>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><h3 id="带标签"><a href="#带标签" class="headerlink" title="带标签"></a>带标签</h3><h3 id="不带标签"><a href="#不带标签" class="headerlink" title="不带标签"></a>不带标签</h3><p><strong>例子</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nianchu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a=<span class="number">5</span>,b=<span class="number">2</span>;</span><br><span class="line">		x1:<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">3</span>;a++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">3</span>;b++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(a==b) &#123;</span><br><span class="line">					<span class="keyword">continue</span> x1;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.printf(<span class="string">"(%d,%d)"</span>,a,b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">(1,0)(2,0)(2,1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>





<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="输出时可以用-号将要输出的两部分连在一起"><a href="#输出时可以用-号将要输出的两部分连在一起" class="headerlink" title="输出时可以用+号将要输出的两部分连在一起"></a>输出时可以用+号将要输出的两部分连在一起</h2><p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"C"</span> + <span class="string">"LOVE"</span> + <span class="string">"L"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h2><blockquote>
<p>numbers.length</p>
</blockquote>
<h2 id="print-printf-println的区别"><a href="#print-printf-println的区别" class="headerlink" title="print,printf,println的区别"></a>print,printf,println的区别</h2><p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf主要是继承了C语言的printf的一些特性，可以进行格式化输出</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print就是一般的标准输出，但是不换行</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println和print基本没什么差别，就是最后会换行</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java/Java打印九九乘法表</title>
    <url>/2020/02/10/Java/Java%E6%89%93%E5%8D%B0%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nianchu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i= <span class="number">1</span>;i  &lt;= <span class="number">9</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">				System.out.printf(<span class="string">"%d*%d=%d"</span>,j,i,j*i);</span><br><span class="line">				System.out.printf(<span class="string">"  "</span>);</span><br><span class="line">				<span class="keyword">if</span>(j==i) &#123;</span><br><span class="line">					System.out.printf(<span class="string">"%n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">1*1=1  </span></span><br><span class="line"><span class="comment">1*2=2  2*2=4  </span></span><br><span class="line"><span class="comment">1*3=3  2*3=6  3*3=9  </span></span><br><span class="line"><span class="comment">1*4=4  2*4=8  3*4=12  4*4=16  </span></span><br><span class="line"><span class="comment">1*5=5  2*5=10  3*5=15  4*5=20  5*5=25  </span></span><br><span class="line"><span class="comment">1*6=6  2*6=12  3*6=18  4*6=24  5*6=30  6*6=36  </span></span><br><span class="line"><span class="comment">1*7=7  2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49  </span></span><br><span class="line"><span class="comment">1*8=8  2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64  </span></span><br><span class="line"><span class="comment">1*9=9  2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>15.全排列</title>
    <url>/2020/01/19/Lintcode%E5%88%B7%E9%A2%98/15.%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><p>给定一个数字列表，返回其所有可能的排列。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a><strong>样例</strong></h3><p><strong>样例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[1]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>样例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3]</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a><em>实现</em></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param: nums: A list of integers.</span></span><br><span class="line"><span class="string">    @return: A list of permutations.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        pailie = list(itertools.permutations(nums))  <span class="comment"># 要list一下，不然它只是一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pailie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.permute([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Lintcode刷题</category>
      </categories>
  </entry>
  <entry>
    <title>22.列表扁平化</title>
    <url>/2020/01/19/Lintcode%E5%88%B7%E9%A2%98/22.%E5%88%97%E8%A1%A8%E6%89%81%E5%B9%B3%E5%8C%96/</url>
    <content><![CDATA[<h3 id="22-列表扁平化"><a href="#22-列表扁平化" class="headerlink" title="22. 列表扁平化"></a>22. 列表扁平化</h3><p>给定一个列表，该列表中的每个元素要么是个列表，要么是整数。将其变成一个只包含整数的简单列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @param nestedList a list, each element in the list</span></span><br><span class="line">    <span class="comment"># can be a list or integer, for example [1,2,[1,2]]</span></span><br><span class="line">    <span class="comment"># @return &#123;int[]&#125; a list of integer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, nestedList)</span>:</span></span><br><span class="line">        a = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nestedList)):<span class="comment">#用于判断给定列表中的元素是否含有列表（注：这一目的主要是为了结束递归的死循环）</span></span><br><span class="line">            <span class="keyword">if</span> type(nestedList[i]) == list:<span class="comment">#如果有就将列表中的列表分别取出来放到新的列表中</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nestedList)):</span><br><span class="line">                    <span class="keyword">if</span> type(nestedList[j]) != list:</span><br><span class="line">                        a.append(nestedList[j])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(nestedList[j])):</span><br><span class="line">                            a.append((nestedList[j])[k])</span><br><span class="line">                <span class="keyword">return</span> Solution.flatten(self,a)<span class="comment">#使用递归完成多次“套娃”的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nestedList<span class="comment">#如果没有就直接返回这个列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">4</span>,[<span class="number">3</span>,[<span class="number">2</span>,[<span class="number">1</span>]]]]</span><br><span class="line">so = Solution()</span><br><span class="line">print(so.flatten(nums))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">[4, 3, 2, 1]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Lintcode刷题</category>
      </categories>
  </entry>
  <entry>
    <title>14.二分查找</title>
    <url>/2020/01/17/Lintcode%E5%88%B7%E9%A2%98/14.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><p>给定一个排序的整数数组（升序）和一个要查找的整数<code>target</code>，用<code>O(logn)</code>的时间查找到target第一次出现的下标（从0开始），如果target不存在于数组中，返回<code>-1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param nums: The integer array.</span></span><br><span class="line"><span class="string">    @param target: Target to find.</span></span><br><span class="line"><span class="string">    @return: The first position of target. Position starts from 0.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">            low = <span class="number">0</span></span><br><span class="line">            high = len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">                mid = low + (high - low) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span>  nums[mid] == target:</span><br><span class="line">                    <span class="keyword">while</span>(mid &gt;= <span class="number">0</span>):<span class="comment">#新增加的while和if用于解决有重复数字的情况，并保证每次都输出第一次出现的target的下标</span></span><br><span class="line">                        <span class="keyword">if</span> nums[mid] != target:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        mid = mid - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> mid &lt;= <span class="number">-1</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                    <span class="keyword">return</span> mid + <span class="number">1</span><span class="comment">#多减了一次，所以输出时+1</span></span><br><span class="line">                <span class="keyword">elif</span>  target &gt; nums[mid]:</span><br><span class="line">                    low = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">18</span>]</span><br><span class="line">so = Solution()</span><br><span class="line">print(so.binarySearch(nums,<span class="number">9</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Lintcode刷题</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python itertools模块</title>
    <url>/2020/01/14/Python/Python%20itertools%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>Python内置的itertools模块中包含了一系列用来产生不同款类型迭代器的函数和类，这些函数的返回值都是一个迭代器。</p>
<h1 id="迭代器函数类型"><a href="#迭代器函数类型" class="headerlink" title="迭代器函数类型"></a>迭代器函数类型</h1><p><em>无限迭代器</em>：生成一个无限序列，比如自然序列1，2，3，4…;</p>
<p><em>有限迭代器</em>：接受一个或多个序列作为参数，进行组合、分组和过滤</p>
<p><em>组合生成器</em>：序列的排列、组合，求序列的笛卡尔积等</p>
<h2 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h2><h2 id="组合生成器"><a href="#组合生成器" class="headerlink" title="组合生成器"></a>组合生成器</h2><h3 id="product：-product用于求多个可迭代对象的组合，它跟嵌套的for循环等价。"><a href="#product：-product用于求多个可迭代对象的组合，它跟嵌套的for循环等价。" class="headerlink" title="product： product用于求多个可迭代对象的组合，它跟嵌套的for循环等价。"></a>product： product用于求多个可迭代对象的组合，它跟嵌套的for循环等价。</h3><p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">"12345"</span>,<span class="string">"ABCDE"</span>):</span><br><span class="line">    print(i,end=<span class="string">''</span>)</span><br><span class="line">    j = j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"一共有&#123;&#125;种组合"</span>.format(j))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果为:</span></span><br><span class="line"><span class="string">('1', 'A')('1', 'B')('1', 'C')('1', 'D')('1', 'E')('2', 'A')('2', 'B')('2', 'C')('2', 'D')('2', 'E')('3', 'A')('3', 'B')('3', 'C')('3', 'D')('3', 'E')('4', 'A')('4', 'B')('4', 'C')('4', 'D')('4', 'E')('5', 'A')('5', 'B')('5', 'C')('5', 'D')('5', 'E')</span></span><br><span class="line"><span class="string">一共有25种组合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<h3 id="permutations-用于生成一个全排列"><a href="#permutations-用于生成一个全排列" class="headerlink" title="permutations: 用于生成一个全排列"></a>permutations: 用于生成一个全排列</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(list(itertools.permutations(nums)))</span><br><span class="line"></span><br><span class="line"><span class="string">"""输出结果：</span></span><br><span class="line"><span class="string">[(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<h3 id="combinations-用于求序列的组合"><a href="#combinations-用于求序列的组合" class="headerlink" title="combinations:用于求序列的组合"></a>combinations:用于求序列的组合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(list(itertools.combinations(nums,<span class="number">2</span>)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h4 id="⚠️注意区分product、permutations和combinations的区别"><a href="#⚠️注意区分product、permutations和combinations的区别" class="headerlink" title="⚠️注意区分product、permutations和combinations的区别"></a>⚠️注意区分product、permutations和combinations的区别</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python小技巧</title>
    <url>/2020/01/14/Python/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="sorted-方法——可用于给字符串排序，通常是按照字母表的顺序"><a href="#sorted-方法——可用于给字符串排序，通常是按照字母表的顺序" class="headerlink" title="sorted()方法——可用于给字符串排序，通常是按照字母表的顺序"></a>sorted()方法——可用于给字符串排序，通常是按照字母表的顺序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"fadsfga"</span></span><br><span class="line">print(sorted(a))</span><br><span class="line"></span><br><span class="line"><span class="string">"""输出结果：</span></span><br><span class="line"><span class="string">['a', 'a', 'd', 'f', 'f', 'g', 's']</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'fnsadfgdsgsadfdsa'</span></span><br><span class="line">b = a.count(<span class="string">'f'</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<h2 id="ord-函数"><a href="#ord-函数" class="headerlink" title="ord()函数"></a>ord()函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## ord()函数# ord() 函数以一个字符作为参数，返回参数对应的 ASCII 数值，便于和后面捕捉的键位关联</span></span><br><span class="line"></span><br><span class="line">print(ord(<span class="string">'a'</span>))</span><br><span class="line">print(ord(<span class="string">'A'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">97</span></span><br><span class="line"><span class="string">65</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<h2 id="二元、三元表达式"><a href="#二元、三元表达式" class="headerlink" title="二元、三元表达式"></a>二元、三元表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 二元表达式</span></span><br><span class="line"></span><br><span class="line">init = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">number = <span class="number">100</span> <span class="keyword">if</span> init <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(number)</span><br><span class="line"></span><br><span class="line"><span class="comment">##三元表达</span></span><br><span class="line">wide= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">new_w = <span class="number">299</span> <span class="keyword">if</span>  wide&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">'sdf'</span> <span class="keyword">if</span> wide==<span class="number">0</span> <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line">print(new_w)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">28</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<h2 id="randrange——获取指定范围内的随机数"><a href="#randrange——获取指定范围内的随机数" class="headerlink" title="randrange——获取指定范围内的随机数"></a>randrange——获取指定范围内的随机数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## randrange---给定一个范围，获取范围之内的随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.randrange(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>



<h2 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate()函数"></a>enumerate()函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">names = <span class="string">'chenqiaochu'</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(names):</span><br><span class="line">  print(key,value)</span><br><span class="line">  </span><br><span class="line"> <span class="string">'''output:</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure>



<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p><strong><em>Python不能直接将包含小数点的字符串’1127437398.85751’ 转换为整数</em></strong></p>
<h2 id="关于字典键值对的输入"><a href="#关于字典键值对的输入" class="headerlink" title="关于字典键值对的输入"></a>关于字典键值对的输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span> : <span class="string">'重庆'</span>,<span class="string">'mather'</span> : <span class="string">'China'</span> &#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> a.keys():</span><br><span class="line">    print(key, a[key])</span><br><span class="line"><span class="string">'''输出结果：</span></span><br><span class="line"><span class="string">name 重庆</span></span><br><span class="line"><span class="string">mather China</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="关于字典"><a href="#关于字典" class="headerlink" title="关于字典"></a>关于字典</h2><h2 id="键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行。"><a href="#键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行。" class="headerlink" title="键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行。"></a>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行。</h2><h2 id="字典内置函数总结："><a href="#字典内置函数总结：" class="headerlink" title="字典内置函数总结："></a>字典内置函数总结：</h2><p>1.cmp(dict1,dict2):比较两个元素</p>
<p>(比较方法见：)</p>
<blockquote>
<p> <a href="https://blog.csdn.net/b_11111/article/details/52830590" target="_blank" rel="noopener">https://blog.csdn.net/b_11111/article/details/52830590</a></p>
</blockquote>
<p>2.len()计算字典元素个数，即键的总数</p>
<p>3.str()输出字典可打印的字符串表示</p>
<p>4.type返回变量的类型，如果变量是字典就返回字典类型</p>
<h2 id="字典内置方法总结："><a href="#字典内置方法总结：" class="headerlink" title="字典内置方法总结："></a>字典内置方法总结：</h2><p>1.clear删除字典内的所有元素</p>
<p>2.copy返回一个字典的浅复制</p>
<p>3.fromkeys(sep,[,val]):创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</p>
<p>4.get(key)返回指定键的值，如果值不在字典中就返回None</p>
<p>5.has_key(key)如果键在字典dict中返回true,否则返回flase</p>
<p>6.items：以列表返回可遍历的(键值对)元组数组</p>
<p>7.keys：以列表返回一个字典所有的键</p>
<p>8.values:以列表返回字典中的所有值</p>
<p>9.update(dice2):把字典dict2中键值对更新到dict中</p>
<p>10.pop：删除给定键key所对应的值，也一同删除了键，返回值为被删除的值</p>
<p>11.popitem:返回并删除字典中最后一对键和值</p>
<h2 id="用字典中的元素创建一个新的字典"><a href="#用字典中的元素创建一个新的字典" class="headerlink" title="用字典中的元素创建一个新的字典"></a>用字典中的元素创建一个新的字典</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dicts = &#123;&#125;</span><br><span class="line">dicts[<span class="string">'first'</span>] = <span class="string">"china"</span></span><br><span class="line">dicts[<span class="string">'lover'</span>] = <span class="string">'chongqing'</span></span><br><span class="line"># 用列表中的元素重新创建一个新列表</span><br><span class="line">dicts1 = &#123;&#125;</span><br><span class="line">print(dicts[<span class="string">'first'</span>])</span><br><span class="line">dicts1 = &#123;<span class="string">'a'</span>:dicts[<span class="string">'first'</span>],<span class="string">'b'</span>:dicts[<span class="string">'lover'</span>]&#125;</span><br><span class="line">print(dicts1)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;'</span>a<span class="string">': '</span>chenqiaochu<span class="string">', '</span>b<span class="string">': '</span>leibowen<span class="string">'&#125;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure>

<h2 id="变量可以指向函数"><a href="#变量可以指向函数" class="headerlink" title="变量可以指向函数"></a>变量可以指向函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = abs</span><br><span class="line">print(f(<span class="number">-100</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果:</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="函数名其实就是指向函数的变"><a href="#函数名其实就是指向函数的变" class="headerlink" title="函数名其实就是指向函数的变"></a>函数名其实就是指向函数的变</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abs =<span class="number">10</span></span><br><span class="line">print(abs)</span><br><span class="line">print(abs(<span class="number">-200</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/Users/bowenkei/Desktop/Python/项目2-数据可视化/test.py", line 3, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(abs(-200))</span></span><br><span class="line"><span class="string">TypeError: 'int' object is not callable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 有结果可以看出，此时abs已经失去了原有函数的意思了</span></span><br></pre></td></tr></table></figure>

<h2 id="传入函数"><a href="#传入函数" class="headerlink" title="传入函数"></a>传入函数</h2><blockquote>
<p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最简单的高阶函数</span></span><br><span class="line"><span class="comment"># 一个最简单的高阶函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (f(x)+f(y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(add(<span class="number">500</span>,<span class="number">20</span>,abs))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">520</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写高阶函数，就是让函数的参数能够接收别的函数。</p>
<p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p>
</blockquote>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><blockquote>
<p>capitalize()函数 - 将字符串改为首位大写其余小写</p>
</blockquote>
<blockquote>
<p>title()函数 - 将字符串改为每个单词都是首字母大写其余小写份形式</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Lintcode刷题/55.比较字符串</title>
    <url>/2020/01/14/Lintcode%E5%88%B7%E9%A2%98/55.%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h1><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><p>比较两个字符串A和B，确定A中是否包含B中所有的字符。字符串A和B中的字符都是 <strong>大写字母</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param A: A string</span></span><br><span class="line"><span class="string">    @param B: A string</span></span><br><span class="line"><span class="string">    @return: if string A contains all of the characters in B return true else return false</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compareStrings</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        <span class="comment"># write your code here</span></span><br><span class="line">        <span class="comment">#此题采用了反向思维的方法，通过举出返回Flase的几种情况后，其余都是True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(A) &lt; len(B):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> len(A) == len(B):</span><br><span class="line">            <span class="keyword">return</span>(sorted(A) == sorted(B))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> A.count(i) &lt; B.count(i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Lintcode刷题</category>
      </categories>
  </entry>
  <entry>
    <title>13.字符串查找</title>
    <url>/2020/01/14/Lintcode%E5%88%B7%E9%A2%98/13.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="13-字符串查找"><a href="#13-字符串查找" class="headerlink" title="13.字符串查找"></a>13.字符串查找</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @param source:</span></span><br><span class="line"><span class="string">    @param target:</span></span><br><span class="line"><span class="string">    @return: return the index</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, source, target)</span>:</span></span><br><span class="line">        geshu=<span class="number">0</span></span><br><span class="line">        a = len(source)</span><br><span class="line">        b = len(target)</span><br><span class="line">        <span class="keyword">if</span> source ==<span class="string">""</span> <span class="keyword">and</span> target ==<span class="string">""</span>:<span class="comment">#排除特殊情况</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> source !=<span class="string">""</span> <span class="keyword">and</span> target ==<span class="string">""</span>:<span class="comment">#继续排除特殊情况</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> target <span class="keyword">not</span> <span class="keyword">in</span> source:<span class="comment">#被查找字符串不在已知字符串的情况</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#需要返回第一个出现位置的情况</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(a):</span><br><span class="line">                <span class="keyword">if</span> target[<span class="number">0</span>] == source[i]:</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(b):</span><br><span class="line">                        <span class="keyword">if</span> (i+j) &lt; a:<span class="comment">#避免字符串索引溢出</span></span><br><span class="line">                            <span class="keyword">if</span> source[i+j] == target[j]:</span><br><span class="line">                                geshu = geshu + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> geshu == b:</span><br><span class="line">                             <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.strStr(<span class="string">"tartarget"</span>,<span class="string">"target"</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Lintcode刷题</category>
      </categories>
  </entry>
  <entry>
    <title>往年期末试卷程序题</title>
    <url>/2020/01/04/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-主函数已知，编写一个函数实现将整型数组中的偶数删除，然后输出改变后的数组。"><a href="#1-主函数已知，编写一个函数实现将整型数组中的偶数删除，然后输出改变后的数组。" class="headerlink" title="1.主函数已知，编写一个函数实现将整型数组中的偶数删除，然后输出改变后的数组。"></a>1.主函数已知，编写一个函数实现将整型数组中的偶数删除，然后输出改变后的数组。</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[MAXSIZE],n,i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入元素个数：\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    n=hs(a,n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hs</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b[MAXSIZE];<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>,j=<span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]%<span class="number">2</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">            b[j]=a[i];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>C/1.宏编程1</title>
    <url>/2019/12/29/C/1.%E5%AE%8F%E7%BC%96%E7%A8%8B1/</url>
    <content><![CDATA[<p>#1.宏编程1</p>
<h2 id="定义一个带参数的宏MAXD，计算从键盘输入两个数值中的最大值"><a href="#定义一个带参数的宏MAXD，计算从键盘输入两个数值中的最大值" class="headerlink" title="定义一个带参数的宏MAXD，计算从键盘输入两个数值中的最大值"></a>定义一个带参数的宏MAXD，计算从键盘输入两个数值中的最大值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXD(x,y) x&gt;y?x:y</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,MAXD(x, y));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-宏编程2"><a href="#2-宏编程2" class="headerlink" title="2.宏编程2"></a>2.宏编程2</h1><h2 id="定义一个带参数的宏，用来判断整数n是否能被5和7同时整除"><a href="#定义一个带参数的宏，用来判断整数n是否能被5和7同时整除" class="headerlink" title="定义一个带参数的宏，用来判断整数n是否能被5和7同时整除"></a>定义一个带参数的宏，用来判断整数n是否能被5和7同时整除</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Zhengchu(n) n%5==0&amp;&amp;n%7==0?1:0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,result;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    result=Zhengchu(n);</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"不能整除\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"能被整除\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/C-结构体</title>
    <url>/2019/12/19/C/C-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="访问结构体成员"><a href="#访问结构体成员" class="headerlink" title="访问结构体成员"></a>访问结构体成员</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> ID;</span><br><span class="line">&#125; sd1=&#123;<span class="string">"Python"</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%sID:%.0lf"</span>,sd1.Name,sd1.ID);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为</span></span><br><span class="line"><span class="comment"> PythonID:1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="将结构体传给函数"><a href="#将结构体传给函数" class="headerlink" title="将结构体传给函数"></a>将结构体传给函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> ID;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">happy</span><span class="params">(struct Students sd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Students</span> <span class="title">sd1</span>;</span><span class="comment">//声明sd1，类型为Studens</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Students</span> <span class="title">sd2</span>;</span></span><br><span class="line">    <span class="comment">/*详述sd1*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(sd1.Name, <span class="string">"Pyhton"</span>);</span><br><span class="line">    sd1.ID=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*详述sd2*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(sd2.Name, <span class="string">"C"</span>);</span><br><span class="line">    sd2.ID=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/*传递*/</span></span><br><span class="line">    happy(sd1);</span><br><span class="line">    happy(sd2);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">happy</span><span class="params">(struct Students sd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%s)ID:%0.lf"</span>,sd.Name,sd.ID);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment"> (Pyhton)ID:1</span></span><br><span class="line"><span class="comment"> (C)ID:2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> ID;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">happy</span><span class="params">(struct Students *sd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Students</span> <span class="title">sd1</span>;</span><span class="comment">//声明sd1，类型为Studens</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Students</span> <span class="title">sd2</span>;</span></span><br><span class="line">    <span class="comment">/*详述sd1*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(sd1.Name, <span class="string">"Pyhton"</span>);</span><br><span class="line">    sd1.ID=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*详述sd2*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(sd2.Name, <span class="string">"C"</span>);</span><br><span class="line">    sd2.ID=<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/*传递*/</span></span><br><span class="line">    happy(&amp;sd1);</span><br><span class="line">    happy(&amp;sd2);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">happy</span><span class="params">(struct Students *sd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%s)ID:%0.lf"</span>,sd-&gt;Name,sd-&gt;ID);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment"> (Pyhton)ID:1</span></span><br><span class="line"><span class="comment"> (C)ID:2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//注意和传递结构体给函数的区别</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>指针练习题</title>
    <url>/2019/12/16/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="指针练习题-实验10"><a href="#指针练习题-实验10" class="headerlink" title="指针练习题(实验10)"></a>指针练习题(实验10)</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="5-、编写一个函数，判断任意输入的字符串中，有多少个字母。建议函数原型-int-CountNumofLetter-char-string"><a href="#5-、编写一个函数，判断任意输入的字符串中，有多少个字母。建议函数原型-int-CountNumofLetter-char-string" class="headerlink" title="5 、编写一个函数，判断任意输入的字符串中，有多少个字母。建议函数原型: int CountNumofLetter(char *string) ;"></a>5 、编写一个函数，判断任意输入的字符串中，有多少个字母。建议函数原型: int CountNumofLetter(char *string) ;</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNumofLetter</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zfc1[]=<span class="string">"Everyday*)^&amp;(^i?a&#123;&#125;new one!"</span>;</span><br><span class="line">    <span class="keyword">char</span> zfc2[]=<span class="string">"fsiayud^&amp;(%^*$%*$"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1,*p2;</span><br><span class="line">    p1=zfc1;p2=zfc2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\"%s\"中字母的个数为：%d\n"</span>,zfc1,CountNumofLetter(p1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\"%s\"中字母的个数为：%d\n"</span>,zfc2,CountNumofLetter(p2));</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNumofLetter</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> geshu=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(<span class="built_in">string</span>)<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*(<span class="built_in">string</span>+i)&gt;=<span class="string">'A'</span>&amp;&amp;*(<span class="built_in">string</span>+i)&lt;=<span class="string">'Z'</span>)||(*(<span class="built_in">string</span>+i)&gt;=<span class="string">'a'</span>&amp;&amp;*(<span class="built_in">string</span>+i)&lt;=<span class="string">'z'</span>)) &#123;</span><br><span class="line">            geshu++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> geshu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> "Everyday*)^&amp;(^i?a&#123;&#125;new one!"中字母的个数为：16</span></span><br><span class="line"><span class="comment"> "fsiayud^&amp;(%^*$%*$"中字母的个数为：7</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>





<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-、如下函数-strcpy-char-to-，-char-from-将字符串from复制到字符串-to-将函数补充完整并实-现在主程序中的调用。void-strcpy-char-to-，char-from-while"><a href="#1-、如下函数-strcpy-char-to-，-char-from-将字符串from复制到字符串-to-将函数补充完整并实-现在主程序中的调用。void-strcpy-char-to-，char-from-while" class="headerlink" title="1 、如下函数: strcpy(char *to ， char *from) 将字符串from复制到字符串 to. 将函数补充完整并实 现在主程序中的调用。void strcpy(char *to ，char *from) {while (____) ; }"></a>1 、如下函数: strcpy(char *to ， char *from) 将字符串from复制到字符串 to. 将函数补充完整并实 现在主程序中的调用。void strcpy(char *to ，char *from) {while (<strong><strong>____</strong></strong>) ; }</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">str_cpy</span><span class="params">(<span class="keyword">char</span> *to,<span class="keyword">char</span> *from)</span></span>&#123;<span class="comment">//因为strcpy会发生冲突，所以中间加了下划线区分</span></span><br><span class="line">    <span class="keyword">while</span> (*from!=<span class="string">'\0'</span>) &#123;<span class="comment">//执行循环知道from字符串末尾</span></span><br><span class="line">        *to=*from;</span><br><span class="line">        to++;from++;    <span class="comment">//to和from指针依次递增l；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> yuanshi[]=<span class="string">"Today is a good day!"</span>;</span><br><span class="line">    <span class="keyword">char</span> gengxin[]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1,*p2;       <span class="comment">//定义两个字符型指针</span></span><br><span class="line">    p1=yuanshi;p2=gengxin;<span class="comment">//字符型指针分别指向两个字符数组的首地址</span></span><br><span class="line">    str_cpy(gengxin, yuanshi);<span class="comment">//调用str_cpy函数</span></span><br><span class="line">    <span class="keyword">unsigned</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="built_in">strlen</span>(gengxin)<span class="number">-1</span>; i++) &#123;<span class="comment">//执行循环，输出新的字符串</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,*(p2+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment">Today is a good day!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="2-、如下函数-merge-int-a-，-int-n-，-int-b-，-int-m-，-int-c-是将两个从小到大有序数组，-a-和-b-复制合并出一个有序整数序列-c-，其中形参-n-和-m-分别是数组-a-和-b-的元素个数-将函数补充完整并实现在主程序中的调用。"><a href="#2-、如下函数-merge-int-a-，-int-n-，-int-b-，-int-m-，-int-c-是将两个从小到大有序数组，-a-和-b-复制合并出一个有序整数序列-c-，其中形参-n-和-m-分别是数组-a-和-b-的元素个数-将函数补充完整并实现在主程序中的调用。" class="headerlink" title="2 、如下函数: merge(int a[] ， int n ， int b[] ， int m ， int *c) 是将两个从小到大有序数组， a 和 b 复制合并出一个有序整数序列 c ，其中形参 n 和 m 分别是数组 a 和 b 的元素个数 . 将函数补充完整并实现在主程序中的调用。"></a>2 、如下函数: merge(int a[] ， int n ， int b[] ， int m ， int *c) 是将两个从小到大有序数组， a 和 b 复制合并出一个有序整数序列 c ，其中形参 n 和 m 分别是数组 a 和 b 的元素个数 . 将函数补充完整并实现在主程序中的调用。</h3><p><em>原代码:</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[] ，<span class="keyword">int</span> n， <span class="keyword">int</span> b[] ， <span class="keyword">int</span> m ， <span class="keyword">int</span> *c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i ， j ;</span><br><span class="line"><span class="keyword">for</span> (i=j=<span class="number">0</span>; i&lt;n&amp;&amp;j&lt;m ; )   *c++=a[i]&lt;b[j]?a[i++]:b[j++];</span><br><span class="line"><span class="keyword">while</span> (____________) *c++=a[i++] ;</span><br><span class="line"><span class="keyword">while</span> (____________) *c++=b[j++] ; &#125;</span><br></pre></td></tr></table></figure>



<p><em>答案为：</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> b[],<span class="keyword">int</span> m,<span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=j=<span class="number">0</span>; i&lt;n&amp;&amp;j&lt;m;)&#123;</span><br><span class="line">        *c++=a[i]&lt;b[j]?a[i++]:b[j++];&#125;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;n)&#123;*c++=a[i++];&#125;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;m)&#123;*c++=b[j++];&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> n=<span class="number">5</span>,m=<span class="number">3</span>;<span class="comment">//测试1</span></span><br><span class="line">    <span class="keyword">int</span> numbers1[]=&#123;<span class="number">21</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> numbers2[]=&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> numbers3[<span class="number">8</span>];</span><br><span class="line">    merge(numbers1, n, numbers2, m, numbers3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(m+n); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,numbers3[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    n=<span class="number">5</span>;m=<span class="number">5</span>;<span class="comment">//测试2</span></span><br><span class="line">    <span class="keyword">int</span> numbers4[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> numbers5[<span class="number">5</span>]=&#123;<span class="number">-12</span>,<span class="number">-10</span>,<span class="number">22</span>,<span class="number">100</span>,<span class="number">10000</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> numbers6[<span class="number">10</span>],*p=numbers6;</span><br><span class="line">    merge(numbers4, n, numbers5, m, p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(m+n); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment"> 12 13 20 21 23 24 25 26</span></span><br><span class="line"><span class="comment"> -12 -10 1 3 4 8 10 22 100 10000 Program ended with exit code: 0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="3-、有一字符串，包含n-n-lt-1024-个字符，写一函数，将此字符串中从第m个字符开始的全部字符-复制成为另一个字符串。建议函数原型-void-Mystrcpy-char-src，-char-des，-int-m"><a href="#3-、有一字符串，包含n-n-lt-1024-个字符，写一函数，将此字符串中从第m个字符开始的全部字符-复制成为另一个字符串。建议函数原型-void-Mystrcpy-char-src，-char-des，-int-m" class="headerlink" title="3 、有一字符串，包含n(n&lt;=1024)个字符，写一函数，将此字符串中从第m个字符开始的全部字符 复制成为另一个字符串。建议函数原型:void Mystrcpy(char *src， char *des， int m) ;"></a>3 、有一字符串，包含n(n&lt;=1024)个字符，写一函数，将此字符串中从第m个字符开始的全部字符 复制成为另一个字符串。建议函数原型:void Mystrcpy(char *src， char *des， int m) ;</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实验10 进阶3/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mystrcpy</span><span class="params">(<span class="keyword">char</span> *src,<span class="keyword">char</span> *des,<span class="keyword">int</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//测试1</span></span><br><span class="line">    <span class="keyword">char</span> yuanshi[]=<span class="string">"abcdefghijk"</span>;</span><br><span class="line">    <span class="keyword">char</span> gengxin[]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1;</span><br><span class="line">    p1=yuanshi;</span><br><span class="line">    <span class="keyword">char</span> *p2=gengxin;</span><br><span class="line">    Mystrcpy(p1,p2, m);</span><br><span class="line">    <span class="comment">//测试2</span></span><br><span class="line">    <span class="keyword">char</span> yuanshi1[]=<span class="string">"The joy of living never comes to the frivolous,the superficial,the selfish."</span>;</span><br><span class="line">    <span class="keyword">char</span> gengxin2[]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> *p3,*p4;</span><br><span class="line">    p3=yuanshi1;p4=gengxin2;</span><br><span class="line">    Mystrcpy(p3, p4, n);</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mystrcpy</span><span class="params">(<span class="keyword">char</span> *src,<span class="keyword">char</span> *des,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> *p3;</span><br><span class="line">    p3=&amp;src[m<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(p3)+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        *(des+i)=*(p3+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,des);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> cdefghijk</span></span><br><span class="line"><span class="comment"> joy of living never comes to the frivolous,the superficial,the selfish.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="6-、定义一个具有n-n-lt-1024-个元素的一维整型数组，编写函数，将其中最小的数与第一个数对换。-建议函数原型-void-MinChange-int-data-int-len"><a href="#6-、定义一个具有n-n-lt-1024-个元素的一维整型数组，编写函数，将其中最小的数与第一个数对换。-建议函数原型-void-MinChange-int-data-int-len" class="headerlink" title="6 、定义一个具有n(n&lt;=1024)个元素的一维整型数组，编写函数，将其中最小的数与第一个数对换。 建议函数原型:void MinChange(int *data ,int len);"></a>6 、定义一个具有n(n&lt;=1024)个元素的一维整型数组，编写函数，将其中最小的数与第一个数对换。 建议函数原型:void MinChange(int *data ,int len);</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实验10 进阶6/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MinChange</span><span class="params">(<span class="keyword">int</span> *data ,<span class="keyword">int</span> len)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//测试1</span></span><br><span class="line">    <span class="keyword">int</span> num[]=&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">32</span>,<span class="number">-29</span>,<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="keyword">sizeof</span>(num)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);<span class="comment">//获取整型数组的长度</span></span><br><span class="line">    MinChange(num, len);            <span class="comment">//函数调用</span></span><br><span class="line">    <span class="comment">//测试2</span></span><br><span class="line">    <span class="keyword">int</span> num1[]=&#123;<span class="number">0</span>,<span class="number">5</span>*<span class="number">2</span>,<span class="number">-1</span>*<span class="number">10</span>,<span class="number">234</span>,<span class="number">25</span>*<span class="number">25</span>&#125;;</span><br><span class="line">    len=<span class="keyword">sizeof</span>(num1)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    MinChange(num1, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MinChange</span><span class="params">(<span class="keyword">int</span> *data ,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,mix=data[<span class="number">0</span>],exchange;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;<span class="comment">//执行循环m，找到最小数和它的下标</span></span><br><span class="line">        <span class="keyword">if</span> (mix&gt;data[i]) &#123;</span><br><span class="line">            mix=data[i];</span><br><span class="line">            j=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    exchange=data[<span class="number">0</span>];   <span class="comment">//交换最小数和第一个数</span></span><br><span class="line">    data[<span class="number">0</span>]=mix;</span><br><span class="line">    data[j]=exchange;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;<span class="comment">//循环输出数组</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果是：</span></span><br><span class="line"><span class="comment"> -29 23 32 1 4 4</span></span><br><span class="line"><span class="comment"> -10 10 0 234 625</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="14、编程实现字符串比较函数-int-MyStrcmp-char-p1，char-p2-。其中，p1和p2分别指向两个字符-串，如果这两个字符串相当则函数返回-0-，如果这两个字符串不相等则返回二者第一个不同字符的ASCII-差值。例如-“asd”和“-awe”-第二个字符不同，则返回-’s’-‘w’-115-119-4"><a href="#14、编程实现字符串比较函数-int-MyStrcmp-char-p1，char-p2-。其中，p1和p2分别指向两个字符-串，如果这两个字符串相当则函数返回-0-，如果这两个字符串不相等则返回二者第一个不同字符的ASCII-差值。例如-“asd”和“-awe”-第二个字符不同，则返回-’s’-‘w’-115-119-4" class="headerlink" title="14、编程实现字符串比较函数: int MyStrcmp(char *p1，char *p2)。其中，p1和p2分别指向两个字符 串，如果这两个字符串相当则函数返回 0 ，如果这两个字符串不相等则返回二者第一个不同字符的ASCII 差值。例如:“asd”和“ awe” 第二个字符不同，则返回:’s’-‘w’=115-119 = -4"></a>14、编程实现字符串比较函数: int MyStrcmp(char *p1，char *p2)。其中，p1和p2分别指向两个字符 串，如果这两个字符串相当则函数返回 0 ，如果这两个字符串不相等则返回二者第一个不同字符的ASCII 差值。例如:“asd”和“ awe” 第二个字符不同，则返回:’s’-‘w’=115-119 = -4</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyStrcmp</span><span class="params">(<span class="keyword">char</span> *p1,<span class="keyword">char</span> *p2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//测试1</span></span><br><span class="line">    <span class="keyword">char</span> zf1[]=<span class="string">"When love beckons you,follow him,though this way are hard and steep."</span>;</span><br><span class="line">    <span class="keyword">char</span> zf2[]=<span class="string">"When love beckons you,follow him,though this way are hard and steeps."</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1=zf1,*p2=zf2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The results is:%d\n"</span>,MyStrcmp(p1, p2));<span class="comment">//调用函数并输出返回值</span></span><br><span class="line">    <span class="comment">//测试2</span></span><br><span class="line">    <span class="keyword">char</span> zf3[]=<span class="string">"abcdefghigkl"</span>;</span><br><span class="line">    <span class="keyword">char</span> zf4[]=<span class="string">"abcdefghigkl"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p3=zf3,*p4=zf4;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The results is:%d\n"</span>,MyStrcmp(p3, p4));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyStrcmp</span><span class="params">(<span class="keyword">char</span> *p1,<span class="keyword">char</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,jieguo=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> changdu=<span class="built_in">strlen</span>(p1);<span class="comment">//获取字符数组的长度，这里选择p1和p2都是一样的，因为若两个字符数组相同的话长度肯定是一样的</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;changdu; i++) &#123;<span class="comment">//循环判断每一个字符是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (p1[i]==p2[i]) &#123;<span class="comment">//如果相等，就让jieguo的值一直为0，这样是为了方便函数返回</span></span><br><span class="line">            jieguo=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            jieguo=p1[i]-p2[i];<span class="comment">//如果不相等，就让jieguo=两个zifu的ASCII码的差值</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//并且r退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jieguo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果是：</span></span><br><span class="line"><span class="comment"> The results is:-69</span></span><br><span class="line"><span class="comment"> The results is:0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>C/C语言指针</title>
    <url>/2019/12/06/C/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C指针"><a href="#C指针" class="headerlink" title="C指针"></a>C指针</h1><h2 id="为什么学习指针"><a href="#为什么学习指针" class="headerlink" title="为什么学习指针"></a>为什么学习指针</h2><blockquote>
<p>通过指针，可以简化一些C编程任务的执行，还有一些任务，如动态内存的分配，没有指针是无法执行的。</p>
</blockquote>
<h2 id="什么是指针"><a href="#什么是指针" class="headerlink" title="什么是指针"></a>什么是指针</h2><blockquote>
<p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，使用指针存储其他变量地址之前，需要对其进行声明，</p>
</blockquote>
<h2 id="指针的简单使用"><a href="#指针的简单使用" class="headerlink" title="指针的简单使用"></a>指针的简单使用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针学习</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/*指针的简单使用*/</span></span><br><span class="line">    <span class="keyword">int</span> number=<span class="number">20</span>;<span class="comment">/*实际变量的声明*/</span></span><br><span class="line">    <span class="keyword">int</span> *num;<span class="comment">/*指针变量的声明*/</span></span><br><span class="line">    num=&amp;number;<span class="comment">/*在指针变量中存储number的地址*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"number的地址是L：%p\n"</span>,num);<span class="comment">//两种打印number地址的方式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"number的地址是L：%p\n"</span>,&amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"number的s值是:%d\n"</span>,*num);<span class="comment">//两种打印number值的方式。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"number的s值是:%d\n"</span>,number);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> number的地址是L：0x7ffeefbff4ec</span></span><br><span class="line"><span class="comment"> number的地址是L：0x7ffeefbff4ec</span></span><br><span class="line"><span class="comment"> number的s值是:20</span></span><br><span class="line"><span class="comment"> number的s值是:20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="C中的NULL指针"><a href="#C中的NULL指针" class="headerlink" title="C中的NULL指针"></a>C中的NULL指针</h2><blockquote>
<p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p>
</blockquote>
<blockquote>
<p>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查一个空指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *Zero =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Zero) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"这是一个空指针\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 这是一个空指针</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="指针的算术运算"><a href="#指针的算术运算" class="headerlink" title="指针的算术运算"></a>指针的算术运算</h2><h3 id="指针的递增递减"><a href="#指针的递增递减" class="headerlink" title="指针的递增递减"></a>指针的递增递减</h3><blockquote>
<p>我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，数组可以看成一个指针常量。下面的程序递增变量指针，以便顺序访问数组中的每一个元素：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定增一个指针</span></span><br><span class="line">    <span class="keyword">int</span> number[<span class="number">4</span>]=&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1314</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *num=number;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"number存储值为：%d\n"</span>,*num);</span><br><span class="line">        i++;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递减一个指针</span></span><br><span class="line">    <span class="keyword">int</span> number1[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *num1=&amp;number1[<span class="number">3</span>];<span class="comment">//这里注意递减时指针的指向是不一样的</span></span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"number1存储值为：%d\n"</span>,*num1);</span><br><span class="line">        j--;</span><br><span class="line">        num1--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> number存储值为：5</span></span><br><span class="line"><span class="comment"> number存储值为：2</span></span><br><span class="line"><span class="comment"> number存储值为：1</span></span><br><span class="line"><span class="comment"> number存储值为：1314</span></span><br><span class="line"><span class="comment"> number1存储值为：4</span></span><br><span class="line"><span class="comment"> number1存储值为：3</span></span><br><span class="line"><span class="comment"> number1存储值为：2</span></span><br><span class="line"><span class="comment"> number1存储值为：1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过指针的比较来输出数组中的字符</span></span><br><span class="line">    <span class="keyword">int</span> number[<span class="number">4</span>]=&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1314</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *num=number;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num&lt;=&amp;number[<span class="number">3</span>]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"number[%d]:%d\n"</span>,i,*num);</span><br><span class="line">        i++;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> number[0]:5</span></span><br><span class="line"><span class="comment"> number[1]:2</span></span><br><span class="line"><span class="comment"> number[2]:1</span></span><br><span class="line"><span class="comment"> number[3]:1314</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//指针数组</span></span><br><span class="line">    <span class="comment">//整数指针</span></span><br><span class="line">    <span class="keyword">int</span> number[<span class="number">4</span>]=&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1314</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,*num[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">        num[i]=&amp;number[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"number[%d]:%d\n"</span>,i,*num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" \n"</span>);</span><br><span class="line">    <span class="comment">//用一个指向字符的指针数组来存储一个字符串列表</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"这就是我想要对你说的话：\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *zifu[]=&#123;<span class="string">"I love you!"</span>,<span class="string">"I love python!"</span>,<span class="string">"But i love you best!"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,zifu[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> number[0]:5</span></span><br><span class="line"><span class="comment"> number[1]:2</span></span><br><span class="line"><span class="comment"> number[2]:1</span></span><br><span class="line"><span class="comment"> number[3]:1314</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"> 这就是我想要对你说的话：</span></span><br><span class="line"><span class="comment"> I love you!</span></span><br><span class="line"><span class="comment"> I love python!</span></span><br><span class="line"><span class="comment"> But i love you best!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//定义指向指针的指针时，一定要使用两个*号</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *zz=&amp;num;</span><br><span class="line">    <span class="keyword">int</span> **zzz=&amp;zz;</span><br><span class="line">    <span class="comment">//使用三种方法分别打印出变量num的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num的值是：%d\n"</span>,num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num的值是：%d\n"</span>,*zz);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num的值是：%d\n"</span>,**zzz);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> num的值是：20</span></span><br><span class="line"><span class="comment"> num的值是：20</span></span><br><span class="line"><span class="comment"> num的值是：20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="传递指针给函数"><a href="#传递指针给函数" class="headerlink" title="传递指针给函数"></a>传递指针给函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sj</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *zz)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//通过传递指针给函数，可以直接修改原参数（实参），而不是引用实参到形参。</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> shijian;</span><br><span class="line">    sj(&amp;shijian);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"当前时间参数是：%ld\n"</span>,shijian);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sj</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> *zz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *zz=time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 当前时间参数是：1575623559</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="能接受指针作为参数的函数，也能接受数组作为参数"><a href="#能接受指针作为参数的函数，也能接受数组作为参数" class="headerlink" title="能接受指针作为参数的函数，也能接受数组作为参数"></a>能接受指针作为参数的函数，也能接受数组作为参数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span>  *zz)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//通过传递指针给函数，可以直接修改原参数（实参），而不是引用实参到形参。</span></span><br><span class="line">    <span class="keyword">int</span> number[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> jieguo;</span><br><span class="line">    jieguo=<span class="built_in">get</span>(number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"它们的平均数是：%lf\n"</span>,jieguo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> *zz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">        sum=sum+zz[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)sum/<span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 它们的平均数是：3.500000</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="从函数返回指针"><a href="#从函数返回指针" class="headerlink" title="从函数返回指针"></a>从函数返回指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/函数指针</title>
    <url>/2019/12/06/C/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><h2 id="怎么使用函数指针"><a href="#怎么使用函数指针" class="headerlink" title="怎么使用函数指针"></a>怎么使用函数指针</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">suiji</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*p)()=&amp;suiji;<span class="comment">//声明函数指针</span></span><br><span class="line">    <span class="keyword">int</span> a=p();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 16807</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">huidiao</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">void</span> (*<span class="built_in">print</span>)(<span class="keyword">void</span>))</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;x; i++) &#123;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    huidiao(a, <span class="built_in">print</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>函数练习题</title>
    <url>/2019/12/05/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/C%E8%AF%AD%E8%A8%80%EF%BC%9A%E5%87%BD%E6%95%B0%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="实验七-函数"><a href="#实验七-函数" class="headerlink" title="实验七 函数"></a>实验七 函数</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="3-编写一个函数，接收两点的坐标，计算并返回这两点之间的距离。建议函数原型-double-Distance-int-x1-，-int-y1-，-int-x2-，-int-y2"><a href="#3-编写一个函数，接收两点的坐标，计算并返回这两点之间的距离。建议函数原型-double-Distance-int-x1-，-int-y1-，-int-x2-，-int-y2" class="headerlink" title="3.编写一个函数，接收两点的坐标，计算并返回这两点之间的距离。建议函数原型:double Distance(int x1 ， int y1 ， int x2 ， int y2) ;"></a>3.编写一个函数，接收两点的坐标，计算并返回这两点之间的距离。建议函数原型:double Distance(int x1 ， int y1 ， int x2 ， int y2) ;</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实验七 基础3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"math.h"</span></span></span><br><span class="line"><span class="comment">/*编写一个函数，接收两点的坐标，计算并返回这两点之间的距离。建议函数原型:</span></span><br><span class="line"><span class="comment">double Distance(int x1 ， int y1 ， int x2 ， int y2) */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Distance</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Distance</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>&#123;<span class="comment">//函数定义，包含三个形参</span></span><br><span class="line">    <span class="keyword">int</span> x_chazhi;                           <span class="comment">//函数主体</span></span><br><span class="line">    <span class="keyword">int</span> y_chazhi;</span><br><span class="line">    x_chazhi=(x1-x2);</span><br><span class="line">    y_chazhi=(y1-y2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x_chazhi*x_chazhi+y_chazhi*y_chazhi);<span class="comment">//返回两点之间的距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                  <span class="comment">//main()函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> jieguo;<span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">    x1=<span class="number">0</span>;y1=<span class="number">0</span>;x2=<span class="number">1</span>;y2=<span class="number">1</span>;</span><br><span class="line">    jieguo=Distance(x1, y1, x2, y2);            <span class="comment">//实现两次函数调用，将返回值存储在变量jieguo中，并输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%d,%d)到(%d,%d)的距离是：%lf\n"</span>,x1,y1,x2,y2,jieguo);</span><br><span class="line">    x1=<span class="number">2</span>;y1=<span class="number">3</span>;x2=<span class="number">5</span>;y2=<span class="number">4</span>;</span><br><span class="line">    jieguo=Distance(x1, y1, x2, y2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(%d,%d)到(%d,%d)的距离是：%lf\n"</span>,x1,y1,x2,y2,jieguo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> (0,0)到(1,1)的距离是：1.414214</span></span><br><span class="line"><span class="comment"> (2,3)到(5,4)的距离是：3.162278</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="7-写一个函数-求一个实数的整数次幂。"><a href="#7-写一个函数-求一个实数的整数次幂。" class="headerlink" title="7.写一个函数:求一个实数的整数次幂。"></a>7.写一个函数:求一个实数的整数次幂。</h3><p><em>在主函数main中输入一个实数 x 和正整数m，调用该函数求这个实数 x 的m次幂。要求该函数能够正确地计算负幂。同时，该函数实现 0 的任何次幂为 0 ，并 且任何数值的 0 次幂为 1 。使用循环方法实现。建议函数原型:double Power(double dblRealNumber ， int intPositiveNumber) ;</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实验七 进阶7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hanshu.h"</span><span class="comment">//"stdio.h"在hanshu.h中</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> dblRealNumber,<span class="keyword">int</span> intPositiveNumber)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> dblRealNumber,<span class="keyword">int</span> intPositiveNumber)</span></span>&#123;<span class="comment">//函数定义</span></span><br><span class="line">    <span class="keyword">double</span> jieguo=<span class="number">0</span>,jieguo1=<span class="number">0</span>;<span class="keyword">int</span> i=<span class="number">1</span>;                  <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">if</span> (dblRealNumber==<span class="number">0</span>) &#123;                             <span class="comment">//实现0的任何次幂为0</span></span><br><span class="line">        jieguo=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((dblRealNumber!=<span class="number">0</span>)&amp;&amp;(intPositiveNumber==<span class="number">0</span>))&#123;<span class="comment">//实现非零实数x的0次幂为1</span></span><br><span class="line">        jieguo=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (intPositiveNumber&gt;<span class="number">0</span>)&#123;                      <span class="comment">//使用循环，计算出n&gt;0时n次幂的结果</span></span><br><span class="line">        jieguo=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=intPositiveNumber) &#123;</span><br><span class="line">            jieguo=jieguo*dblRealNumber;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        jieguo1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=<span class="built_in">abs</span>(intPositiveNumber)) &#123;             <span class="comment">//使用循环，计算出n&lt;0时n次幂的结果</span></span><br><span class="line">            jieguo1=jieguo1*dblRealNumber;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        jieguo=<span class="number">1</span>/jieguo1;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> jieguo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                              <span class="comment">//调用函数，对函数的各个功能进行检测</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">double</span> jieguo,x;<span class="keyword">int</span> n;</span><br><span class="line">    x=<span class="number">2</span>;n=<span class="number">2</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">    x=<span class="number">2</span>;n=<span class="number">-2</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">    x=<span class="number">-2</span>;n=<span class="number">-2</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">    x=<span class="number">0</span>;n=<span class="number">-2</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">    x=<span class="number">0</span>;n=<span class="number">0</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">    x=<span class="number">-2</span>;n=<span class="number">0</span>;</span><br><span class="line">    jieguo=Power(x,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次方结果是：%.2lf\n"</span>,x,n,jieguo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 2.00的2次方结果是：4.00</span></span><br><span class="line"><span class="comment"> 2.00的-2次方结果是：0.25</span></span><br><span class="line"><span class="comment"> -2.00的-2次方结果是：0.25</span></span><br><span class="line"><span class="comment"> 0.00的-2次方结果是：0.00</span></span><br><span class="line"><span class="comment"> 0.00的0次方结果是：0.00</span></span><br><span class="line"><span class="comment"> -2.00的0次方结果是：1.00</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python字符串操作</title>
    <url>/2019/12/03/Python/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串相加</span></span><br><span class="line">a=<span class="string">"Hello world! "</span></span><br><span class="line">b=<span class="string">"I love you !"</span></span><br><span class="line">print(a+b)</span><br><span class="line"><span class="string">'''输出结果为：Hello world! I love you !'''</span></span><br><span class="line"><span class="comment">#字符串乘法</span></span><br><span class="line">print(a*<span class="number">3</span>)</span><br><span class="line"><span class="comment">#判断特定字符是否在字符串中</span></span><br><span class="line">print(<span class="string">'o'</span> <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">'R'</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="comment">#字符串索引</span></span><br><span class="line">print(a[<span class="number">0</span>])<span class="comment">#输出H</span></span><br><span class="line"><span class="comment">#使用索引输出部分字符串</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#输出H,需要注意的是索引冒号后面的表示到这个数之前位置，也就是只输出到它之前的那个数字</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>C/C语言exit()使用</title>
    <url>/2019/12/02/C/C%E8%AF%AD%E8%A8%80exit()%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>#exit()使用</p>
<p><strong>exit(1)表示异常退出.这个1是返回给操作系统的；</strong></p>
<p><strong>exit(0)表示正常退出。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"请输入一个奇数："</span>);</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">  <span class="keyword">if</span> (num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"必须是奇数！\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//注：在main函数中exit(0)的效果等同于return 0;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在该程序中，如果输入的是奇数，就会执行下面的输出语句，将奇数打印出来，否则就会退出。*/</span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/C语言两个数交换的两种方法</title>
    <url>/2019/12/02/C/C%E8%AF%AD%E8%A8%80%E4%B8%A4%E4%B8%AA%E6%95%B0%E4%BA%A4%E6%8D%A2%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p><em>由于函数传递时实参无法改变，所以使用了全局变量来完成</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jiaoHUAN</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d,b:%d\n"</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a=<span class="number">3</span>;</span><br><span class="line">    b=<span class="number">2</span>;</span><br><span class="line">    jiaoHUAN(a, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment">a:2,b:3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p><em>使用数组，从而避免使用了全局变量</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jiaoHUAN</span><span class="params">(<span class="keyword">int</span> a[<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> zhongjian;</span><br><span class="line">    zhongjian=a[<span class="number">0</span>];</span><br><span class="line">    a[<span class="number">0</span>]=a[<span class="number">1</span>];</span><br><span class="line">    a[<span class="number">1</span>]=zhongjian;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d,b:%d\n"</span>,a[<span class="number">0</span>],a[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">2</span>]=&#123;<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    jiaoHUAN(b);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> a:2,b:3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/C语言实例：随机数生成</title>
    <url>/2019/12/02/C/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E4%BE%8B%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="C语言实例之随机数生成"><a href="#C语言实例之随机数生成" class="headerlink" title="C语言实例之随机数生成"></a>C语言实例之随机数生成</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*rand函数用来产生随机数，但是rand（）的内部是用线性同余法实现的，是伪随机数。在调用rand函数之前，可以使用srand函数设置随机数种子，如果没有设置随机数种子，rand函数在调用时，自动设计随机种子为1.随机种子相同，每次产生的随机数都是相同的，这就是为什么叫做伪随机数。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span><span class="comment">//rand函数的头文件为：stdlib.h</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span><span class="comment">//strand()函数需要的参数为seed，通常利用time(0)的返回值作为seed。time.h是time的头文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand((<span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> SJ[<span class="number">5</span>];<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">        SJ[i]=rand()&amp;<span class="number">101</span>; <span class="comment">//获取0到100的随机数，包括100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,SJ[i]);</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 100</span></span><br><span class="line"><span class="comment"> 33</span></span><br><span class="line"><span class="comment"> 33</span></span><br><span class="line"><span class="comment"> 5</span></span><br><span class="line"><span class="comment"> 32</span></span><br><span class="line"><span class="comment"> 这样就完成了随机数的输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/C语言之神奇代码</title>
    <url>/2019/12/02/C/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E7%A5%9E%E5%A5%87%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="C语言之神奇代码"><a href="#C语言之神奇代码" class="headerlink" title="C语言之神奇代码"></a>C语言之神奇代码</h1><p><strong>声明：这是网上看到的，还没去弄清楚是什么原理，就先放在这里吧！</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main(_)&#123;_^<span class="number">448</span>&amp;&amp;main(-~_);<span class="built_in">putchar</span>(--_%<span class="number">64</span>?<span class="number">32</span>|-~<span class="number">7</span>[__TIME__-_/<span class="number">8</span>%<span class="number">8</span>][<span class="string">"&gt;'txiZ^(~z?"</span><span class="number">-48</span>]&gt;&gt;<span class="string">";;;====~$::199"</span>[_*<span class="number">2</span>&amp;<span class="number">8</span>|_/<span class="number">64</span>]/(_&amp;<span class="number">2</span>?<span class="number">1</span>:<span class="number">8</span>)%<span class="number">8</span>&amp;<span class="number">1</span>:<span class="number">10</span>);&#125;</span><br><span class="line"><span class="comment">/*直接复制上面代码到某一编辑器，然后运行就会出现当前的时间。很神奇吧！</span></span><br><span class="line"><span class="comment">下面是效果图：*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9icvhy003j30v60ccmy6.jpg" alt="神奇代码"></p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/计算机二级考试临时抱佛脚</title>
    <url>/2019/12/02/C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7%E8%80%83%E8%AF%95%E4%B8%B4%E6%97%B6%E6%8A%B1%E4%BD%9B%E8%84%9A/</url>
    <content><![CDATA[<h1 id="计算机二级考试临时抱佛脚"><a href="#计算机二级考试临时抱佛脚" class="headerlink" title="计算机二级考试临时抱佛脚"></a>计算机二级考试临时抱佛脚</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h3><p>软件危机的表现包括：①对软件开发的进度和费用估计不准确；②用户对已完成的软件系统不满意的现象时常发生；③软件产品的质量‘往往靠不住；④软件常常是不可维护的；⑤软件通常没有适当的文档；⑥软件成本在计算机系统总成本中所占的比例逐年上升；⑦软件开发生产率提高的速度远远跟不上计算机应用迅速普及深入的趋势。</p>
<p>地址即指针。</p>
<p>不能将一个整数直接赋给指针变量作为地址；函数的返回值可以说指针。</p>
<h3 id="sizeof函数和int，double字节问题"><a href="#sizeof函数和int，double字节问题" class="headerlink" title="sizeof函数和int，double字节问题"></a>sizeof函数和int，double字节问题</h3><p>C语言中用sizeof判断数据类型长度，在vc平台上，整型int占有4字节，double占有8个字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a,b,c,d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c%c"</span>,&amp;a,&amp;b);</span><br><span class="line">    c=getchar();d=getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c%c%c%c\n"</span>,a,b,c,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*按照下列方式输入数据：</span></span><br><span class="line"><span class="comment">12&lt;CR&gt;</span></span><br><span class="line"><span class="comment">34&lt;CR&gt;</span></span><br><span class="line"><span class="comment">其中&lt;CR&gt;表示回车。</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">3</span></span><br></pre></td></tr></table></figure>

<h3 id="case常量表达式只是起语句标号的作用，并不是该处进行条件判断。"><a href="#case常量表达式只是起语句标号的作用，并不是该处进行条件判断。" class="headerlink" title="case常量表达式只是起语句标号的作用，并不是该处进行条件判断。"></a>case常量表达式只是起语句标号的作用，并不是该处进行条件判断。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>,y=<span class="number">0</span>,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">switch</span> (y) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:a++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:b++;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:a++;b++;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:a++;b++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d,b=%d\n"</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment">a=2,b=1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="一个程序选择题"><a href="#一个程序选择题" class="headerlink" title="一个程序选择题"></a>一个程序选择题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++,i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">1</span>; k&lt;<span class="number">3</span>; k++) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*解析：由于内层循环后面直接跟了空语句；所以在循环内部什么操作也不做，跳出循环后执行打印语句，所以就打印了一个“*”。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="程序选择题复现"><a href="#程序选择题复现" class="headerlink" title="程序选择题复现"></a>程序选择题复现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span><span class="comment">//rand函数的头文件为：stdlib.h</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span><span class="comment">//strand()函数需要的参数为seed，通常利用time(0)的返回值作为seed。time.h是time的头文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[]=<span class="string">"012xy\08s34f4w2"</span>;<span class="comment">//char型字符串总是自动以\0结尾.但是\0介于两个数字之间时，这种自动结尾实效。具体可以自己看看是如何失效的。</span></span><br><span class="line">    <span class="keyword">int</span> i,n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;s[i]!=<span class="number">0</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=<span class="string">'0'</span>&amp;&amp;s[i]&lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*所以输出结果为：</span></span><br><span class="line"><span class="comment"> 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="第二次函数调用时，第一次的调用已经有些参数的值改变了！"><a href="#第二次函数调用时，第一次的调用已经有些参数的值改变了！" class="headerlink" title="第二次函数调用时，第一次的调用已经有些参数的值改变了！"></a>第二次函数调用时，第一次的调用已经有些参数的值改变了！</h3><h3 id="在C语言中，只有在使用时才占用内存单元的变量，其存储类型是：auto和register。"><a href="#在C语言中，只有在使用时才占用内存单元的变量，其存储类型是：auto和register。" class="headerlink" title="在C语言中，只有在使用时才占用内存单元的变量，其存储类型是：auto和register。"></a>在C语言中，只有在使用时才占用内存单元的变量，其存储类型是：auto和register。</h3><h3 id="不能在定义结构体的同时，由用结构体类型定义变量。所以，下面结构体的定义语句是错误的。"><a href="#不能在定义结构体的同时，由用结构体类型定义变量。所以，下面结构体的定义语句是错误的。" class="headerlink" title="不能在定义结构体的同时，由用结构体类型定义变量。所以，下面结构体的定义语句是错误的。"></a>不能在定义结构体的同时，由用结构体类型定义变量。所以，下面结构体的定义语句是错误的。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ord</span> &#123;</span><span class="keyword">int</span> x;<span class="keyword">int</span> y;<span class="keyword">int</span> z;&#125;<span class="class"><span class="keyword">struct</span> <span class="title">ord</span> <span class="title">a</span>;</span></span><br></pre></td></tr></table></figure>





<h3 id="与处理命令是以-开头的命令，它们不是C语言的可执行命令，这些命令应该在函数之外书写，一般在源文件的最前面书写，但不是必须在起始位置书写；C语言的预处理能够实现宏定义和条件编译等功能。"><a href="#与处理命令是以-开头的命令，它们不是C语言的可执行命令，这些命令应该在函数之外书写，一般在源文件的最前面书写，但不是必须在起始位置书写；C语言的预处理能够实现宏定义和条件编译等功能。" class="headerlink" title="与处理命令是以#开头的命令，它们不是C语言的可执行命令，这些命令应该在函数之外书写，一般在源文件的最前面书写，但不是必须在起始位置书写；C语言的预处理能够实现宏定义和条件编译等功能。"></a>与处理命令是以#开头的命令，它们不是C语言的可执行命令，这些命令应该在函数之外书写，一般在源文件的最前面书写，但不是必须在起始位置书写；C语言的预处理能够实现宏定义和条件编译等功能。</h3>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python实例：冒泡排序法</title>
    <url>/2019/12/01/Python/Python%E5%AE%9E%E4%BE%8B%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maoPAO</span><span class="params">(sz)</span>:</span></span><br><span class="line">    n = len(sz)    <span class="comment">#用函数len获取数组的长度存储在变量n中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (n):             <span class="comment">#用两个循环来执行冒泡排序的步骤</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> sz[j]&gt;sz[j+<span class="number">1</span>]:</span><br><span class="line">                sz[j],sz[j+<span class="number">1</span>]=sz[j+<span class="number">1</span>],sz[j]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n):            <span class="comment">#用一个循环，按大小顺序循环输出数组中的数字</span></span><br><span class="line">        print(sz[k])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">54</span>,<span class="number">43</span>]</span><br><span class="line">maoPAO(first)</span><br><span class="line"><span class="string">'''输出结果为你：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">43</span></span><br><span class="line"><span class="string">54'''</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python实例：简单计算器的实现</title>
    <url>/2019/11/30/Python/Python%E5%AE%9E%E4%BE%8B%EF%BC%9A%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pyton实现简单的计算器，满足加减乘除</span></span><br><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x+y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(x,y)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x-y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x,y)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x*y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">devide</span><span class="params">(x,y)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x/y</span><br><span class="line">print(<span class="string">"1-&gt;加法"</span>)                      <span class="comment">#规定选择</span></span><br><span class="line">print(<span class="string">"2-&gt;减法"</span>)</span><br><span class="line">print(<span class="string">"3-&gt;乘法"</span>)</span><br><span class="line">print(<span class="string">"4-&gt;除法"</span>)</span><br><span class="line">yours=int(input(<span class="string">"请选择运算类型："</span>))<span class="comment">#获取用户选择</span></span><br><span class="line">a=int(input(<span class="string">"first number"</span>))     <span class="comment">#获取要运算的数字</span></span><br><span class="line">b=int(input(<span class="string">"second number"</span>))</span><br><span class="line"><span class="keyword">if</span> yours==<span class="number">1</span>:                    <span class="comment">#判断用户需要的运算类型并输出结果</span></span><br><span class="line">     print(<span class="string">"&#123;&#125;+&#123;&#125;=&#123;&#125;"</span>.format(a,b,add(a,b)))</span><br><span class="line"><span class="keyword">elif</span> yours==<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'&#123;&#125;-&#123;&#125;=&#123;&#125;'</span>.format(a,b,subtract(a,b)))</span><br><span class="line"><span class="keyword">elif</span> yours==<span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'&#123;&#125;-&#123;&#125;=&#123;&#125;'</span>.format(a, b, multiply(a, b)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'&#123;&#125;-&#123;&#125;=&#123;&#125;'</span>.format(a, b,devide(a, b)))</span><br><span class="line"></span><br><span class="line"><span class="string">'''运行结果为：</span></span><br><span class="line"><span class="string">1-&gt;加法</span></span><br><span class="line"><span class="string">2-&gt;减法</span></span><br><span class="line"><span class="string">3-&gt;乘法</span></span><br><span class="line"><span class="string">4-&gt;除法</span></span><br><span class="line"><span class="string">请选择运算类型：4</span></span><br><span class="line"><span class="string">first number1000</span></span><br><span class="line"><span class="string">second number10</span></span><br><span class="line"><span class="string">1000-10=100.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>字符串练习题</title>
    <url>/2019/11/29/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="字符串练习题"><a href="#字符串练习题" class="headerlink" title="字符串练习题"></a>字符串练习题</h1><h2 id="基础练习"><a href="#基础练习" class="headerlink" title="基础练习"></a>基础练习</h2><h3 id="1-编写程序，对任意输入的字符串，统计其中的大写字母和小写字母的个数。例如，-输入字符-串-AAaaBBb123CCccccd-，则应输出结果-upper-6，-lower-8。"><a href="#1-编写程序，对任意输入的字符串，统计其中的大写字母和小写字母的个数。例如，-输入字符-串-AAaaBBb123CCccccd-，则应输出结果-upper-6，-lower-8。" class="headerlink" title="1.编写程序，对任意输入的字符串，统计其中的大写字母和小写字母的个数。例如， 输入字符 串: AAaaBBb123CCccccd ，则应输出结果:upper = 6， lower = 8。"></a>1.编写程序，对任意输入的字符串，统计其中的大写字母和小写字母的个数。例如， 输入字符 串: AAaaBBb123CCccccd ，则应输出结果:upper = 6， lower = 8。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jc1</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">int</span> upper,<span class="keyword">int</span> lower)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jc1</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">int</span> upper,<span class="keyword">int</span> lower)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]&gt;=<span class="number">65</span>&amp;&amp;zifu[i]&lt;=<span class="number">90</span>) &#123;</span><br><span class="line">            upper++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (zifu[i]&gt;=<span class="number">97</span>&amp;&amp;zifu[i]&lt;=<span class="number">122</span>)&#123;</span><br><span class="line">            lower++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"upper:%d,lower:%d\n"</span>,upper,lower);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zifu1[]=&#123;<span class="string">"Hello the world"</span>&#125;;</span><br><span class="line">    jc1(zifu1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> zifu2[]=&#123;<span class="string">"Python is the best LANGUAGE!"</span>&#125;;</span><br><span class="line">    jc1(zifu2,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为</span></span><br><span class="line"><span class="comment">upper:1,lower:12</span></span><br><span class="line"><span class="comment">upper:9,lower:14</span></span><br><span class="line"><span class="comment">Program ended with exit code: 0	*/</span></span><br></pre></td></tr></table></figure>



<h3 id="2-用字符数组存储任意输入的一串字符，求其最大字符。"><a href="#2-用字符数组存储任意输入的一串字符，求其最大字符。" class="headerlink" title="2. 用字符数组存储任意输入的一串字符，求其最大字符。"></a>2. 用字符数组存储任意输入的一串字符，求其最大字符。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jc2</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">char</span> <span class="built_in">max</span>)</span></span>;<span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jc2</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">char</span> <span class="built_in">max</span>)</span><span class="comment">//定义函数，其中定义了字符数组zifu,整型变量i，字符型变量max</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">max</span>=zifu[<span class="number">0</span>];                    <span class="comment">//初始化字符型变量max等于字符数组中第一个字符,并认为其为最大字符</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu)<span class="number">-1</span>) &#123;           <span class="comment">//限制循环次数，防止下标越界</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">max</span>&lt;zifu[i]) &#123;          <span class="comment">//判断max这个字符是否小于后一个字符</span></span><br><span class="line">            <span class="built_in">max</span>=zifu[i];            <span class="comment">//如果比后一个字符小，就让后一个字符称为max</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大的字符是：%c\n"</span>,<span class="built_in">max</span>);<span class="comment">//输出max字符的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                          <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zifu1[]=&#123;<span class="string">"Hello the world"</span>&#125;;</span><br><span class="line">    jc2(zifu1,<span class="number">1</span>,<span class="string">'\0'</span>);</span><br><span class="line">    <span class="keyword">char</span> zifu2[]=&#123;<span class="string">"Python is the best LANGUAGE!"</span>&#125;;</span><br><span class="line">    jc2(zifu2,<span class="number">1</span>,<span class="string">'\0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> 最大的字符是：w</span></span><br><span class="line"><span class="comment"> 最大的字符是：y</span></span><br><span class="line"><span class="comment"> Program ended with exit code: 0*/</span></span><br></pre></td></tr></table></figure>



<h3 id="3-编写一个程序，将字符数组s2中的全部字符复制到字符数组s1中，不用-strcpy-函数。注意，复-制时，’-0’-也要复制过去。‘-0’-后面的字符不复制。"><a href="#3-编写一个程序，将字符数组s2中的全部字符复制到字符数组s1中，不用-strcpy-函数。注意，复-制时，’-0’-也要复制过去。‘-0’-后面的字符不复制。" class="headerlink" title="3. 编写一个程序，将字符数组s2中的全部字符复制到字符数组s1中，不用 strcpy 函数。注意，复 制时，’ \0’ 也要复制过去。‘ \0’ 后面的字符不复制。"></a>3. 编写一个程序，将字符数组s2中的全部字符复制到字符数组s1中，不用 strcpy 函数。注意，复 制时，’ \0’ 也要复制过去。‘ \0’ 后面的字符不复制。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> zifu1[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;<span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> zifu1[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//定义函数，其中包括三个参数：字符数组zifu1,整型变量i，整型变量j.</span></span><br><span class="line">    <span class="keyword">char</span> zifu2[<span class="built_in">strlen</span>(zifu1)+<span class="number">1</span>];<span class="comment">//定义一个长度和zifu1相同的空字符数组</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu1)) &#123;<span class="comment">//执行循环，控制次数</span></span><br><span class="line">        zifu2[i]=zifu1[i];<span class="comment">//将zufu1原样复制到zifu2</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=<span class="built_in">strlen</span>(zifu2)<span class="number">-1</span>) &#123;<span class="comment">//这里-1是为了输出不包括末尾的f'\0'</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,zifu2[j]);<span class="comment">//执行输出1</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);            <span class="comment">//换行</span></span><br><span class="line">    j=<span class="number">0</span>;                     <span class="comment">//重新初始化j</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;=<span class="built_in">strlen</span>(zifu2)) &#123;<span class="comment">//这里没有-1，是为了和输出1做比较</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,zifu2[j]);<span class="comment">//执行输出2</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);           <span class="comment">//换行</span></span><br><span class="line">&#125;                           <span class="comment">//输出结果1和2相同，说明zifu1末尾的'\0'也复制到了zifu2当中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                  <span class="comment">//执行函数，完成任务</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zifu1[]=&#123;<span class="string">"Hello the world"</span>&#125;;</span><br><span class="line">    copy(zifu1,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为：</span></span><br><span class="line"><span class="comment">//Hello the world</span></span><br><span class="line"><span class="comment">//Hello the world</span></span><br><span class="line"><span class="comment">//Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure>

<h3 id="4-对字符串-a-中的字符由小到大排序。"><a href="#4-对字符串-a-中的字符由小到大排序。" class="headerlink" title="4. 对字符串 a 中的字符由小到大排序。"></a>4. 对字符串 a 中的字符由小到大排序。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">px</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span> exchange)</span></span>;        <span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">px</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span> exchange)</span></span>&#123;        <span class="comment">//定义函数，其中包括四个参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"原来的字符串是：\n%s\n"</span>,zifu);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="built_in">strlen</span>(zifu)<span class="number">-1</span>;i++) &#123;                   <span class="comment">//执行两个循环，使用冒泡排序法对字符串中的字符按照从小到大的顺序排列</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=<span class="built_in">strlen</span>(zifu)<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zifu[j]&gt;zifu[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                exchange=zifu[j+<span class="number">1</span>];</span><br><span class="line">                zifu[j+<span class="number">1</span>]=zifu[j];</span><br><span class="line">                zifu[j]=exchange;</span><br><span class="line">            &#125;</span><br><span class="line">            exchange=<span class="string">'\0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">0</span>;                                            <span class="comment">//让i重新等于0，避免呢过多的变量定义</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"重新排序后的字符数组是：\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu)+<span class="number">1</span>) &#123;                     <span class="comment">//执行循环，输出字符串</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,zifu[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);                                   <span class="comment">//为了多个测试结果的美观，多输出两个换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                          <span class="comment">//调用函数，实现多组测试</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zifu1[]=<span class="string">"bcadefzrea?!#%^"</span>;</span><br><span class="line">    px(zifu1,<span class="number">0</span>,<span class="number">0</span>,<span class="string">'\0'</span>);</span><br><span class="line">    <span class="keyword">char</span> zifu2[]=<span class="string">"987654321123456789"</span>;</span><br><span class="line">       px(zifu2,<span class="number">0</span>,<span class="number">0</span>,<span class="string">'\0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*原来的字符串是：</span></span><br><span class="line"><span class="comment">bcadefzrea?!#%^</span></span><br><span class="line"><span class="comment">重新排序后的字符数组是：</span></span><br><span class="line"><span class="comment">!#%?^aabcdeefrz</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">原来的字符串是：</span></span><br><span class="line"><span class="comment">987654321123456789</span></span><br><span class="line"><span class="comment">重新排序后的字符数组是：</span></span><br><span class="line"><span class="comment">112233445566778899</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Program ended with exit code: 0*/</span></span><br></pre></td></tr></table></figure>



<h3 id="6-下面程序输入一字符串，并将其中的大写字母改变成小写字母，完成程序。"><a href="#6-下面程序输入一字符串，并将其中的大写字母改变成小写字母，完成程序。" class="headerlink" title="6.下面程序输入一字符串，并将其中的大写字母改变成小写字母，完成程序。"></a>6.下面程序输入一字符串，并将其中的大写字母改变成小写字母，完成程序。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                 </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">120</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a string.\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);              </span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="number">119</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=<span class="string">'A'</span>&amp;&amp;s[i]&lt;=<span class="string">'Z'</span>) &#123;</span><br><span class="line">            s[i]=s[i]-<span class="string">'A'</span>+<span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>答案为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                                  <span class="comment">//因为是填空题，所以只进行了一组测试</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">120</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a string.\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>,s);              <span class="comment">//scanf函数获取含空格字符串不能使用%s,因此这里改为了%[^\n]%*c</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="number">119</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=<span class="string">'A'</span>&amp;&amp;s[i]&lt;=<span class="string">'Z'</span>) &#123;</span><br><span class="line">            s[i]=s[i]-<span class="string">'A'</span>+<span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> Enter a string.</span></span><br><span class="line"><span class="comment"> I LOVE pyhton!</span></span><br><span class="line"><span class="comment"> i  love pyhton!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-设计并测试一个函数，其功能是输出输入行-长度-lt-1024-里所有的单词，并丢掉该行中其-他的字符。一个单词的定义是一串字符，其中不含空格、制表符和换行符等其它字符。例如，-输入行-1234word-12number-234-输出-word-number"><a href="#1-设计并测试一个函数，其功能是输出输入行-长度-lt-1024-里所有的单词，并丢掉该行中其-他的字符。一个单词的定义是一串字符，其中不含空格、制表符和换行符等其它字符。例如，-输入行-1234word-12number-234-输出-word-number" class="headerlink" title="1.设计并测试一个函数，其功能是输出输入行(长度 &lt;=1024 )里所有的单词，并丢掉该行中其 他的字符。一个单词的定义是一串字符，其中不含空格、制表符和换行符等其它字符。例如， 输入行: 1234word?_12number +234 输出: word number"></a>1.设计并测试一个函数，其功能是输出输入行(长度 &lt;=1024 )里所有的单词，并丢掉该行中其 他的字符。一个单词的定义是一串字符，其中不含空格、制表符和换行符等其它字符。例如， 输入行: 1234word?_12number <em>+</em>234 输出: word number</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进阶1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jj1</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i)</span></span>;                        <span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jj1</span><span class="params">(<span class="keyword">char</span> zifu[],<span class="keyword">int</span> i)</span></span>&#123;                        <span class="comment">//定义一个无返回类型且包含两个形参的函数</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu)<span class="number">-1</span>) &#123;                     <span class="comment">//执行循环，控制次数，其中用strlen函数获取字符串的长度</span></span><br><span class="line">        <span class="keyword">if</span> ((zifu[i]&gt;=<span class="string">'A'</span>&amp;&amp;zifu[i]&lt;+<span class="string">'Z'</span>)||(zifu[i]&gt;=<span class="string">'a'</span>&amp;&amp;zifu[i]&lt;+<span class="string">'z'</span>)) &#123;<span class="comment">//使用if判断字符数组中的每一个字符是否在字母表中</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,zifu[i]);                                        <span class="comment">//如果是，则依次输出每个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;                                                             <span class="comment">//否则，输出一个空格，确保不同单词之间的间隔</span></span><br><span class="line">                  <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">              &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);                                                       <span class="comment">//函数末尾输出一个空格，确保完成一次函数后换行再执行下一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;                                                             <span class="comment">//在主函数中，执行自定义函数jj1</span></span><br><span class="line">    <span class="keyword">char</span> zifu1[]=&#123;<span class="string">"happy2019cqut*&amp;^%$world&#125;+)@™"</span>&#125;;</span><br><span class="line">    jj1(zifu1,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> zifu2[]=&#123;<span class="string">"1234word?_12number _+_234"</span>&#125;;</span><br><span class="line">    jj1(zifu2,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果为：</span></span><br><span class="line"><span class="comment"> happy    cqut     world</span></span><br><span class="line"><span class="comment">    word    number</span></span><br><span class="line"><span class="comment">Program ended with exit code: 0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="6-输入一个字符串，统计各字母出现的次数，并按字母出现的多少输出-先输出字母出现多的，-次数相同的按字母表顺序输出，不出现的字母不输出-。-例-输入-5b3a-4-hdeh5dh-输出-h-3-d-2-a-1-b-1-e-1"><a href="#6-输入一个字符串，统计各字母出现的次数，并按字母出现的多少输出-先输出字母出现多的，-次数相同的按字母表顺序输出，不出现的字母不输出-。-例-输入-5b3a-4-hdeh5dh-输出-h-3-d-2-a-1-b-1-e-1" class="headerlink" title="6.输入一个字符串，统计各字母出现的次数，并按字母出现的多少输出(先输出字母出现多的， 次数相同的按字母表顺序输出，不出现的字母不输出)。 例:输入: 5b3a+4-hdeh5dh? 输出: h 3 d 2 a 1 b 1 e 1"></a>6.输入一个字符串，统计各字母出现的次数，并按字母出现的多少输出(先输出字母出现多的， 次数相同的按字母表顺序输出，不出现的字母不输出)。 例:输入: 5b3a+4-hdeh5dh? 输出: h 3 d 2 a 1 b 1 e 1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进阶6                                     //本题没有进行多组测试，因为要计算每一个字母的个数m，这本身就是一种测试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> letter[<span class="number">26</span>];<span class="keyword">int</span> i=<span class="number">0</span>;<span class="keyword">int</span> j=<span class="number">0</span>;<span class="keyword">int</span> h=<span class="number">0</span>;;<span class="keyword">unsigned</span> <span class="keyword">long</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (h&lt;=<span class="number">25</span>) &#123;                         <span class="comment">//执行循环，初始化整型数组letter，使其每一个数s都为0</span></span><br><span class="line">        letter[h]=<span class="number">0</span>;</span><br><span class="line">        h++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> zifu[]=<span class="string">"hhhddabefgasifgagfaffgagcnmaohgvzf"</span>;<span class="comment">//初始化字符串</span></span><br><span class="line">    m=<span class="built_in">strlen</span>(zifu);</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="built_in">strlen</span>(zifu)<span class="number">-1</span>) &#123;            <span class="comment">//执行循环，统计26个字母出现的次数</span></span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'A'</span>||zifu[i]==<span class="string">'a'</span>) &#123;</span><br><span class="line">            letter[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'B'</span>||zifu[i]==<span class="string">'b'</span>) &#123;</span><br><span class="line">            letter[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'C'</span>||zifu[i]==<span class="string">'c'</span>) &#123;</span><br><span class="line">            letter[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'D'</span>||zifu[i]==<span class="string">'d'</span>) &#123;</span><br><span class="line">            letter[<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'E'</span>||zifu[i]==<span class="string">'e'</span>) &#123;</span><br><span class="line">            letter[<span class="number">4</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'F'</span>||zifu[i]==<span class="string">'f'</span>) &#123;</span><br><span class="line">            letter[<span class="number">5</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'G'</span>||zifu[i]==<span class="string">'g'</span>) &#123;</span><br><span class="line">            letter[<span class="number">6</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'H'</span>||zifu[i]==<span class="string">'h'</span>) &#123;</span><br><span class="line">            letter[<span class="number">7</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'I'</span>||zifu[i]==<span class="string">'i'</span>) &#123;</span><br><span class="line">            letter[<span class="number">8</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'J'</span>||zifu[i]==<span class="string">'j'</span>) &#123;</span><br><span class="line">            letter[<span class="number">9</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'K'</span>||zifu[i]==<span class="string">'k'</span>) &#123;</span><br><span class="line">            letter[<span class="number">10</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'L'</span>||zifu[i]==<span class="string">'l'</span>) &#123;</span><br><span class="line">            letter[<span class="number">11</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'M'</span>||zifu[i]==<span class="string">'m'</span>) &#123;</span><br><span class="line">            letter[<span class="number">12</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'N'</span>||zifu[i]==<span class="string">'n'</span>) &#123;</span><br><span class="line">            letter[<span class="number">13</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'O'</span>||zifu[i]==<span class="string">'o'</span>) &#123;</span><br><span class="line">            letter[<span class="number">14</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'P'</span>||zifu[i]==<span class="string">'p'</span>) &#123;</span><br><span class="line">            letter[<span class="number">15</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'Q'</span>||zifu[i]==<span class="string">'q'</span>) &#123;</span><br><span class="line">            letter[<span class="number">16</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'R'</span>||zifu[i]==<span class="string">'r'</span>) &#123;</span><br><span class="line">            letter[<span class="number">17</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'S'</span>||zifu[i]==<span class="string">'s'</span>) &#123;</span><br><span class="line">            letter[<span class="number">18</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'T'</span>||zifu[i]==<span class="string">'t'</span>) &#123;</span><br><span class="line">            letter[<span class="number">19</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'U'</span>||zifu[i]==<span class="string">'u'</span>) &#123;</span><br><span class="line">            letter[<span class="number">20</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'V'</span>||zifu[i]==<span class="string">'v'</span>) &#123;</span><br><span class="line">            letter[<span class="number">21</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'W'</span>||zifu[i]==<span class="string">'w'</span>) &#123;</span><br><span class="line">            letter[<span class="number">22</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'X'</span>||zifu[i]==<span class="string">'x'</span>) &#123;</span><br><span class="line">            letter[<span class="number">23</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'Y'</span>||zifu[i]==<span class="string">'y'</span>) &#123;</span><br><span class="line">            letter[<span class="number">24</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zifu[i]==<span class="string">'Z'</span>||zifu[i]==<span class="string">'z'</span>) &#123;</span><br><span class="line">            letter[<span class="number">25</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m&gt;=<span class="number">1</span>) &#123;j=<span class="number">0</span>;          <span class="comment">//执行循环控制次数，以确保只输出字母个数超过1的</span></span><br><span class="line">        <span class="keyword">while</span> (j&lt;=<span class="number">25</span>) &#123;         <span class="comment">//执行熏黄，从高到低比较字母个数</span></span><br><span class="line">            <span class="keyword">if</span> (letter[j]==m) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c:%d\n"</span>,j+<span class="number">97</span>,letter[j]);<span class="comment">//输出字母个数和</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        m=m<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*运行结果为：:6</span></span><br><span class="line"><span class="comment">f:6</span></span><br><span class="line"><span class="comment">g:6</span></span><br><span class="line"><span class="comment">h:4</span></span><br><span class="line"><span class="comment">d:2</span></span><br><span class="line"><span class="comment">b:1</span></span><br><span class="line"><span class="comment">c:1</span></span><br><span class="line"><span class="comment">e:1</span></span><br><span class="line"><span class="comment">i:1</span></span><br><span class="line"><span class="comment">m:1</span></span><br><span class="line"><span class="comment">n:1</span></span><br><span class="line"><span class="comment">o:1</span></span><br><span class="line"><span class="comment">s:1</span></span><br><span class="line"><span class="comment">v:1</span></span><br><span class="line"><span class="comment">z:1</span></span><br><span class="line"><span class="comment">Program ended with exit code: 0*/</span></span><br></pre></td></tr></table></figure>





<h3 id="7-有一篇文章，共有-3-行文字，每行有80个字符。要求分别统计出其中英文大写字母、小写字母、-数字、空格以及其它字符的个数。"><a href="#7-有一篇文章，共有-3-行文字，每行有80个字符。要求分别统计出其中英文大写字母、小写字母、-数字、空格以及其它字符的个数。" class="headerlink" title="7. 有一篇文章，共有 3 行文字，每行有80个字符。要求分别统计出其中英文大写字母、小写字母、 数字、空格以及其它字符的个数。"></a>7. 有一篇文章，共有 3 行文字，每行有80个字符。要求分别统计出其中英文大写字母、小写字母、 数字、空格以及其它字符的个数。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;                  //Name:雷博闻 Student ID：11923040207</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span>                 <span class="comment">//进阶7</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> zifu[<span class="number">3</span>][<span class="number">80</span>]=&#123;                                                                      <span class="comment">//c定义一个多维字符数组并初始化</span></span><br><span class="line">        <span class="string">"Its name might sound a little plain, but the grey-headed albatross is the most e"</span>,</span><br><span class="line">        <span class="string">"Not only a majestic bird, the grey-headed albatross is a literal a world recoreq"</span>,</span><br><span class="line">        <span class="string">"In 2003, The Guinness Book of Records gave them the title of world’s fastest h"</span></span><br><span class="line">                        &#125;;</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,upper=<span class="number">0</span>,lower=<span class="number">0</span>,numbers=<span class="number">0</span>,others=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="number">2</span>) &#123;j=<span class="number">0</span>;                                                                      <span class="comment">//外循环，控制行数。j=0是为了重新初始化k列数</span></span><br><span class="line">        <span class="keyword">while</span> (j&lt;=<span class="number">79</span>) &#123;                                                                     <span class="comment">//内循环，控制列数</span></span><br><span class="line">            <span class="keyword">if</span>((zifu[i][j]&gt;=<span class="string">'A'</span>)&amp;&amp;(zifu[i][j]&lt;=<span class="string">'Z'</span>))&#123;                                       <span class="comment">//判断该字符是否是大写字母，是则upper+1，不是则进行下一判断</span></span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((zifu[i][j]&gt;=<span class="string">'a'</span>)&amp;&amp;(zifu[i][j]&lt;=<span class="string">'z'</span>))&#123;                                 <span class="comment">//判断该字符是否是小写字母，是则lower+1，不是则进行下一判断</span></span><br><span class="line">                lower++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((zifu[i][j]&gt;=<span class="string">'0'</span>)&amp;&amp;(zifu[i][j]&lt;=<span class="string">'9'</span>))&#123;                                 <span class="comment">//判断该字符是否是数字，是则numbers+1，不是则进行下一判断</span></span><br><span class="line">                numbers++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                others++;</span><br><span class="line">                <span class="comment">//都不满足，则others+1</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大写字母的个数是：%d\n小写字母的个数是：%d\n数字的个数是在：%d\n其他字符的个数是：%d\n"</span>,upper,lower,numbers,others);</span><br><span class="line">    <span class="comment">//分别输出upper，lower，numbers和others的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,upper+lower+numbers+others);<span class="comment">//输出upper，lower，numbers和others值的综合，总和为240，则程序正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment"> 大写字母的个数是：7</span></span><br><span class="line"><span class="comment"> 小写字母的个数是：180</span></span><br><span class="line"><span class="comment"> 数字的个数是在：4</span></span><br><span class="line"><span class="comment"> 其他字符的个数是：49</span></span><br><span class="line"><span class="comment"> 240</span></span><br><span class="line"><span class="comment"> Program ended with exit code: 0*/</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>C/gets,puts函数</title>
    <url>/2019/11/28/C/gets,puts%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="gets-puts-函数"><a href="#gets-puts-函数" class="headerlink" title="gets(),puts()函数"></a>gets(),puts()函数</h1><p>使用gets(),puts()函数实现字符串的输入和输出</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">`\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span>`</span></span><br><span class="line"></span><br><span class="line">`\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;`</span></span></span><br><span class="line"></span><br><span class="line">`**int** main()`</span><br><span class="line"></span><br><span class="line">`&#123;  **<span class="keyword">char</span>** you[]=&#123;<span class="string">"12345"</span>&#125;;`</span><br><span class="line"></span><br><span class="line">  `**<span class="keyword">char</span>** password[<span class="number">100</span>]=&#123;&#125;;`</span><br><span class="line"></span><br><span class="line">  `gets(password);`</span><br><span class="line"></span><br><span class="line">​    `**<span class="keyword">if</span>** (<span class="built_in">strcmp</span>(password,you)==<span class="number">0</span>) &#123;`</span><br><span class="line"></span><br><span class="line">​      `<span class="built_in">printf</span>(<span class="string">"Welcome!"</span>);`</span><br><span class="line"></span><br><span class="line">  `&#125;`</span><br><span class="line"></span><br><span class="line">​    `**<span class="keyword">else</span>**&#123;`</span><br><span class="line"></span><br><span class="line">​      `<span class="built_in">printf</span>(<span class="string">"You are not right"</span>);`</span><br><span class="line"></span><br><span class="line">​    `&#125;`</span><br><span class="line"></span><br><span class="line">`&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>C/操作字符串的函数</title>
    <url>/2019/11/28/C/%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="操作字符串的函数"><a href="#操作字符串的函数" class="headerlink" title="操作字符串的函数"></a>操作字符串的函数</h1><h2 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy()"></a>strcpy()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>]=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(b,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b:%s\n"</span>,b);&#125;</span><br></pre></td></tr></table></figure>

<h2 id="strcat"><a href="#strcat" class="headerlink" title="strcat()"></a>strcat()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//strcat()将后面的字符串接到前面的字符串后面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>]=<span class="string">"I love you,"</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>]=<span class="string">"999!"</span>;</span><br><span class="line"><span class="built_in">strcat</span>(a,b);<span class="comment">//注意这里是连接了b字符串到a字符串</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a:%s\n"</span>,a);&#125;<span class="comment">//输出的a字符串即是加工后的字符串</span></span><br></pre></td></tr></table></figure>

<p><em>输出结果是:</em>  <strong>I love you,999</strong></p>
<h2 id="srtlen"><a href="#srtlen" class="headerlink" title="srtlen()"></a>srtlen()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//strlen()用于获取字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>]=<span class="string">"I love you,"</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>]=<span class="string">"999!"</span>;</span><br><span class="line"><span class="keyword">int</span> len1=<span class="number">0</span>,len2=<span class="number">0</span>;</span><br><span class="line">len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">len2=<span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a字符串的长度是：%d,b字符串的长度是:%d\n"</span>,len1,len2);&#125;</span><br><span class="line"><span class="comment">//输出两个字符串的长度</span></span><br><span class="line"><span class="comment">//输出结果分别是：a字符串的长度是：11,b字符串的长度是:4</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python列表操作</title>
    <url>/2019/11/28/Python/Python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="list操作"><a href="#list操作" class="headerlink" title="list操作"></a>list操作</h1><h2 id="索引及负数索引"><a href="#索引及负数索引" class="headerlink" title="索引及负数索引"></a>索引及负数索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line"><span class="comment">#执行索引输出列表</span></span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(a[<span class="number">-1</span>])</span><br><span class="line">print(a[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line"><span class="string">'''love</span></span><br><span class="line"><span class="string">['i', 'love', 'you']</span></span><br><span class="line"><span class="string">you</span></span><br><span class="line"><span class="string">['love']'''</span></span><br></pre></td></tr></table></figure>

<h2 id="元素的增加"><a href="#元素的增加" class="headerlink" title="元素的增加"></a>元素的增加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line">a.append(<span class="string">"999"</span>)<span class="comment">#尾部➕1</span></span><br><span class="line">print(a[:])</span><br><span class="line">a.insert(<span class="number">4</span>,<span class="string">'very much!'</span>)<span class="comment">#指定位置➕</span></span><br><span class="line">print(a[:])</span><br><span class="line">a.extend([<span class="string">"do"</span>,<span class="string">'you know'</span>])<span class="comment">#尾部➕2***注意extend的使用格式***</span></span><br><span class="line">print(a[:])</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line"><span class="string">'''['i', 'love', 'you', '999']</span></span><br><span class="line"><span class="string">['i', 'love', 'you', '999', 'very much!']</span></span><br><span class="line"><span class="string">['i', 'love', 'you', '999', 'very much!', 'do', 'you know']</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="元素的搜索"><a href="#元素的搜索" class="headerlink" title="元素的搜索"></a>元素的搜索</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用index对列表中的元素进行搜索，返回的是搜索元素在列表中的序号</span></span><br><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line">print(a.index(<span class="string">'you'</span>))</span><br><span class="line"><span class="comment">#输出结果是：</span></span><br><span class="line"><span class="string">'''2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="元素的删除"><a href="#元素的删除" class="headerlink" title="元素的删除"></a>元素的删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line"><span class="comment">#remove方法</span></span><br><span class="line">a.remove(<span class="string">'you'</span>)<span class="comment">#如果列表中有多个"you"，则会删除第一个</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#pop方法</span></span><br><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line">print(a.pop())<span class="comment">#执行pop方法的同时输出会输出被删掉的最后一个元素</span></span><br><span class="line">print(a)<span class="comment">#再次输出原有列表发现列表已经改变</span></span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line"><span class="string">'''['i', 'love']</span></span><br><span class="line"><span class="string">you</span></span><br><span class="line"><span class="string">['i', 'love']'''</span></span><br></pre></td></tr></table></figure>

<h2 id="列表的运算"><a href="#列表的运算" class="headerlink" title="列表的运算"></a>列表的运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意只支持+和*</span></span><br><span class="line">a = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>]</span><br><span class="line">b =[<span class="string">'you'</span>,<span class="string">'!'</span>]</span><br><span class="line">c=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">d = [<span class="string">'you'</span>]</span><br><span class="line">print(a+b)</span><br><span class="line">print(c*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line"><span class="string">'''['i', 'love', 'you', 'you', '!']</span></span><br><span class="line"><span class="string">[2, 2, 2, 2, 2, 2]'''</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python/Python时间与日期</title>
    <url>/2019/11/28/Python/Python%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="Python时间与日期"><a href="#Python时间与日期" class="headerlink" title="Python时间与日期"></a>Python时间与日期</h1><h2 id="time-模块"><a href="#time-模块" class="headerlink" title="time()模块"></a>time()模块</h2><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><blockquote>
<p>时间间隔是以秒为单位的浮点小数。</p>
</blockquote>
<blockquote>
<p>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p>
</blockquote>
<p><strong>输出当前时间戳</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti</span><br><span class="line">now = ti.time()</span><br><span class="line">print(now)</span><br><span class="line"><span class="comment">#当前时间2019/11/28 23:55</span></span><br><span class="line"><span class="comment">#输出结果为</span></span><br><span class="line"><span class="comment">#1574956554.693932</span></span><br></pre></td></tr></table></figure>

<h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti<span class="comment">#导入time模块</span></span><br><span class="line">Localtime=ti.localtime(ti.time())<span class="comment">#将当前时间戳的浮点数传递给localtime函数</span></span><br><span class="line">print(Localtime)<span class="comment">#输出当前时间</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2019, tm_mon=11, tm_mday=29, tm_hour=0, tm_min=33, tm_sec=7, tm_wday=4, tm_yday=333, tm_isdst=0)</span></span><br><span class="line"><span class="comment">#当前时间是以时间元组方式输出的，下面会讲到时间元组</span></span><br></pre></td></tr></table></figure>

<h4 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h4><table>
<thead>
<tr>
<th>序号</th>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>tm_year</td>
<td>2008</td>
</tr>
<tr>
<td>1</td>
<td>tm_mon</td>
<td>1到12</td>
</tr>
<tr>
<td>2</td>
<td>tm_mday</td>
<td>1到31</td>
</tr>
<tr>
<td>3</td>
<td>tm_hour</td>
<td>0到23</td>
</tr>
<tr>
<td>4</td>
<td>tm_min</td>
<td>0到59</td>
</tr>
<tr>
<td>5</td>
<td>tm_sec</td>
<td>0到61</td>
</tr>
<tr>
<td>6</td>
<td>tm_wday</td>
<td>0到6(周一是0)</td>
</tr>
<tr>
<td>7</td>
<td>tm_yday</td>
<td>1到366</td>
</tr>
<tr>
<td>8</td>
<td>tm_isdst</td>
<td>-1,0,1,-1是决定是否为夏令时的旗帜</td>
</tr>
</tbody></table>
<h3 id="获取格式化时间"><a href="#获取格式化时间" class="headerlink" title="获取格式化时间"></a>获取格式化时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用了asctime()函数</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> ti</span><br><span class="line">now=ti.asctime(ti.localtime(ti.time()))</span><br><span class="line">print(now)</span><br><span class="line"><span class="comment">#输出结果是：</span></span><br><span class="line"><span class="comment"># Fri Nov 29 00:37:59 2019</span></span><br></pre></td></tr></table></figure>



<h2 id="Calender-模块"><a href="#Calender-模块" class="headerlink" title="Calender()模块"></a>Calender()模块</h2><h3 id="获取某月月历"><a href="#获取某月月历" class="headerlink" title="获取某月月历"></a>获取某月月历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar <span class="keyword">as</span> ca</span><br><span class="line"><span class="comment">#使用了calenda模块</span></span><br><span class="line">yue = ca.month(<span class="number">2019</span>,<span class="number">11</span>)<span class="comment">#前面是年份，后面是月份</span></span><br><span class="line">print(<span class="string">"以下是2019年11月的月历"</span>)</span><br><span class="line">print(yue)</span><br><span class="line"><span class="comment">#输出结果是：</span></span><br><span class="line"><span class="string">'''以下是2019年11月的月历</span></span><br><span class="line"><span class="string">   November 2019</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">             1  2  3</span></span><br><span class="line"><span class="string"> 4  5  6  7  8  9 10</span></span><br><span class="line"><span class="string">11 12 13 14 15 16 17</span></span><br><span class="line"><span class="string">18 19 20 21 22 23 24</span></span><br><span class="line"><span class="string">25 26 27 28 29 30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 0'''</span></span><br></pre></td></tr></table></figure>



<p>time模块具体配置请参考Python官方文档。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>第五章 再见了刘校长</title>
    <url>/2019/11/28/%E5%B0%8F%E8%AF%B4%EF%BC%88%E4%B8%80%EF%BC%89/%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<p>第五章 见了刘校长</p>
<p>中国人的现状就是看热闹不嫌人多，可是人人又都是十分知趣的。看热闹看到一定程度之后，人人都知道要逃之夭夭，免得被当事人记恨，热闹就不再热闹了。所以当高二三班的同学们看到事情都已经这样了，所有人又一哄而散了，只剩下美丽清纯的班花夏楚，浑身淋湿的班级一霸赵虎，还有就是那个废物陈涵。哦，不，废物如今不一定是废物了，至少不能再明目张胆地叫他废物。</p>
<p>班花此时一脸震惊地看着陈涵，慢慢地走了前去，面对着白发飘逸的陈涵，问道：“刚刚是你做的吗？”</p>
<p>陈涵又是一脸花痴相，不过在那种场景下，又有谁人能够不犯花痴呢？再加上面前的夏楚真的像极了紫涵，陈涵不过是想起了前世的爱人罢了，想起了那个为了自己能过活下去连性命都能够舍弃的姑娘。</p>
<p>在剑仙的一生中，从来都不缺财富，也不缺女人。潇洒英俊的剑仙对女人似乎有着一种天然的吸引力，无论是古时天子的公主，还是名满天下的舞妓，很少有人能够抵挡住剑仙的诱惑。</p>
<p>但是她们大多数都只是剑仙的过客，来了便待在身旁，走了也从不带走，好像女人就是钱财，可是剑仙两袖清风。</p>
<p>可是紫涵不一样，她是剑仙十万余年的生命中唯一深爱过的，并下定决心要用生命去守护的女人。只可惜前世天人五劫到来时，剑仙异常虚弱，恰好他的有些亲传弟子也想获得长生不老，就设局想要杀掉剑仙，却阴差阳错杀掉了剑仙最珍视的女人——紫涵。</p>
<p>这始终是陈涵的一个心结。无人能解，只能自己默默承受。可是当陈涵遇见了眼前的女孩夏楚时，他那颗平静了许久的心瞬时炽热了起来，他甚至真的萌发出了想要照顾她一辈子的想法。不过陈涵忍住了，他决定看看情况再说，另一方面也是为了保护眼前的女孩。</p>
<p>“我哪有那么厉害啊，刚刚他们都说了这是违反了科学实际的奇迹，又怎么可能是我做的。不过要是你认为是我就是我吧。”陈涵故作平静的回答。</p>
<p>“我相信你。”夏梦红着脸说完，然后害羞地一路小跑走进了教室。</p>
<p>陈涵心里是一阵莫名其妙啊：这小妮子，我这么对你，你还如此对我。你真是什么眼光啊。</p>
<p>班花都走了，陈涵也没有必要继续留在这里和落汤鸡赵虎为伴。他慢悠悠地往校长办公室走去，好像一切都没发生似的。</p>
<p>赵虎心里此刻是有着一万个草泥马，“真会装逼，是你做的，你以为你是神仙吗？一时间赵虎也变得更加气愤了，被人侮辱了还不够，侮辱过后还被人直接无视，这种事搁谁身上谁都忍不下去。所以赵虎肯定也咽不下这口气，只见他满脸狡诈地进入了教室，计划着下一个让陈涵颜面扫地的办法。</p>
<p>此刻校长办公室里，一个年轻貌美的女老师正在为校长服务，而校长满脸享受，一看就知道他们正在进行着什么不能让人知道的交易。</p>
<p>“老刘，上次你答应人家要帮我当上团委书记的，怎么现在还没有兑现，你个老色鬼，你是不是反悔了啊。”女老师声音嗲声嗲气，让人听了直想吐。</p>
<p>“哪能呢，我既然答应你了，就一定会做到的啊不是。你怎么能怀疑我的能力呢？”刘校长为了准确传达自己的意思，还故意将“能力”二字说得很重。他一只手摸着女老师的胸口，一手摸着女老师的翘臀。整个场面简直是不堪入目。</p>
<p>突然一阵巨响，校长办公室的门从外面被人踢开了，把里面正在进行不正常交易的二人吓得不轻。</p>
<p>“谁啊，混蛋，进我的办公室居然敢不敲门。”刘校长咒骂道。</p>
<p>他们一边骂着还一边收拾起衣服，可是再怎么掩饰，满屋子里面弥漫着的特殊的异味也能让人知道里面到底是在干什么勾当。</p>
<p>陈涵慢慢走了进来。</p>
<p>见到了陈涵，年轻女老师为之一惊，因为陈涵的满头白发真的是太惹眼了，简直不应该出现在高中生这个年纪呀。不过的确是很酷，酷得连女老师也忍不住多看了几眼。只不过她马上就反应了过来。</p>
<p>“你不是高二三班那个废物陈涵吗？怎么，你还嫌你的名气不够大，想私闯校长办公室涨涨名气？”年轻女老师呵斥道。</p>
<p>“你知道我？”陈涵眼神凛冽，看着似乎要杀人。不过他是看着的校长，话确实对女老师说的。</p>
<p>“你个废物那么出名，全校还有谁不知道呢。不过这不是你能来的地方，快点给我滚出去。”女老师继续逼迫。</p>
<p>“你确定要我滚？”陈涵这次是对校长说的。</p>
<p>看着眼前这个熟悉的面孔，刘校长早就失神了，因为他不相信，一个人能够活这么多久。不然他也不会纵容陌生的学生对自己“心爱”的女老师这么出言不逊。但事实就摆在眼前，容不得他不去相信。</p>
<p>或许是对眼前的人过于惶恐，又或许是不愿去相信如今摆在眼前的事实。刘校长一直愣着，完全没有注意到现在究竟是个什么状况。</p>
<p>“当然，不是你滚，难道还是我滚吗？快滚，不然我就叫保安了。”女老师看到校长默不作声，还以为是陈涵也惹怒了校长，而校长已经默认了自己的行为。</p>
<p>一会刘校长才反应了过来，转手就给了女老师一个响亮的耳光，“滚！”</p>
<p>“你，你居然叫我滚，你个忘恩负义的家伙。”女老师感到一阵莫名其妙。</p>
<p>“话我不会再说第二遍。”刘校长没有向女老师解释原因，而是继续呵斥道。毕竟原因一旦解释起来就会很复杂了，不光是解释起来头疼费力，更关键的是事实太过骇人，想必说出来也不会有人相信。</p>
<p>女老师哭了，哭着走向了办公室门口，一边哭，还一边暗骂着男人都是用下半身思考的动物。</p>
<p>当女老师刚出了办公室门的时候，刘校长又发话了，弄得女老师还以为校长刚刚是说错了，现在要反悔，不让她离开而是让那个废物陈涵滚出去。<br>然而，校长却说：“出去之后，把门带上。另外，今天的事情，一个字也不要向外人说起，否则，你也不要再待在学校了。”</p>
<p>女老师听完，哭得更厉害了，感觉自己受到了巨大的欺骗似的，即被人骗了色，自己想要的也没有拿到，反倒是自己的铁饭碗都要弄丢了，心里不觉得对陈涵更加厌恶了起来，但同样也很是困惑，不就是一个连校长都不知道的废物陈涵吗？为什么校长的态度转变得也如此之快。</p>
<p>女老师就这样走了，带着她的委屈和疑惑离开了。可是校长办公室里的故事才刚刚上演。</p>
<p>办公室门关上以后，刘校长扑通一声直接跪在了陈涵面前，虽然很疼，可是也不敢吱一声。</p>
<p>“先生，您还活着。”刘校长胆怯地问道。</p>
<p>“怎么，你还巴不信我死了。”</p>
<p>“不不不，我怎么敢。我只是许久没见到先生了，甚是想念而已。”</p>
<p>“几十年没见，拍马屁的功夫你倒是精进了不少。”</p>
<p>“要是先生喜欢听，我以后天天给先生拍马屁。”</p>
<p>“你少给我贫。说吧，刚刚和那个女老师在干什么呢。”</p>
<p>“这个……，我那个……”</p>
<p>“呵。你也别说了。你在干什么我还能不知道。不过既然是你情我愿的交易，我倒是难得管。不过，这几十年，你应该没有干什么违背良心的事吧。”</p>
<p>“当然没有先生，您的教诲我可是都铭记于心呢。绝对没有干违背良心的龌蹉事。请您放心。”</p>
<p>“那就好。现在我在高二三班上学。知道该怎么做了吗？”</p>
<p>“知道知道。我定不会让人知道您的真实身份，不过……”</p>
<p>“不过什么？”</p>
<p>“先生既然一直在高二三班，为什么现在才来找我？”</p>
<p>“哈。你现在不光学会了拍马屁，胆子也大了不少。不该问的别问，做好你的分内之事就行了。”</p>
<p>“好的好的，先生，我知道了。”</p>
<p>“那行，我就先走了。记住你到底该怎么做，别一天到晚只知道男欢女爱之事。都老大不小了还一天私生活糜烂，刘校长。”</p>
<p>听到陈涵还喊他校长，刘校长害怕得出了一声冷汗，只好一直跪着，不再说一句话了。</p>
<p>陈涵见了昔日的门徒之后，也就潇洒地离开了校长办公室，可是余留下来的震撼却让刘校长平静了几天才冷静下来。</p>
<p>“先生不愧是先生，还越活越年轻啊。先生。”之后的几天，刘校长的嘴里不时就哼着这句话，似乎是那件事给留下了很深刻的阴影。</p>
<p>陈涵离开办公室后，就去了教室。一路上听到的都是同学们的谈论，说什么陈涵私闯校长办公室，被校长当场抓住，然后命令陈涵今后再也不能去教师办公区域，如果去了就直接勒令退学。毕竟高中不是义务教育，哪个高中没有因为犯事而被开除的学生呢。</p>
<p>不过陈涵听到这些议论以后，反倒是轻松了不少，“嗯，看来小刘的办事效率还是挺高的，这样一传，既轻易地掩饰了他身为剑仙而又长生不老的真相，又解除了今后会因为犯事而被班主任叫到办公室的隐患，不错，不错，真不错啊”</p>
]]></content>
      <categories>
        <category>小说（一）</category>
      </categories>
  </entry>
  <entry>
    <title>第四章 上学第一天</title>
    <url>/2019/11/27/%E5%B0%8F%E8%AF%B4%EF%BC%88%E4%B8%80%EF%BC%89/%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<p>第四章 上学第一天</p>
<p>陈涵就这样面无表情地走进了校园，却让围观的人一度以为他是因为真的是个废物，即使是面对着这样不堪入耳的侮辱仍然不敢反驳，所以只好灰溜溜地溜进学校。可又有谁会知道，此时的陈涵已经不再是曾经那个愣头青了，因为他们根本就不是同一个人。而陈涵现在的表情和做法仅仅是因为他不在乎而已。那些趁着机会想嘲笑和侮辱陈涵的人想来也是无比幸运，因为至少他们还没有触碰到白发少年的底线，否则，任凭如何不在乎，陈涵也会将那些不知天高地厚的人碎尸万段。</p>
<p>看到这里，或许你会以为这是一句玩笑话。其实不然，剑仙的名号岂是空穴来风。只不过，此世的剑仙有着一个更为重要的任务，即是探寻自己的长身之谜，再加上已隐居多年，剑仙的暴脾气也收敛了很多。</p>
<p>就这样，陈涵一路走着，一路吸引了越来越多的围观群众。他们之中几乎所有人都是持着一种鄙夷和不屑的眼神，陈涵也装作没看见，其实只是见怪不怪而已。</p>
<p>当陈涵来到了高二三班的教室门口时，想不到整个班上的人都出来了。他们分别站在教室外走廊两边。这样的场景让陈涵感到丝丝惊喜，竟以为他们是真的出来迎接这位许久不见的同班同学，顿时还浮想联翩起来。</p>
<p>他又想起了初识项籍的时候。<br>那时候项羽在得知剑仙先生要亲自来看望他，便命令手下的将士整齐地站在军帐外，诚恳而真诚地等待先生的到来。而在白发少年来了以后，项羽亲自迎接，还奏响迎接座上宾时专用的音乐，一切都是最最隆重而尊贵的礼仪。</p>
<p>也正是项羽的诚恳待人打动了白发少年，于是剑仙也真心对待他。不光教会了项羽陈氏剑法，还帮助他建立了盛极一时的项羽政权。</p>
<p>只可是如今已经物是人非。项羽自刎而死，项羽政权被刘邦击败，而刘邦的汉朝也早已被唐朝推翻。几世辗转，终于迎来了共产主义的世界。</p>
<p>“哈哈哈，你们看他那样子，还真以为我们是来迎接他的，他以为自己搞了个李白的cosplay，自己就真的成李白了！”</p>
<p>陈涵正在追溯着往昔，却被一阵阵的笑声打断。这时他才醒悟，哪里是欢迎同学，只是换了个法子嘲讽而已。</p>
<p>此时陈涵抬起了头，看见的是同学们几个几个地聚在一起，一边用手指着他自己，嘴里不时发出粗鲁的咒骂和不懈的嘲讽。</p>
<p>但在人群中间，却有一个长相清纯的女孩子静默不语，只是呆呆地望着满头白发的陈涵。她既没有和同学一起嘲讽陈涵，眼中的神色和脸上表情也看不到一丁点的鄙夷和不屑，从中反而散发出的是一种真诚的关心。</p>
<p>“这还真的是一个与众不同的小姑娘，不过为什么她长得那么像紫涵呢”陈涵感到不解。</p>
<p>要知道，紫涵是陈涵前一世心爱的女人，却因为在陈涵百年一度的天人五劫时为了救陈涵性命而被陈涵自己的亲传弟子无情地杀害。</p>
<p>这件事一直是陈涵最记恨的事情，在那件事过后，陈涵也发誓，一定要让那些忘恩负义之辈付出惨痛的代价。因为，在剑仙的眼中，背叛就是底线之一，绝对不可以触碰，否则就算是天王老子，他也一定会让他坠入地狱。</p>
<p>而白发少年重返凡世时选择陈涵这个名字，原因之一就是因为紫涵的缘故。</p>
<p>不过为何面前的这个姑娘和紫涵如此相像，她又与紫涵究竟有何种关联呢？</p>
<p>当然陈涵想不明白，刚刚重返凡世，自己的一切力量都还没有恢复，又因为紫涵与自己千丝万缕的关系，陈涵即使是百年剑仙也是占卜不了自己的事情的。</p>
<p>恍惚中，陈涵看见面前的姑娘真的就是紫涵，她正用含情脉脉的眼神望着他，好像是在诉说着千年的思念。</p>
<p>但陈涵马上也就反应过来，她只是极像极像而已。</p>
<p>面前的女孩也正一直看着陈涵，突然间，她张开了她美丽的朱唇，用婉转的声音说道：“你还好吗？欢迎你回来。”</p>
<p>顿时，吵闹的人群也安静了下来，因为平时都缄默不语的班花夏楚居然向废物陈凡开口讲话了，一时间，人人都感到不可思议，但更多的还是嫉妒。</p>
<p>能和班花开口讲话是多么一件荣幸的事情，尤其这次还是班花主动的，这是多少人梦寐以求的啊。所以高二三班的同学们，望向陈涵的眼中除了以往的鄙夷外，现在更是多了一种无形的怒火，似乎这个世界上只要没有陈涵，班花就会是他们的了。</p>
<p>而眼见美女的姑娘对自己亲切的问候，陈涵也入迷了。停顿了几秒后，陈涵才稳定了自己的情绪，用一种以往的声音不紧不慢地回答到：“我很好，谢谢！”</p>
<p>看到这一幕，班上的男生们变得更加愤怒了，都认为陈涵的回答是对班花的忽视，亵渎了班花的美。以致于他们望向陈涵的眼睛变得更加凌厉了起来。</p>
<p>陈涵对此也是一阵无语。心想：我这样不就是为了你们着想吗？我要是不冷淡点，你们还不要把我杀了啊。</p>
<p>但是陈涵并没有这样说，因为既然用着陈涵的身份，就要满足他曾经对尊严的向往和期望。所以，陈涵对着那些很是愤怒的男生说：“有本事是你们自己找她说话去，对我凶有劲没劲。”</p>
<p>话已说完，原本以为会让男同学们冷静冷静，没想到却让他们更加闹腾了起来，这次，甚至是女生也都感到一阵不可思议。</p>
<p>“这还是那个废物陈涵吗？”<br>“对呀，他居然学会顶撞了。”<br>“我都快要不认识他了。”<br>同学们的议论声渐渐大了起来。不知情的人还以为是在进行一场高层次的学术辩论呢。</p>
<p>而那位班花眼看着失控的局面，脸上却慢慢浮现出了难得的笑容，还一脸深情地望着眼前的白发少年，“真的是你吗？陈涵。”班花心里也一阵困惑。</p>
<p>“陈涵，你好大的胆子。连班花你也敢调戏。”<br>这时候，从教室里冲出来一位气焰嚣张的学生，看起来穷凶极恶。更让人奇怪的是他的手里居然端着一盆冰水，也不知道是从哪里弄来的。</p>
<p>不过看众人的眼色就知道这一切都是他们商量好的，他们计划等著名的废物在教室外面被嘲讽得一无是处之后，由班上“德高望重”的“前辈”赵虎出马，让废物陈涵也尝尝“冰桶挑战”的厉害。</p>
<p>虽然现在的情况和计划的不太一样，但是他们依然想看看陈涵变成落汤鸡是什么样子。</p>
<p>此时班花的脸色却是不太好看，想必是因为班花为自己明明知情却没有提前告知陈涵而感到内疚。不过剑仙陈涵是何许人也，这样的雕虫小技又能对他有什么影响呢。而陈涵也瞬间知晓了班花失态的原因，于是他轻声对班花夏楚说：“没事，这不怪你。我能应付的。”</p>
<p>这样，班花阴沉的脸色才有所缓解，不过依然忧心忡忡的，担心陈涵会出什么问题。</p>
<p>看着废物陈涵居然和班花眉来眼去，赵虎再也沉不住气了，在一众同学的欢呼声中，他端着冰水从教室门口冲了出来，迅速来到了陈涵的身旁，将冰水往陈涵身上倒去，期待看到预计中陈涵成为落汤鸡的样子。</p>
<p>不过事情并没有像赵虎和其他同学预计的那样去发展。当冰水刚从盆子里倒出来的时候，冰水的确是往陈涵的头上飞去，不过当一大盆冰水都快要淋到陈涵头上时，所有冰水却突然反向，反而向赵虎飞去。</p>
<p>几秒钟之后，也的的确确出现了一只落汤鸡，不过那个人却不是大家以为的废物陈涵，反而是整件事情的始作俑者——赵虎本人。</p>
<p>看到头发还有全身都已经湿透身体还不断打抖的赵虎，众人都疑惑不解，因为刚刚的情况确实超出了科学能够解释的范畴。不过大家都没有疑惑很久，都齐刷刷笑了出来，毕竟只要有人出丑，是谁出丑不是一样看笑话。</p>
<p>这次连班花夏梦也笑了，笑得很是开心。</p>
<p>但越是这样，赵虎就越没面子。他一边哆嗦，还一边用手指着陈涵说：“你小子，给我等着，敢这样羞辱我，我定要你好看。”</p>
<p>“好啊。我叫陈涵，我随时奉陪到底。”</p>
<p>又是令人不敢置信的回答，以前的那个陈涵去哪了呢？这还是那个废物陈涵吗？此时，高二三班的所有同学心中都装着一个个的疑问无法解决。但是毫无疑问，那个毫无尊严、任人宰割的废物陈涵似乎真的不见了。</p>
]]></content>
      <categories>
        <category>小说（一）</category>
      </categories>
  </entry>
  <entry>
    <title>简单代码证明tensorflow安装且配置成功</title>
    <url>/2019/11/26/Tensorflow/tensorflow/</url>
    <content><![CDATA[<p>为了验证Tensorflow是否正确安装，我躺了很多的坑，因为下载了最新版本的tensorflow—<br>2.0，导致很多之前版本的方法都用不了，而网上那些代码大多是老版本的，所以一直报错。最后找到了2.0的教程，终于证实了自己已经正确安装。</p>
<p>如果有时间，我可以考虑写一篇教程，帮助大家少走弯路。</p>
<p>#这是第一个成功实现的tensorflow-2.0;</p>
<p>i</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(tf.keras.__version__)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
  </entry>
  <entry>
    <title>Tensorflow之自动求导实现</title>
    <url>/2019/11/26/Tensorflow/Tensorflow%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自动求导机制</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line"><span class="comment">#tf.Variable()用于声明一个变量，它需要一个初始值将其存储在initial_value中。</span></span><br><span class="line">x = tf.Variable(initial_value=<span class="number">3.</span>)<span class="comment">#Pyhon中可以使用整数后加小数点表示将该整数定义为浮点数类型。例如3.表示3.0</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape: </span><br><span class="line">    y = tf.math.log(x)<span class="comment">#这里math.log()表示的是底数为e(只是默认为e，可以修改)的对数函数，类似的，如果要计算y=x的平方的导数，将math.log()改为square即可</span></span><br><span class="line">y_grad = tape.gradient(y,x)</span><br><span class="line">print([y,y_grad])</span><br><span class="line"><span class="string">'''输出结果为：</span></span><br><span class="line"><span class="string">[&lt;tf.Tensor: id=93, shape=(), dtype=float32, numpy=1.0986123&gt;, &lt;tf.Tensor: id=96, shape=(), dtype=float32, numpy=0.33333334&gt;]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tensorflow</category>
      </categories>
  </entry>
  <entry>
    <title>第三章 重返校园</title>
    <url>/2019/11/26/%E5%B0%8F%E8%AF%B4%EF%BC%88%E4%B8%80%EF%BC%89/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E9%87%8D%E8%BF%94%E6%A0%A1%E5%9B%AD/</url>
    <content><![CDATA[<p>第五章 重返校园<br>白发少年离开项羽陵墓以后，便来到了翘楚市。<br>翘楚市作为浙省的省会，繁华异常，恰逢计算机包括人工智能在内的互联网产业的兴起，翘楚市已经在全国打出名声，从一个名不经传的地级市一跃成为了一座名副其实的现代化大都市。</p>
<p>不过，白发少年选择翘楚市作为重返凡世的地点，并非是看中了翘楚市的繁华，毕竟他和项羽一样，天生喜欢清净，况且已经活了十万余年，试问这个世界上还有怎样的繁华是白发少年所没有见过的呢，又有什么东西是白发少年所痴迷的呢。繁华如帝王的宫殿都吸引不了他，珍贵如一座座金山银山都无法让他感兴趣，区区一个正在发展中的现代化都市，又能怎么样呢。就像网络上爆红的某首富一亿的小目标于世界首富而言不过是个笑话，但普通人却是惊讶不已一样，不同的人对财富和珍贵有着不同的定义，而这仅仅是因为身份不同，见识不同，仅此而已。<br>至于选择翘楚市只不过是刚好他发现在翘楚中学有一个各项特征都符合他期望的的高中生前不久却意外死亡，所以他决定冒名顶替，替代死亡学生走完本该走完的路，也为了自己寻求长生之谜答案准备一个合理的身份。</p>
<p>来到翘楚市时，正好是周末，于是白发少年在一处不起眼的地方租了房子，这为的是不被外界人打扰到自己的清净，也为了避免前几世那些不知死活的仇家找上门来报仇。就这样，剑仙陈紫阳慢慢开启了这一世的新生活。</p>
<p>第二周星期一，白发少年徒步来到了翘楚中学，他并没有坐车，因为车能有御剑快吗？21世纪的所有高科技出行工具，在剑仙的眼中不过就是一个天大的笑话。非但车比不上御剑，就算是飞机比之御剑又如何？白发少年选择走路，只不过是为了更好地了解这个世界而已，但还别说，世界的发展还真的挺快的，现在的一切比起前几世的真的是一个在天上，一个在地下。</p>
<p>不过由于不了解21世纪中国学校的规定，白发少年来得很晚，迟到了，所以，在白发少年刚刚要进入学校之时便被学校门口的保安拦住了。</p>
<p>“做什么的？”门口的保安厉声问道<br>“我来上学。”白发少年不紧不慢地回答。<br>“那你为什么现在才来。”保安继续追问。<br>“不好意思，我生病了，所以迟到了。”白发少年看都没有看保安一眼，心里只是暗自想到：看来真的是离开凡世太久了，现在连上个学都有这么多的规矩啊，还不由得想起了很久很久以前听夫子讲课的时候。<br>那时候夫子座下弟子三千，各个都是博学多识的有识之士，但是他们都心甘情愿的居于夫子之下，总是耐心地倾听夫子的教诲，静静学习着夫子的精神财富。<br>但世人只知道夫子有弟子三千，却从不了解三千弟子中有一个人不但是夫子的得意门生，更是夫子的手足兄弟。那就是白发少年，那时他叫陈紫阳，而他有一个更为人熟悉的名号：剑仙。</p>
<p>在夫子座下学习不得不说是一件特别幸运的事情，因为夫子懂得如何为人师，明白如何因材施教，知道怎样才能最大地调动学生们学习的兴趣，而不是像今天的教育一样，在中高考的压力下，即使出了几个学习异常优异的学生，但内心对知识的渴求和欲望却已经消失得无影无踪。而夫子不一样，夫子教育学生，并不是要求他的学生今后一定能多有出息，或者是能够当上什么大官或是赚多少钱，而是让他们明白知识的重要性，明白学到老活到老这句至理名言。所以作为夫子的学生并没有什么规矩，也从不存在迟到了会不准继续学习的要求，只要你心里向往着知识，什么时候来听夫子讲课都可以，只要不影响正在听课的其他同学。</p>
<p>想着想着，白发少年眼角竟有些湿润了，没想到过去了这么多年，“我还是会不时地想起你，夫子，学生真的想你了。”</p>
<p>“那我怎么看你都不像是一个正经学生啊，留着满头白发，看着倒是很显眼，但是一点学生该有的朝气都看不到啊。”眼见着眼前的白发小子并不拿自己当回事，保安心里很是气愤，不由得说话声音更大了起来。<br>“哈哈，那不是陈涵嘛，保安叔叔，你就让他进来吧，他真的是我们学校的，你知道高二3班那个废物学生嘛，就是他。”保安刚说完话，就迎面走过来一个全身穿着名牌，一看就知道是一个富家纨绔子弟的男生。<br>走到陈涵面前，男生又转而对着陈涵大声地说，“你以为你染了一头白发，我就认不出来是你了吗？废物永远都是废物，变成什么样子都是一样。”说完，他还戏谑的大笑了起来，也让围观的学生越来越多，他们都想看看学校大名鼎鼎的废物陈涵究竟是谁，也准备趁机嘲笑陈涵一番。<br>见到这样的状况，保安也就让白发少年进去了，虽说之前确实不知道这个叫陈涵的男生，但此刻眼里表现出的尽是对陈涵的鄙夷。直到保安回门卫室的时候，心里都还早嘲讽那个被称作废物的白发少年，心里也暗自窃喜：想不到，这个世界上真的还有比我这样的废物还废物的人，哈哈哈哈。<br>不过陈涵都没看在眼里，因为在剑仙的眼中，这些人只不是一群跳梁小丑，想要废掉他们，随时都可以，问题只是没有必要，毕竟凡人皆如蝼蚁，蝼蚁的牢骚之语去那么计较干什么呢。但同时白发少年的心中也闪过一丝愤怒，他没有想到，那个意外死亡的男孩居然受到了如此巨大的侮辱，心中顿时也是愤愤不平。<br>本来活了十万余年剑仙不应该有这些凡人该有的情绪，但既然他已经代替了意外死亡的男孩，便有责任将男孩的尊严全部拿回来，这也是白发少年在被人叫做陈涵废物时没有发作的原因。</p>
<p>前几世的白发少年，是万众瞩目的剑仙，他有一剑，可以斩日月，他有一决，可以问苍天。<br>一剑在手，问人能敌。<br>但在白发少年的心中，却有一个困惑了他很久很久的问题：他为何能长生，或者说长生的命为何选择了他？<br>为了解答这个问题，他询问过同为修炼者的夸父，可夸父在劈开天地之后便因耗尽精气而死，而困惑依然无解；他也曾请教过夫子，夫子却只告诉他，你会因长生而流芳百世，而我虽只有一世的寿命却会因精神的光辉而永垂不朽，这即是‘缘’。<br>后来，他又向很多很多的名人圣师追寻过答案，但终归是没有答案。<br>而长生就像是一个无法突破的囚牢困住了他，“长生之谜”又像是一扇没有钥匙的门挡住了他思索的方向和前进的道路。<br>因此，表面光鲜的长生少年饱受了长生的折磨，在疑惑和不解中生活了十万余年之后，最终他决定在地球灵气还未完全耗尽之时，再来尘世走一遭，希望此世可以解开长生之谜，然后安然飞升，以免地球灵力耗尽。那时候再想飞升也是来不及了，万年剑仙最终成为了蓝星和凡人的陪葬。</p>
<p>就这样，白发少年接受了陈涵这个名字，也既而接受了这个名字背后背负的屈辱和痛苦。他面容平静，面对围观人员的嘲讽心如止水，一路无视人们的鄙夷和嘲讽，径直走入了翘楚中学的大门。</p>
<p>一出好戏即将上演。</p>
]]></content>
      <categories>
        <category>小说（一）</category>
      </categories>
  </entry>
  <entry>
    <title>问题实现2</title>
    <url>/2019/11/26/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B02/</url>
    <content><![CDATA[<p>//程序功能是:在 n 行 n 列的矩阵中，每行都有最大的数，程序求这 n 个最大数中<br>的最小值，完成程序并调试。</p>
<p>#include&lt;stdio.h&gt;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">define</span> N 5`</span></span><br><span class="line"></span><br><span class="line">`**<span class="function"><span class="keyword">void</span>** <span class="title">mins</span><span class="params">(**<span class="keyword">int</span>** a[N][N])</span></span>;`</span><br><span class="line"></span><br><span class="line">`**void** mins(**int** a[N][N])`</span><br><span class="line"></span><br><span class="line">`&#123;`</span><br><span class="line"></span><br><span class="line">  `**<span class="keyword">int</span>** row,col,<span class="built_in">max</span>=<span class="number">0</span>,<span class="built_in">min</span>=<span class="number">0</span>;`</span><br><span class="line"></span><br><span class="line">  `**<span class="keyword">for</span>** (row=<span class="number">0</span>; row&lt;N; row++) &#123;`</span><br><span class="line"></span><br><span class="line">​    `**<span class="keyword">for</span>** (<span class="built_in">max</span>=a[row][<span class="number">0</span>],col=<span class="number">1</span>;col&lt;N; col++) &#123;`</span><br><span class="line"></span><br><span class="line">​      `**<span class="keyword">if</span>** (<span class="built_in">max</span>&lt;a[row][col])&#123;`</span><br><span class="line"></span><br><span class="line">​        `<span class="built_in">max</span>=a[row][col];`</span><br><span class="line"></span><br><span class="line">​      `&#125;&#125;`</span><br><span class="line"></span><br><span class="line">​    `**<span class="keyword">if</span>** (row==<span class="number">0</span>)&#123;`</span><br><span class="line"></span><br><span class="line">​        `<span class="built_in">min</span>=<span class="built_in">max</span>;`</span><br><span class="line"></span><br><span class="line">​      `&#125;`</span><br><span class="line"></span><br><span class="line">​    `**<span class="keyword">else</span>** **<span class="keyword">if</span>** (<span class="built_in">max</span>&lt;<span class="built_in">min</span>)&#123;`</span><br><span class="line"></span><br><span class="line">​        `<span class="built_in">min</span>=<span class="built_in">max</span>;`</span><br><span class="line"></span><br><span class="line">​      `&#125;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  `&#125;`</span><br><span class="line"></span><br><span class="line">  `<span class="built_in">printf</span>(<span class="string">"最小值是:%d\n"</span>,<span class="built_in">min</span>);`</span><br><span class="line"></span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`**int** main()`</span><br><span class="line"></span><br><span class="line">`&#123;`</span><br><span class="line"></span><br><span class="line">  `**<span class="keyword">int</span>** a1[N][N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">40</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">500</span>&#125;;`</span><br><span class="line"></span><br><span class="line">  `mins(a1);`</span><br><span class="line"></span><br><span class="line">  `**<span class="keyword">int</span>** a2[N][N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">10000</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">923</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">500</span>&#125;;`</span><br><span class="line"></span><br><span class="line">  `mins(a2);`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>第二章 再见西楚霸王</title>
    <url>/2019/11/25/%E5%B0%8F%E8%AF%B4%EF%BC%88%E4%B8%80%EF%BC%89/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%86%8D%E8%A7%81%E8%A5%BF%E6%A5%9A%E9%9C%B8%E7%8E%8B/</url>
    <content><![CDATA[<p>公元前二零二年，楚汉双方在垓下进行了一场震动中外的战略决战，最后以项羽自刎，楚军战败而告终，史称“垓下之战”。</p>
<p>“先生，您真的要走吗？”</p>
<p>“嗯…。”</p>
<p>“先生，那我今后还能见到您吗？”</p>
<p>“籍，若是有缘，我们定会相见。”</p>
<p>“先生，多亏你的倾囊相助，我才得以和刘邦平分天下。我如今正在筹备兵力，以便不久以后能和刘邦决一死战。可刘邦太狡猾了，稍有不慎恐怕就会浑身碎骨啊。所以这可能是我最后一次和您喝酒了。要是我真的败了，还请先生能够回来看看我，岁月漫长，我怕我一个人在地底下会很清冷孤独啊。”</p>
<p>“可。”</p>
<p>说完，白发少年踏着青铜宝剑，向虚空飞去，很快便消失不见。</p>
<p>“项籍恭祝先生仙去。”项羽双手作揖，恭敬地跪在地上，直到白发少年离去。</p>
<p>两年后，垓下。</p>
<p>平静已久的战神项羽重返战场，仅是以一人之力就打得汉军连连败退，但敌我悬殊，加上刘邦阴险狡诈，战神项羽也终究是不敌，只好带着仅剩的八百余壮士冲破汉军层层包围，一路快跑，来到了乌江岸边。</p>
<p>此刻，项羽正在在乌江岸边，面对着乌江边停留的一艘小船，目光坚定，眼神远望着虚空一角。</p>
<p>“霸王，快走吧，再不走就要来不及了。”等候的渔夫见项羽迟迟没做决定，便焦急地询问道。</p>
<p>“是啊，霸王，快走，这里有我们顶着，我们就算是死，也定要护霸王周全。”为首的壮士扶刀而跪，声音嘶声力竭。接着，所有壮士都跪了下来。</p>
<p>“我们就算是死，也定护霸王周全。”众壮士异口同声，吼声响破天际。</p>
<p>“霸王，快走吧。留得青山在不怕没柴烧啊。等我们回到江东，我们定能招募更多的士兵，那时候我们一定能够卷土重来，回来报仇啊！”船夫着急得提醒道。</p>
<p>“霸王，是啊。我们等您回来为我们保仇。快走吧，再不走就真的来不及了。”众壮士应和道。</p>
<p>此时，项羽紧闭双眼，双手紧握着天龙破城戟。思考了片刻后，项羽睁开双眼，变得杀气腾腾。</p>
<p>而当看着这些为自己忠心耿耿的将士时，项羽又很是欣慰，他平静了心中的怒火和不甘，缓缓说道：“当年我于江东起兵，想为天下苍生的福祉奉献出我的微薄之力。承蒙乡亲父老的信任，我项羽才能于江东起兵，并在各位乡亲的帮助和扶持下最终得以达成今天这样的的成就。可如今，追随我出来拼命打拼的江东人已所剩无几，他们之中死的死，伤的伤。这都是我犯的过错啊，我怎么还有脸回江东，去见江东的父老乡亲呢。抱歉各位，我是真的做不到。今天纵然是死，我项羽也要挫败刘邦的锐气，灭灭他那不可一世的威风。所以我决定了，我是不回江东的，我要在这里和汉军决一死战。”</p>
<p>“霸王不可啊。我们都是您教出来的兵，我们的命微不足道，能为您而死，是我们今生莫大的荣耀。可是霸王您是有帝王之气的啊，您只要今日不死，来日一定能做帝王啊。霸王！”为首的壮士再一次声嘶力竭地吼叫。</p>
<p>“是啊，霸王！请王三思，请王三思啊！”众壮士不停地吼着，直到最后声音听着就像是在乞求。</p>
<p>“我心意已决。尔等休要再说。不过你们要是有人想走，直接走了便是，今日我不当你们是逃兵。”项羽说完，轻声叹了口气，叹息声中既有失败的无可奈何，也有败给刘邦的内心不甘。</p>
<p>“能与霸王同生死，我们怎么能离开呢！“为首的壮士最终知道了霸王的最后决定，所以他也做好了和项羽并肩作战，战死沙场的准备。</p>
<p>”众将士听令，和汉军决一死战！”于是为首的壮士站了起来，用自己的行动默默支持着这个走投无路的男人，也表现出了他对项羽的赤胆忠心。</p>
<p>“杀无赦！杀无赦！杀无赦！”众壮士齐声吼着，竟无一人离开。</p>
<p>不过很快，汉军追来，千军万马围住了项羽等人。</p>
<p>项羽望着眼前的来犯之敌，突然间杀气腾腾。</p>
<p>“杀！”他不等手下壮士一起，而是一个人冲入了千军万马的敌军之中。</p>
<p>随后，八百壮士扑向汉军，两军正式交战。</p>
<p>战神项羽外加八百死士，战斗力都异常惊人，人人都能以一定抵俩，项羽更是以一当十，一时间，汉军节节败退。</p>
<p>可无奈，两军人数悬殊太多，再加上刘邦的要挟刺激，汉军士兵竟是愈战愈勇。</p>
<p>几个小时过后，楚军这边就只剩下楚霸王项羽一个人了。</p>
<p>此时，众多汉军围着项羽，但无一人敢上前。在亲眼见证了战神的恐怖以后，汉军士兵人人提心吊胆，生怕自己就是项羽戟下的下一个亡魂。</p>
<p>而项羽，此刻正立于汉军中央，虽被敌军紧紧包围，但他不惧，是啊，又有什么好惧怕的，对于现在的项羽，唯一亏欠的，就是前不久为了自己能够安心应敌而自杀的虞姬了。</p>
<p>项羽思索了片刻，手里用着更大的力握着陪伴自己征战无数战场的兵器握天龙破城戟，而眼神凝望着虚空一角。</p>
<p>“先生。项籍今天怕是难逃一死了。死我是不怕的，我怕的是，我再也见不到先生了，再也不能为先生倒酒了。”</p>
<p>“先生，永别了。”项羽将天龙破城戟扔向空中，待到天龙破城戟落下之时，项羽移到了天龙破城戟正下方。</p>
<p>“先生，记得回来看看籍啊！”</p>
<p>“先生，我好不甘心！”</p>
<p>“先生…”</p>
<p>毫无意外地天龙破城戟直接刺入了项羽喉咙，一代战神就此落幕。</p>
<p>而此时，正在九天云霄吐息的白发少年眉头一紧，暗道：籍，想不到连你都败了啊，或许这就是凡人的命吧，可我一个仙人又能几何呢。于我而言，宇宙万千都只不过是沧海一粟，又何况只是一个小小的蔚蓝星球的帝王之争。所以我是不能够最后祝你一臂之力的啊。不过，我却不忍见你的尸体被人糟蹋。就让我再帮你最后一次！</p>
<p>白发少年踩着祥云，从九天云霄直奔垓下而来。</p>
<p>白发少年速度极快，到达垓下之时，离项羽自刎不过过了几分钟，这就是仙的速度。白发少年速度之快，早已超越了时间和空间的束缚，或许只有天命才能束缚住白发少年。</p>
<p>不过于百姓而言，帝王便是天命，于王侯将相而言，天命即是天命，而对于白发少年，他便是天。作为宇宙中首屈一指的修行之人，白发少年睥睨一切，视苍生为蝼蚁，却偶尔也萌发出绵延的怜惜之心。项羽作为其十万年长生之路的一个过客，虽说不太重要，但却也占据了一席之地，这便是白发少年愿意费精力跑一趟的原因。</p>
<p>白发少年到时，恰好碰见刚刚分完项羽尸体的汉军，正要割掉项羽头颅的耳朵，挖掉眼睛拿回去向刘邦分别领赏。</p>
<p>白衣少年突然从天而降，落在了汉军身旁。</p>
<p>“什么人？报上名来！”见到突如其来的天降之人，领头的汉军胆战地问道。</p>
<p>“取尔等性命之人！”白发少年淡淡地说道，然后便目望虚空，俨然一副放空一切的姿态。</p>
<p>“找死，兄弟们，给我上！”刚沉浸在刘邦封赏意淫中的汉军将士真的被激怒了。话一说完，一群汉军士兵已经冲着白衣少年而来。一时间气势冲冲，杀气腾腾。</p>
<p>而白衣少年平静而沉默，面对众多敌人，没有丝毫慌乱，默念到：我堂堂剑仙，活了数十万年，本已对凡世间一切无所顾忌，却也不想滥杀无辜。可若是有人胆敢冒犯我，我定会灭尔等九族。</p>
<p>话一刚完，白发少年轻念一声：“斩”。只见一枚青铜古剑突然出现在空中，在众多士兵还未觉察之际，古剑横空一扫，所有刚刚还气焰嚣张的汉军士兵，此刻却规规整整地躺在了地上，毫无生气，死得不能再死了。</p>
<p>白衣少年慢慢前移，走到了项羽头颅面前，俯下身用手捧起了项羽头颅。</p>
<p>“籍。我来晚了。休要怪先生啊。”</p>
<p>“在长白山下有一块风水宝地，你就在那里安息吧。我知道你累了，你终于可以休息了。”</p>
<p>说完，白发少年将头颅抛向空中，头颅在未知力量的指引下径直飞向长白山山底。</p>
<p>突然，一束金光闪耀天际，长白山山底一阵巨动。</p>
<p>长白山项羽之墓就此形成。</p>
<p>陵墓大门前，几个大字苍劲有力：剑仙之仆项羽。</p>
]]></content>
      <categories>
        <category>小说（一）</category>
      </categories>
  </entry>
  <entry>
    <title>除了文艺，我一无所有</title>
    <url>/2019/11/25/%E6%96%87%E8%89%BA/%E6%96%87%E8%89%BA%E8%AF%97/</url>
    <content><![CDATA[<a id="more"></a>

<p>除了文艺，我一无所有</p>
<p>（nianchu）</p>
<p>月光柔和</p>
<p>我在阴冷的窗前独酌</p>
<p>那婀娜的身影</p>
<p>是在等待谁的思念？</p>
<p>眼神迷离</p>
<p>年少的人儿在心中哭泣</p>
<p>这样的宿命</p>
<p>何时是个尽头？</p>
<p>翻开泛黄的书卷</p>
<p>走进心灵的旅程</p>
<p>灵魂深处本不该有孤寂的烟火</p>
<p>这条熟悉的路上</p>
<p>开着鲜艳的花朵</p>
<p>我心中念叨着的那</p>
<p>些荣耀的时刻</p>
<p>可怜如今的我</p>
<p>除了文艺</p>
<p>不剩什么</p>
]]></content>
      <categories>
        <category>文艺</category>
      </categories>
  </entry>
  <entry>
    <title>第一章 横空出世</title>
    <url>/2019/11/25/%E5%B0%8F%E8%AF%B4%EF%BC%88%E4%B8%80%EF%BC%89/%E7%AC%AC%E4%B8%80%E5%BC%A0%20%E6%A8%AA%E7%A9%BA%E5%87%BA%E4%B8%96/</url>
    <content><![CDATA[<p>长白山是欧亚大陆东缘的最高山系，地处白山市东南部，位临中国与朝国边界，一直以来都是游客们乐意造访的风景名胜。<br>　　作为一座休眠已久的巨型复式火山，长白山拥有的丰富自然资源也为不同的生物提供了活下去和繁衍的可能，这些使长白山俨然已经成为了一个天然的绿色生态公园。<br>　　然而除了风景优美以外，长白山闻名全国还有一个不为人知的秘密：作为一个景色优美风水又好的山脉，长白山下埋葬了许许多多不同身份的贵人，也保留了众多可研究价值极高的陵墓。<br>　　长白山山脚。<br>　　“报告雷教授，长白山下发现大型墓葬，疑似项羽陵墓，沈教授叫我来通知您下去。”小王急匆匆地跑到队伍驻扎点，满脸都是汗水却又洋溢着兴奋和激动。<br>　　“是真的吗？快快快，带我去看。杨然，你快去报告郝队长，说我们这里有重大发现，我先下去看看，记住，叫他把考古队其他人都带过来。”<br>　　说完这话，雷教授赶忙跟着小王前往挖掘现场。<br>　　挖掘现场。<br>　　四周都是茂密的森林，远远看起来，那些高大的树木奇形怪状，就像是笔直站立的僵尸。<br>　　这样的景致让雷教授一行人都目瞪口呆，尤其是考古队伍中的一些新队员，因为本就是第一次外出实地侦查，见到如此怪异的景象难免心头一震。<br>　　不过不同于考古队的其他人，雷教授感到惊讶是因为他在思考一个问题，这里看着根本不像是有墓穴，为何老沈会一口笃定这就是项羽之墓？要知道，当年垓下之围时项羽因为不肯渡乌江最后被汉军围攻而死。<br>　　而在项羽死后，刘邦因为对项羽还有所感念，又为了收拢那些忠于项羽而又一直躲在暗处的人，于是命令手下将项羽厚葬，但令人奇怪的是，当汉军收集齐已经四分五裂的项羽尸体并准备按照要求厚葬项羽时，士兵们发现项羽的头颅不见了。<br>　　所以千百年来人们一直祭拜的项羽之墓只是一个躯体墓，最最重要的头颅之墓人们一直都在寻找，却始终是一个谜。这也是雷教授一听到项羽墓就急冲冲赶来的原因。<br>　　“该不会是老沈弄错了吧？”雷教授轻声自言自语道。<br>　　“教授，你在做什么？”秦嫣然突然冲到教授跟前，大声问道。<br>　　“啊！你干什么！你个死丫头，吓死我了，真是没大没小的。注意跟着我，别走丢了。”<br>　　“是，教授。”说完秦嫣然就挽着教授的手，不再大声嬉笑了。<br>　　秦嫣然，是西京大学校花，也是考古队里面的明星人物。<br>　　因为其美丽的外表，性感的身体曲线，再加上极其聪明的脑袋，所以她一直都是考古队里的宝贝。无论考古队其他队员，还是里面德高望重的教授前辈，都很宠爱她，说她是考古队里的女王也不为过。<br>　　秦嫣然就这样和教授并排走着，突然，前面带路的小王停了下来，还指着前面的一个巨大的树洞对雷教授对说：“教授，这个树洞就是我们的目的地。”<br>　　听到这话，所有人都一愣，都有点丈二和尚摸不到头脑。不过雷教授却是恍然大悟。<br>　　“哈哈哈哈。我还以为是老沈搞错了呢。楚霸王之墓怎么会在长白山这样风景优美的地方却又修得如此隐蔽。原来，墓穴安在这里是有意为之，目的就是掩人耳目，毕竟当时已经是刘邦的天下了，就算是刘邦下令厚葬，可要是有一天他反悔了呢，所以项羽的死众为了保全项羽头颅便将墓穴安排在此处。不出意外的话，虞姬的墓恐怕也在下面。”雷教授看大家都神情疑惑，便慢慢向大家解释。<br>　　听完雷教授的一席话后，大家也都明白了。<br>　　于是一行人顺着树洞，慢慢滑下，不一会就便到了底。<br>　　树洞下面，就是墓穴的正门。<br>　　高耸的墓门直破天际，很是壮观。而见到这一番景象，考古队众人顿时目瞪口呆。队员中不时有人嘀咕：“这次一定算得上是考古界最劲爆的消息。”“谁说不是呢，这么雄伟的墓门，里面一定有很多宝藏，要是…。”<br>　　“小李，你说什么呢，我们可都是考古学者，怎么能打这些文物的主意，你说话给我注意点。”本来雷教授听见了队员的谈话也很骄傲，虽说不是自己单独发现的这个墓葬，但至少说明自己眼光也很不错。不过在听到手下人觉悟这么低，还打文物的主意，雷教授的气就不打一出来。<br>　　“是，教授，我们知错。”<br>　　然后考古队一行人逐渐往墓穴面前的沈教授靠过去。<br>　　“老沈，有什么发现吗？”雷教授的亲切地问候道。<br>　　“嗯。有点小发现。刚刚我和手下，在这附近听到了巨大的震动，根据仪器检测结果，震动的原因是由于墓穴下面的板块剧烈运动。”<br>　　“看来里面真的有大宝贝啊。”雷教授接着沈教授的话继续说道。<br>　　突然，一阵更为剧烈的震动响起，使得考古队一行人都胆战心惊。<br>　　而此时，在墓门的东南方，走出来了一位白发及腰的俊俏少年，直接无视了墓门前的众多考古队员。<br>　　“站住，你什么人？”<br>　　随着一声质问声响起，墓门前人们的目光都看向了白发少年。<br>　　“不好意思，我家在附近的村落，前几天在这里迷路，刚刚才走出来。”白发少年回答道。<br>　　“原来是迷路的，让他走吧。”见状，秦嫣然说道。<br>　　话刚说完话，白发少年便瞬间消失在了众人眼中。<br>　　“人呢？怎么一晃眼就不见了。”一个考古队员发问。<br>　　“是啊，怎么回事，是人是鬼啊。”<br>　　“我就想说怎么那么年轻就全是白发，还是长头发，难不成真是鬼？”一连串的议论，让众人都毛骨悚然。<br>　　“大家快看，震动仪显示地下震动已经停止了，而刚刚那个白发少年出现之时却是震动得最明显的时候。”雷教授一直密切注视着震动的变化，虽有奇怪但也想不通缘由，直到觉察到众人的反应，才意识到了问题的严重性。<br>　　“容我说一句。据上古传言，绝世陵墓中存在着护陵人，而这类护陵人不同于一般守墓人，因为他们是长生不老之身。我想，无论这是不是项羽的墓，我们都不应该去打扰他。刚刚的白发人或许只是警告。若要是我们继续进入陵墓，恐怕后果就不是警告这么严重了。”沈教授突然说道。<br>　　听到沈教授的解释，众人开始觉得有些天方夜谭，但转念一想，大家又深信不疑。于是，众人分别收拾起了自己的行李，准备打道回府。<br>　　雷教授则在一旁亲自拨通了郝队长的电话，向他说明了情况，并让他也不要过来了，立即返回。<br>　　可郝队长本来就不是一个善茬，虽然身为考古队队长，却三番五次将考古寻来的宝贝悄悄倒卖到黑货市场。你说遇到这样的好事，他能随便放弃吗？<br>　　于是在雷教授一行人离开以后，郝队长便带着几个他的心腹来到了墓门前。<br>　　郝队长在墓门前东看西看，而每一次观察都会加深他内心的兴奋，因为从各种迹象来看，这都是一座陪葬品异常丰富的绝世陵墓。<br>　　紧接着郝队长几个人准备动手了。<br>　　可毕竟他们不是专业的盗墓者，所以没有专业盗墓的工具和能力，最好的方法就是引爆墓门，但这样的话就会产生较大动静，带来不必要的麻烦，这也是郝队长等雷教授他们离开才动手的原因。<br>　　郝队长吩咐手下将炸药分别放置在长方形墓门的四个顶角，而他自己则一手拿着点燃的烟，一手握着引爆器，俨然一副胜券在握的样子。<br>　　一切都安置好后，郝队长异常兴奋，或许干完这次大买卖后以后就可以金盆洗手了，拿着巨额的钱财当着考古队队长养老是极好极好的。<br>　　郝队长一声令下，炸药像预料的那样也像前几次郝队长几个人干过的那样，引爆了，然而墓门却纹丝不动，没有倒塌，甚至没有一点被破坏的痕迹。<br>　　而就在此时，一个清脆的声音却苍劲有力，响彻云端，不容任何人质疑：“闯项羽陵墓者，死。”<br>　　听到这个声音以后，即使是偷盗过很多次古墓的郝队长也支持不住了，扑通一声跪在地上，不停地磕头，还不停地叫着：“大人，你放了我吧，我下次再也不敢了。”<br>　　见到他们的头儿都被吓成这样，郝队长手下的人也是害怕得不行，便连忙学着郝队长的样子磕了几个响头，不停地乞求着神秘人的原谅。<br>　　等了一小会，也不见有任何事情发生，郝队长他们便也放松了警惕，可就在此时，那个睥睨苍穹的声音又响了起来，“滚！”<br>　　郝队长他们再也坚持不住了，赶忙起身向墓门外跑去，边跑还一边发誓，决定在自己的有生之年，不，还要告诫自己的子子孙孙，都千万不要去打扰那座神秘的陵墓。<br>　　虚空中，白发少年站在云端，用他那远胜顺风耳的听力始终关注着古墓前的情况，眼见考古队一行人慢慢离开，他在心中默念道：“籍，你好大的面子啊，他们居然会认为我是你的守陵人，不过就这样吧，你追随了我那么久，这次就让你占我一个便宜好了，不过这恐怕是我在离开你之前为你做的最后一件事了，我知道虽然你平时大大咧咧的，但终究是喜欢清静之人，我是不会让外人打扰你的。我已经陪同你，沉睡了两百余年，是时候该苏醒了，也该离开了。毕竟这天下没有不散的筵席，更何况你已经永眠了。籍，我不在的日子，你好生安息。今后若是有缘，我定回来陪你喝酒，说不定还提着刘邦的人头，为你助兴。哈哈哈。一切都还没有成为定数，一切都未可知啊。”<br>　　白发少年默念完后，便在虚空中随手一抓，踩在了一只仙鹤身上，背着沉重的青铜宝剑飘然离去。</p>
]]></content>
      <categories>
        <category>小说（一）</category>
      </categories>
  </entry>
  <entry>
    <title>问题实现1</title>
    <url>/2019/11/25/C%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/%E9%97%AE%E9%A2%98%E5%AE%9E%E7%8E%B01/</url>
    <content><![CDATA[<p>// Created by 博闻 Kei on 2019/10/2.<br>// Copyright © 2019 博闻 Kei. All rights reserved.<br>//在一个数组中存放20个整数，统计并输出该数组中素数的个数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line">**<span class="function"><span class="keyword">void</span>** <span class="title">ss</span><span class="params">(**<span class="keyword">int</span>** sz[<span class="number">20</span>],**<span class="keyword">int</span>** j,**<span class="keyword">int</span>** geshu,**<span class="keyword">int</span>** i)</span></span>;<span class="comment">//声明函数</span></span><br><span class="line"></span><br><span class="line">**<span class="function"><span class="keyword">void</span>** <span class="title">ss</span><span class="params">(**<span class="keyword">int</span>** sz[<span class="number">20</span>],**<span class="keyword">int</span>** j,**<span class="keyword">int</span>** geshu,**<span class="keyword">int</span>** i)</span><span class="comment">//实现输出素数个数的函数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  **<span class="keyword">while</span>** (i&lt;=<span class="number">19</span>) &#123;j=<span class="number">2</span>;<span class="comment">//执行循环，控制次数</span></span><br><span class="line"></span><br><span class="line">​    **<span class="keyword">if</span>** (sz[i]!=<span class="number">1</span>) &#123;<span class="comment">//认为规定1不是素数</span></span><br><span class="line"></span><br><span class="line">​      **<span class="keyword">while</span>** (j&lt;=sz[i]) &#123;<span class="comment">//执行循环</span></span><br><span class="line"></span><br><span class="line">​        **<span class="keyword">if</span>** (sz[i]%j==<span class="number">0</span>) &#123;<span class="comment">//判断整数能否被j整除，如果可以执行下一步</span></span><br><span class="line"></span><br><span class="line">​          **<span class="keyword">if</span>** (sz[i]==j) &#123;<span class="comment">//判断这个整数是否是它本身</span></span><br><span class="line"></span><br><span class="line">​            geshu++;<span class="comment">//如果是，个数➕1</span></span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">​          **<span class="keyword">else</span>**&#123;**<span class="keyword">break</span>**;&#125;<span class="comment">//否则，跳过</span></span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        j++;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    i++;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"素数的个数为：%d\n"</span>,geshu);<span class="comment">//输出素数个数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**<span class="function"><span class="keyword">int</span>** <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  **<span class="keyword">int</span>** sz1[<span class="number">20</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">  ss(sz1, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  **<span class="keyword">int</span>** sz2[<span class="number">20</span>]=&#123;<span class="number">100</span>,<span class="number">43</span>,<span class="number">33</span>,<span class="number">123</span>,<span class="number">41234</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">24</span>,<span class="number">67</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">39</span>,<span class="number">23</span>,<span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line">  ss(sz2, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C语言作业</category>
      </categories>
  </entry>
  <entry>
    <title>起航</title>
    <url>/2019/11/24/%E8%B5%B7%E8%88%AA/%E9%A9%AC%E4%B8%81%C2%B7%E8%B7%AF%E5%BE%B7%E9%87%91%E8%AF%B4%EF%BC%9A%E2%80%9C%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A2%A6%E6%83%B3%EF%BC%8C%E6%88%91%E4%B9%9F%E4%B8%80%E6%A0%B7%E3%80%82%E2%80%9D/</url>
    <content><![CDATA[<p>马丁·路德金说：“每个人都有自己的梦想，我也一样。”<br>AI之路崎岖异常，我用努力做武器。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
  </entry>
</search>
